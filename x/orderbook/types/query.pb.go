// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sge/orderbook/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryOrderBooksRequest is request type for Query/OrderBooks RPC method.
type QueryOrderBooksRequest struct {
	// status enables to query for order bookds matching a given status.
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryOrderBooksRequest) Reset()         { *m = QueryOrderBooksRequest{} }
func (m *QueryOrderBooksRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOrderBooksRequest) ProtoMessage()    {}
func (*QueryOrderBooksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b016841afa49a45, []int{0}
}
func (m *QueryOrderBooksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrderBooksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrderBooksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrderBooksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrderBooksRequest.Merge(m, src)
}
func (m *QueryOrderBooksRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrderBooksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrderBooksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrderBooksRequest proto.InternalMessageInfo

func (m *QueryOrderBooksRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *QueryOrderBooksRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryOrderBooksResponse is response type for the Query/OrderBooks RPC method
type QueryOrderBooksResponse struct {
	// orderbooks contains all the queried order books.
	Orderbooks []OrderBook `protobuf:"bytes,1,rep,name=orderbooks,proto3" json:"orderbooks"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryOrderBooksResponse) Reset()         { *m = QueryOrderBooksResponse{} }
func (m *QueryOrderBooksResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOrderBooksResponse) ProtoMessage()    {}
func (*QueryOrderBooksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b016841afa49a45, []int{1}
}
func (m *QueryOrderBooksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrderBooksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrderBooksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrderBooksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrderBooksResponse.Merge(m, src)
}
func (m *QueryOrderBooksResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrderBooksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrderBooksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrderBooksResponse proto.InternalMessageInfo

func (m *QueryOrderBooksResponse) GetOrderbooks() []OrderBook {
	if m != nil {
		return m.Orderbooks
	}
	return nil
}

func (m *QueryOrderBooksResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryOrderBookRequest is request type for the Query/OrderBook RPC method
type QueryOrderBookRequest struct {
	// book_id defines the book id to query for.
	BookId string `protobuf:"bytes,1,opt,name=book_id,json=bookId,proto3" json:"book_id,omitempty"`
}

func (m *QueryOrderBookRequest) Reset()         { *m = QueryOrderBookRequest{} }
func (m *QueryOrderBookRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOrderBookRequest) ProtoMessage()    {}
func (*QueryOrderBookRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b016841afa49a45, []int{2}
}
func (m *QueryOrderBookRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrderBookRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrderBookRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrderBookRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrderBookRequest.Merge(m, src)
}
func (m *QueryOrderBookRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrderBookRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrderBookRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrderBookRequest proto.InternalMessageInfo

func (m *QueryOrderBookRequest) GetBookId() string {
	if m != nil {
		return m.BookId
	}
	return ""
}

// QueryOrderBookResponse is response type for the Query/OrderBook RPC method
type QueryOrderBookResponse struct {
	// orderBook defines the the order book info.
	Orderbook OrderBook `protobuf:"bytes,1,opt,name=orderbook,proto3" json:"orderbook"`
}

func (m *QueryOrderBookResponse) Reset()         { *m = QueryOrderBookResponse{} }
func (m *QueryOrderBookResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOrderBookResponse) ProtoMessage()    {}
func (*QueryOrderBookResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b016841afa49a45, []int{3}
}
func (m *QueryOrderBookResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrderBookResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrderBookResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrderBookResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrderBookResponse.Merge(m, src)
}
func (m *QueryOrderBookResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrderBookResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrderBookResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrderBookResponse proto.InternalMessageInfo

func (m *QueryOrderBookResponse) GetOrderbook() OrderBook {
	if m != nil {
		return m.Orderbook
	}
	return OrderBook{}
}

// QueryBookParticipantsRequest is request type for the Query/BookParticipants RPC method
type QueryBookParticipantsRequest struct {
	// book_id defines the book id to query for.
	BookId string `protobuf:"bytes,1,opt,name=book_id,json=bookId,proto3" json:"book_id,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBookParticipantsRequest) Reset()         { *m = QueryBookParticipantsRequest{} }
func (m *QueryBookParticipantsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBookParticipantsRequest) ProtoMessage()    {}
func (*QueryBookParticipantsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b016841afa49a45, []int{4}
}
func (m *QueryBookParticipantsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBookParticipantsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBookParticipantsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBookParticipantsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBookParticipantsRequest.Merge(m, src)
}
func (m *QueryBookParticipantsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBookParticipantsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBookParticipantsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBookParticipantsRequest proto.InternalMessageInfo

func (m *QueryBookParticipantsRequest) GetBookId() string {
	if m != nil {
		return m.BookId
	}
	return ""
}

func (m *QueryBookParticipantsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryBookParticipantsResponse is response type for the Query/BookParticipants RPC method
type QueryBookParticipantsResponse struct {
	BookParticipants []BookParticipant `protobuf:"bytes,1,rep,name=book_participants,json=bookParticipants,proto3" json:"book_participants"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBookParticipantsResponse) Reset()         { *m = QueryBookParticipantsResponse{} }
func (m *QueryBookParticipantsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBookParticipantsResponse) ProtoMessage()    {}
func (*QueryBookParticipantsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b016841afa49a45, []int{5}
}
func (m *QueryBookParticipantsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBookParticipantsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBookParticipantsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBookParticipantsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBookParticipantsResponse.Merge(m, src)
}
func (m *QueryBookParticipantsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBookParticipantsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBookParticipantsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBookParticipantsResponse proto.InternalMessageInfo

func (m *QueryBookParticipantsResponse) GetBookParticipants() []BookParticipant {
	if m != nil {
		return m.BookParticipants
	}
	return nil
}

func (m *QueryBookParticipantsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryBookParticipantRequest is request type for the Query/BookParticipant RPC method
type QueryBookParticipantRequest struct {
	// book_id defines the book id to query for.
	BookId string `protobuf:"bytes,1,opt,name=book_id,json=bookId,proto3" json:"book_id,omitempty"`
	// participant_number defines the participant number to query for
	ParticipantNumber uint64 `protobuf:"varint,2,opt,name=participant_number,json=participantNumber,proto3" json:"participant_number,omitempty"`
}

func (m *QueryBookParticipantRequest) Reset()         { *m = QueryBookParticipantRequest{} }
func (m *QueryBookParticipantRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBookParticipantRequest) ProtoMessage()    {}
func (*QueryBookParticipantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b016841afa49a45, []int{6}
}
func (m *QueryBookParticipantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBookParticipantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBookParticipantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBookParticipantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBookParticipantRequest.Merge(m, src)
}
func (m *QueryBookParticipantRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBookParticipantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBookParticipantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBookParticipantRequest proto.InternalMessageInfo

func (m *QueryBookParticipantRequest) GetBookId() string {
	if m != nil {
		return m.BookId
	}
	return ""
}

func (m *QueryBookParticipantRequest) GetParticipantNumber() uint64 {
	if m != nil {
		return m.ParticipantNumber
	}
	return 0
}

// QueryBookParticipantResponse is response type for the Query/BookParticipant RPC method
type QueryBookParticipantResponse struct {
	// book_participant defines the the book participant info.
	BookParticipant BookParticipant `protobuf:"bytes,1,opt,name=book_participant,json=bookParticipant,proto3" json:"book_participant"`
}

func (m *QueryBookParticipantResponse) Reset()         { *m = QueryBookParticipantResponse{} }
func (m *QueryBookParticipantResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBookParticipantResponse) ProtoMessage()    {}
func (*QueryBookParticipantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b016841afa49a45, []int{7}
}
func (m *QueryBookParticipantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBookParticipantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBookParticipantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBookParticipantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBookParticipantResponse.Merge(m, src)
}
func (m *QueryBookParticipantResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBookParticipantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBookParticipantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBookParticipantResponse proto.InternalMessageInfo

func (m *QueryBookParticipantResponse) GetBookParticipant() BookParticipant {
	if m != nil {
		return m.BookParticipant
	}
	return BookParticipant{}
}

// QueryBookExposuresRequest is request type for the Query/BookExposures RPC method
type QueryBookExposuresRequest struct {
	// book_id defines the book id to query for.
	BookId string `protobuf:"bytes,1,opt,name=book_id,json=bookId,proto3" json:"book_id,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBookExposuresRequest) Reset()         { *m = QueryBookExposuresRequest{} }
func (m *QueryBookExposuresRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBookExposuresRequest) ProtoMessage()    {}
func (*QueryBookExposuresRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b016841afa49a45, []int{8}
}
func (m *QueryBookExposuresRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBookExposuresRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBookExposuresRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBookExposuresRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBookExposuresRequest.Merge(m, src)
}
func (m *QueryBookExposuresRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBookExposuresRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBookExposuresRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBookExposuresRequest proto.InternalMessageInfo

func (m *QueryBookExposuresRequest) GetBookId() string {
	if m != nil {
		return m.BookId
	}
	return ""
}

func (m *QueryBookExposuresRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryBookExposuresResponse is response type for the Query/BookExposures RPC method
type QueryBookExposuresResponse struct {
	BookExposures []BookOddsExposure `protobuf:"bytes,1,rep,name=book_exposures,json=bookExposures,proto3" json:"book_exposures"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBookExposuresResponse) Reset()         { *m = QueryBookExposuresResponse{} }
func (m *QueryBookExposuresResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBookExposuresResponse) ProtoMessage()    {}
func (*QueryBookExposuresResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b016841afa49a45, []int{9}
}
func (m *QueryBookExposuresResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBookExposuresResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBookExposuresResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBookExposuresResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBookExposuresResponse.Merge(m, src)
}
func (m *QueryBookExposuresResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBookExposuresResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBookExposuresResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBookExposuresResponse proto.InternalMessageInfo

func (m *QueryBookExposuresResponse) GetBookExposures() []BookOddsExposure {
	if m != nil {
		return m.BookExposures
	}
	return nil
}

func (m *QueryBookExposuresResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryBookExposureRequest is request type for the Query/BookExposure RPC method
type QueryBookExposureRequest struct {
	// book_id defines the book id to query for.
	BookId string `protobuf:"bytes,1,opt,name=book_id,json=bookId,proto3" json:"book_id,omitempty"`
	// odds_id defines the odds id to query for.
	OddsId string `protobuf:"bytes,2,opt,name=odds_id,json=oddsId,proto3" json:"odds_id,omitempty"`
}

func (m *QueryBookExposureRequest) Reset()         { *m = QueryBookExposureRequest{} }
func (m *QueryBookExposureRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBookExposureRequest) ProtoMessage()    {}
func (*QueryBookExposureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b016841afa49a45, []int{10}
}
func (m *QueryBookExposureRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBookExposureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBookExposureRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBookExposureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBookExposureRequest.Merge(m, src)
}
func (m *QueryBookExposureRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBookExposureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBookExposureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBookExposureRequest proto.InternalMessageInfo

func (m *QueryBookExposureRequest) GetBookId() string {
	if m != nil {
		return m.BookId
	}
	return ""
}

func (m *QueryBookExposureRequest) GetOddsId() string {
	if m != nil {
		return m.OddsId
	}
	return ""
}

// QueryBookExposureResponse is response type for the Query/BookExposure RPC method
type QueryBookExposureResponse struct {
	// book_exposure defines the the book exposure info.
	BookExposure BookOddsExposure `protobuf:"bytes,1,opt,name=book_exposure,json=bookExposure,proto3" json:"book_exposure"`
}

func (m *QueryBookExposureResponse) Reset()         { *m = QueryBookExposureResponse{} }
func (m *QueryBookExposureResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBookExposureResponse) ProtoMessage()    {}
func (*QueryBookExposureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b016841afa49a45, []int{11}
}
func (m *QueryBookExposureResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBookExposureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBookExposureResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBookExposureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBookExposureResponse.Merge(m, src)
}
func (m *QueryBookExposureResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBookExposureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBookExposureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBookExposureResponse proto.InternalMessageInfo

func (m *QueryBookExposureResponse) GetBookExposure() BookOddsExposure {
	if m != nil {
		return m.BookExposure
	}
	return BookOddsExposure{}
}

// QueryParticipantExposuresRequest is request type for the Query/ParticipantExposures RPC method
type QueryParticipantExposuresRequest struct {
	// book_id defines the book id to query for.
	BookId string `protobuf:"bytes,1,opt,name=book_id,json=bookId,proto3" json:"book_id,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryParticipantExposuresRequest) Reset()         { *m = QueryParticipantExposuresRequest{} }
func (m *QueryParticipantExposuresRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParticipantExposuresRequest) ProtoMessage()    {}
func (*QueryParticipantExposuresRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b016841afa49a45, []int{12}
}
func (m *QueryParticipantExposuresRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParticipantExposuresRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParticipantExposuresRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParticipantExposuresRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParticipantExposuresRequest.Merge(m, src)
}
func (m *QueryParticipantExposuresRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParticipantExposuresRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParticipantExposuresRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParticipantExposuresRequest proto.InternalMessageInfo

func (m *QueryParticipantExposuresRequest) GetBookId() string {
	if m != nil {
		return m.BookId
	}
	return ""
}

func (m *QueryParticipantExposuresRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryParticipantExposuresResponse is response type for the Query/ParticipantExposures RPC method
type QueryParticipantExposuresResponse struct {
	ParticipantExposures []ParticipantExposure `protobuf:"bytes,1,rep,name=participant_exposures,json=participantExposures,proto3" json:"participant_exposures"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryParticipantExposuresResponse) Reset()         { *m = QueryParticipantExposuresResponse{} }
func (m *QueryParticipantExposuresResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParticipantExposuresResponse) ProtoMessage()    {}
func (*QueryParticipantExposuresResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b016841afa49a45, []int{13}
}
func (m *QueryParticipantExposuresResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParticipantExposuresResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParticipantExposuresResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParticipantExposuresResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParticipantExposuresResponse.Merge(m, src)
}
func (m *QueryParticipantExposuresResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParticipantExposuresResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParticipantExposuresResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParticipantExposuresResponse proto.InternalMessageInfo

func (m *QueryParticipantExposuresResponse) GetParticipantExposures() []ParticipantExposure {
	if m != nil {
		return m.ParticipantExposures
	}
	return nil
}

func (m *QueryParticipantExposuresResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryParticipantExposureRequest is request type for the Query/ParticipantExposure RPC method
type QueryParticipantExposureRequest struct {
	// book_id defines the book id to query for.
	BookId            string `protobuf:"bytes,1,opt,name=book_id,json=bookId,proto3" json:"book_id,omitempty"`
	ParticipantNumber uint64 `protobuf:"varint,2,opt,name=participant_number,json=participantNumber,proto3" json:"participant_number,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryParticipantExposureRequest) Reset()         { *m = QueryParticipantExposureRequest{} }
func (m *QueryParticipantExposureRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParticipantExposureRequest) ProtoMessage()    {}
func (*QueryParticipantExposureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b016841afa49a45, []int{14}
}
func (m *QueryParticipantExposureRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParticipantExposureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParticipantExposureRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParticipantExposureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParticipantExposureRequest.Merge(m, src)
}
func (m *QueryParticipantExposureRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParticipantExposureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParticipantExposureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParticipantExposureRequest proto.InternalMessageInfo

func (m *QueryParticipantExposureRequest) GetBookId() string {
	if m != nil {
		return m.BookId
	}
	return ""
}

func (m *QueryParticipantExposureRequest) GetParticipantNumber() uint64 {
	if m != nil {
		return m.ParticipantNumber
	}
	return 0
}

func (m *QueryParticipantExposureRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryParticipantExposureResponse is response type for the Query/ParticipantExposure RPC method
type QueryParticipantExposureResponse struct {
	// book_exposure defines the the book exposure info.
	ParticipantExposure []ParticipantExposure `protobuf:"bytes,1,rep,name=participant_exposure,json=participantExposure,proto3" json:"participant_exposure"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryParticipantExposureResponse) Reset()         { *m = QueryParticipantExposureResponse{} }
func (m *QueryParticipantExposureResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParticipantExposureResponse) ProtoMessage()    {}
func (*QueryParticipantExposureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b016841afa49a45, []int{15}
}
func (m *QueryParticipantExposureResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParticipantExposureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParticipantExposureResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParticipantExposureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParticipantExposureResponse.Merge(m, src)
}
func (m *QueryParticipantExposureResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParticipantExposureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParticipantExposureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParticipantExposureResponse proto.InternalMessageInfo

func (m *QueryParticipantExposureResponse) GetParticipantExposure() []ParticipantExposure {
	if m != nil {
		return m.ParticipantExposure
	}
	return nil
}

func (m *QueryParticipantExposureResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryHistoricalParticipantExposuresRequest is request type for the Query/HistoricalParticipantExposures RPC method
type QueryHistoricalParticipantExposuresRequest struct {
	// book_id defines the book id to query for.
	BookId string `protobuf:"bytes,1,opt,name=book_id,json=bookId,proto3" json:"book_id,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryHistoricalParticipantExposuresRequest) Reset() {
	*m = QueryHistoricalParticipantExposuresRequest{}
}
func (m *QueryHistoricalParticipantExposuresRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryHistoricalParticipantExposuresRequest) ProtoMessage() {}
func (*QueryHistoricalParticipantExposuresRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b016841afa49a45, []int{16}
}
func (m *QueryHistoricalParticipantExposuresRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHistoricalParticipantExposuresRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHistoricalParticipantExposuresRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHistoricalParticipantExposuresRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHistoricalParticipantExposuresRequest.Merge(m, src)
}
func (m *QueryHistoricalParticipantExposuresRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHistoricalParticipantExposuresRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHistoricalParticipantExposuresRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHistoricalParticipantExposuresRequest proto.InternalMessageInfo

func (m *QueryHistoricalParticipantExposuresRequest) GetBookId() string {
	if m != nil {
		return m.BookId
	}
	return ""
}

func (m *QueryHistoricalParticipantExposuresRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryHistoricalParticipantExposuresResponse is response type for the Query/HistoricalParticipantExposures RPC method
type QueryHistoricalParticipantExposuresResponse struct {
	ParticipantExposures []ParticipantExposure `protobuf:"bytes,1,rep,name=participant_exposures,json=participantExposures,proto3" json:"participant_exposures"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryHistoricalParticipantExposuresResponse) Reset() {
	*m = QueryHistoricalParticipantExposuresResponse{}
}
func (m *QueryHistoricalParticipantExposuresResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryHistoricalParticipantExposuresResponse) ProtoMessage() {}
func (*QueryHistoricalParticipantExposuresResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b016841afa49a45, []int{17}
}
func (m *QueryHistoricalParticipantExposuresResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHistoricalParticipantExposuresResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHistoricalParticipantExposuresResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHistoricalParticipantExposuresResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHistoricalParticipantExposuresResponse.Merge(m, src)
}
func (m *QueryHistoricalParticipantExposuresResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHistoricalParticipantExposuresResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHistoricalParticipantExposuresResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHistoricalParticipantExposuresResponse proto.InternalMessageInfo

func (m *QueryHistoricalParticipantExposuresResponse) GetParticipantExposures() []ParticipantExposure {
	if m != nil {
		return m.ParticipantExposures
	}
	return nil
}

func (m *QueryHistoricalParticipantExposuresResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryParticipantFullfilledBetsRequest is request type for the Query/ParticipantFullfilledBets RPC method
type QueryParticipantFullfilledBetsRequest struct {
	// book_id defines the book id to query for.
	BookId            string `protobuf:"bytes,1,opt,name=book_id,json=bookId,proto3" json:"book_id,omitempty"`
	ParticipantNumber uint64 `protobuf:"varint,2,opt,name=participant_number,json=participantNumber,proto3" json:"participant_number,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryParticipantFullfilledBetsRequest) Reset()         { *m = QueryParticipantFullfilledBetsRequest{} }
func (m *QueryParticipantFullfilledBetsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParticipantFullfilledBetsRequest) ProtoMessage()    {}
func (*QueryParticipantFullfilledBetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b016841afa49a45, []int{18}
}
func (m *QueryParticipantFullfilledBetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParticipantFullfilledBetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParticipantFullfilledBetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParticipantFullfilledBetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParticipantFullfilledBetsRequest.Merge(m, src)
}
func (m *QueryParticipantFullfilledBetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParticipantFullfilledBetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParticipantFullfilledBetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParticipantFullfilledBetsRequest proto.InternalMessageInfo

func (m *QueryParticipantFullfilledBetsRequest) GetBookId() string {
	if m != nil {
		return m.BookId
	}
	return ""
}

func (m *QueryParticipantFullfilledBetsRequest) GetParticipantNumber() uint64 {
	if m != nil {
		return m.ParticipantNumber
	}
	return 0
}

func (m *QueryParticipantFullfilledBetsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryParticipantFullfilledBetsResponse is response type for the Query/ParticipantFullfilledBets RPC method
type QueryParticipantFullfilledBetsResponse struct {
	// book_exposure defines the the book exposure info.
	ParticipantBets []ParticipantBetPairResponse `protobuf:"bytes,1,rep,name=participant_bets,json=participantBets,proto3" json:"participant_bets"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryParticipantFullfilledBetsResponse) Reset() {
	*m = QueryParticipantFullfilledBetsResponse{}
}
func (m *QueryParticipantFullfilledBetsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParticipantFullfilledBetsResponse) ProtoMessage()    {}
func (*QueryParticipantFullfilledBetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b016841afa49a45, []int{19}
}
func (m *QueryParticipantFullfilledBetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParticipantFullfilledBetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParticipantFullfilledBetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParticipantFullfilledBetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParticipantFullfilledBetsResponse.Merge(m, src)
}
func (m *QueryParticipantFullfilledBetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParticipantFullfilledBetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParticipantFullfilledBetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParticipantFullfilledBetsResponse proto.InternalMessageInfo

func (m *QueryParticipantFullfilledBetsResponse) GetParticipantBets() []ParticipantBetPairResponse {
	if m != nil {
		return m.ParticipantBets
	}
	return nil
}

func (m *QueryParticipantFullfilledBetsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryOrderBooksRequest)(nil), "sgenetwork.sge.orderbook.QueryOrderBooksRequest")
	proto.RegisterType((*QueryOrderBooksResponse)(nil), "sgenetwork.sge.orderbook.QueryOrderBooksResponse")
	proto.RegisterType((*QueryOrderBookRequest)(nil), "sgenetwork.sge.orderbook.QueryOrderBookRequest")
	proto.RegisterType((*QueryOrderBookResponse)(nil), "sgenetwork.sge.orderbook.QueryOrderBookResponse")
	proto.RegisterType((*QueryBookParticipantsRequest)(nil), "sgenetwork.sge.orderbook.QueryBookParticipantsRequest")
	proto.RegisterType((*QueryBookParticipantsResponse)(nil), "sgenetwork.sge.orderbook.QueryBookParticipantsResponse")
	proto.RegisterType((*QueryBookParticipantRequest)(nil), "sgenetwork.sge.orderbook.QueryBookParticipantRequest")
	proto.RegisterType((*QueryBookParticipantResponse)(nil), "sgenetwork.sge.orderbook.QueryBookParticipantResponse")
	proto.RegisterType((*QueryBookExposuresRequest)(nil), "sgenetwork.sge.orderbook.QueryBookExposuresRequest")
	proto.RegisterType((*QueryBookExposuresResponse)(nil), "sgenetwork.sge.orderbook.QueryBookExposuresResponse")
	proto.RegisterType((*QueryBookExposureRequest)(nil), "sgenetwork.sge.orderbook.QueryBookExposureRequest")
	proto.RegisterType((*QueryBookExposureResponse)(nil), "sgenetwork.sge.orderbook.QueryBookExposureResponse")
	proto.RegisterType((*QueryParticipantExposuresRequest)(nil), "sgenetwork.sge.orderbook.QueryParticipantExposuresRequest")
	proto.RegisterType((*QueryParticipantExposuresResponse)(nil), "sgenetwork.sge.orderbook.QueryParticipantExposuresResponse")
	proto.RegisterType((*QueryParticipantExposureRequest)(nil), "sgenetwork.sge.orderbook.QueryParticipantExposureRequest")
	proto.RegisterType((*QueryParticipantExposureResponse)(nil), "sgenetwork.sge.orderbook.QueryParticipantExposureResponse")
	proto.RegisterType((*QueryHistoricalParticipantExposuresRequest)(nil), "sgenetwork.sge.orderbook.QueryHistoricalParticipantExposuresRequest")
	proto.RegisterType((*QueryHistoricalParticipantExposuresResponse)(nil), "sgenetwork.sge.orderbook.QueryHistoricalParticipantExposuresResponse")
	proto.RegisterType((*QueryParticipantFullfilledBetsRequest)(nil), "sgenetwork.sge.orderbook.QueryParticipantFullfilledBetsRequest")
	proto.RegisterType((*QueryParticipantFullfilledBetsResponse)(nil), "sgenetwork.sge.orderbook.QueryParticipantFullfilledBetsResponse")
}

func init() { proto.RegisterFile("sge/orderbook/query.proto", fileDescriptor_8b016841afa49a45) }

var fileDescriptor_8b016841afa49a45 = []byte{
	// 1081 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x98, 0xcf, 0x6f, 0xdc, 0x54,
	0x10, 0xc7, 0xf3, 0xd2, 0xd2, 0x2a, 0xd3, 0x86, 0xa4, 0xaf, 0x69, 0xb3, 0x71, 0xdb, 0x6d, 0xea,
	0xaa, 0x21, 0xa4, 0xac, 0x5f, 0x7e, 0xf4, 0x87, 0x48, 0x41, 0xa0, 0xa5, 0x4d, 0x89, 0x28, 0x34,
	0x2c, 0x42, 0x48, 0x15, 0x52, 0x65, 0xc7, 0x2f, 0x8e, 0x95, 0xcd, 0x3e, 0xd7, 0xcf, 0x0b, 0x29,
	0x21, 0x42, 0x82, 0x33, 0x12, 0xa8, 0x57, 0xee, 0x9c, 0x40, 0x42, 0x1c, 0xb8, 0x71, 0x03, 0xe5,
	0x58, 0xa9, 0x12, 0xaa, 0x38, 0xa0, 0x2a, 0xe1, 0x1f, 0x40, 0xfc, 0x03, 0xc8, 0xcf, 0xcf, 0x8e,
	0xd7, 0xb1, 0x77, 0xed, 0x64, 0xd5, 0x88, 0x9b, 0xbd, 0xb3, 0x33, 0xf3, 0xf9, 0xce, 0x8c, 0xed,
	0xb1, 0x61, 0x84, 0x5b, 0x94, 0x30, 0xd7, 0xa4, 0xae, 0xc1, 0xd8, 0x0a, 0x79, 0xd0, 0xa4, 0xee,
	0x43, 0xcd, 0x71, 0x99, 0xc7, 0x70, 0x89, 0x5b, 0xb4, 0x41, 0xbd, 0x4f, 0x99, 0xbb, 0xa2, 0x71,
	0x8b, 0x6a, 0xd1, 0xbf, 0x94, 0x89, 0x45, 0xc6, 0x57, 0x19, 0x27, 0x86, 0xce, 0x69, 0xe0, 0x42,
	0x3e, 0x99, 0x32, 0xa8, 0xa7, 0x4f, 0x11, 0x47, 0xb7, 0xec, 0x86, 0xee, 0xd9, 0xac, 0x11, 0x44,
	0x51, 0x86, 0x2c, 0x66, 0x31, 0x71, 0x48, 0xfc, 0x23, 0xf9, 0xeb, 0x59, 0x8b, 0x31, 0xab, 0x4e,
	0x89, 0xee, 0xd8, 0x44, 0x6f, 0x34, 0x98, 0x27, 0x5c, 0xb8, 0xb4, 0x9e, 0x6b, 0x85, 0x8a, 0x8e,
	0x02, 0xb3, 0xba, 0x06, 0xa7, 0xdf, 0xf7, 0x93, 0xde, 0xf5, 0x7f, 0xaf, 0x32, 0xb6, 0xc2, 0x6b,
	0xf4, 0x41, 0x93, 0x72, 0x0f, 0x9f, 0x86, 0x23, 0xdc, 0xd3, 0xbd, 0x26, 0x2f, 0xa1, 0x51, 0x34,
	0xde, 0x57, 0x93, 0x67, 0x78, 0x0e, 0x60, 0x07, 0xac, 0xd4, 0x3b, 0x8a, 0xc6, 0x8f, 0x4d, 0x8f,
	0x69, 0x81, 0x0a, 0xcd, 0x57, 0xa1, 0x05, 0xc2, 0xa5, 0x0a, 0x6d, 0x41, 0xb7, 0xa8, 0x8c, 0x59,
	0x8b, 0x79, 0xaa, 0x3f, 0x20, 0x18, 0xde, 0x95, 0x9a, 0x3b, 0xac, 0xc1, 0x29, 0x9e, 0x07, 0x88,
	0x40, 0xfd, 0xfc, 0x87, 0xc6, 0x8f, 0x4d, 0x5f, 0xd4, 0xb2, 0x6a, 0xa8, 0x45, 0x11, 0xaa, 0x87,
	0x37, 0xff, 0x3a, 0xdf, 0x53, 0x8b, 0x39, 0xe3, 0xdb, 0x29, 0xb8, 0x2f, 0x75, 0xc4, 0x0d, 0x38,
	0x5a, 0x78, 0x27, 0xe1, 0x54, 0x2b, 0x6e, 0x58, 0xa8, 0x61, 0x38, 0xea, 0xa7, 0xba, 0x6f, 0x9b,
	0x61, 0xa5, 0xfc, 0xd3, 0x79, 0x53, 0xd5, 0x93, 0xb5, 0x8d, 0xf4, 0xdd, 0x86, 0xbe, 0x08, 0x51,
	0x38, 0x15, 0x92, 0xb7, 0xe3, 0xab, 0x7e, 0x01, 0x67, 0x45, 0x0a, 0xdf, 0xba, 0xa0, 0xbb, 0x9e,
	0xbd, 0x68, 0x3b, 0x7a, 0xc3, 0xe3, 0x9d, 0xd8, 0xba, 0xd6, 0xc5, 0xdf, 0x11, 0x9c, 0xcb, 0x20,
	0x90, 0x5a, 0x3f, 0x86, 0x13, 0x02, 0xc1, 0x89, 0x19, 0x65, 0x4b, 0x5f, 0xce, 0xd6, 0x9c, 0x08,
	0x27, 0x95, 0x0f, 0x1a, 0x89, 0x2c, 0xdd, 0x6b, 0x2f, 0x85, 0x33, 0x69, 0x3a, 0x3a, 0x16, 0xb2,
	0x02, 0x38, 0xa6, 0xec, 0x7e, 0xa3, 0xb9, 0x6a, 0x50, 0x57, 0x80, 0x1c, 0xae, 0x9d, 0x88, 0x59,
	0xde, 0x13, 0x06, 0xf5, 0xb3, 0xf4, 0x86, 0x45, 0xd5, 0xba, 0x07, 0x83, 0xc9, 0x6a, 0xc9, 0x01,
	0x29, 0x5c, 0xac, 0x81, 0x44, 0xb1, 0xd4, 0xcf, 0x61, 0x24, 0xca, 0x7d, 0x6b, 0xcd, 0x61, 0xbc,
	0xe9, 0xd2, 0xe7, 0x37, 0x29, 0xbf, 0x22, 0x50, 0xd2, 0xd2, 0x4b, 0xe1, 0x1f, 0xc1, 0x8b, 0x22,
	0x3f, 0x0d, 0x2d, 0x72, 0x46, 0x26, 0xda, 0xcb, 0xbe, 0x6b, 0x9a, 0x3c, 0x0c, 0x26, 0x75, 0xf7,
	0x1b, 0xf1, 0x04, 0xdd, 0x9b, 0x90, 0x3b, 0x50, 0xda, 0xc5, 0xdf, 0xb1, 0x7a, 0xc3, 0x70, 0x94,
	0x99, 0x26, 0xf7, 0x0d, 0xbd, 0x81, 0xc1, 0x3f, 0x9d, 0x37, 0x55, 0x37, 0xa5, 0x19, 0x51, 0x31,
	0x3e, 0x84, 0xfe, 0x96, 0x62, 0xc8, 0x11, 0x28, 0x5e, 0x8b, 0xe3, 0xf1, 0x5a, 0xa8, 0x5f, 0x21,
	0x18, 0x15, 0x49, 0x63, 0x53, 0xf1, 0xfc, 0x07, 0xe1, 0x0f, 0x04, 0x17, 0xda, 0x50, 0xc8, 0x12,
	0x2c, 0xc3, 0xa9, 0xf8, 0x75, 0x95, 0x1c, 0x8b, 0x4a, 0x76, 0x29, 0x52, 0xc2, 0xca, 0x6a, 0x0c,
	0x39, 0x29, 0x19, 0xbb, 0x37, 0x20, 0x3f, 0x21, 0x38, 0x9f, 0x25, 0xac, 0xcb, 0xf7, 0x91, 0x44,
	0x33, 0x0e, 0xed, 0xb9, 0x19, 0x4f, 0xda, 0x8c, 0x44, 0xd4, 0x8b, 0x25, 0x18, 0x4a, 0xeb, 0xc5,
	0x7e, 0x5a, 0x71, 0x32, 0xa5, 0x15, 0xdd, 0xeb, 0xc4, 0xd7, 0x08, 0x26, 0x84, 0xaa, 0xb7, 0x6d,
	0xee, 0x31, 0xd7, 0x5e, 0xd4, 0xeb, 0x07, 0x3a, 0xf2, 0xcf, 0x10, 0x5c, 0xce, 0xc5, 0xf3, 0xff,
	0x1d, 0xfe, 0x5f, 0x10, 0x5c, 0x4a, 0x0e, 0xd2, 0x5c, 0xb3, 0x5e, 0x5f, 0xb2, 0xeb, 0x75, 0x6a,
	0x56, 0x69, 0x8e, 0x9d, 0xe4, 0x80, 0x2e, 0x81, 0xa7, 0x08, 0xc6, 0x3a, 0x91, 0xcb, 0xbe, 0x50,
	0x18, 0x8c, 0x13, 0x1a, 0x34, 0x5a, 0x65, 0xae, 0xe4, 0x6a, 0x49, 0x95, 0x7a, 0x0b, 0xba, 0xed,
	0x86, 0xf1, 0xc2, 0x07, 0xb5, 0xd3, 0xf2, 0x8f, 0xee, 0x35, 0x65, 0xfa, 0xbb, 0x01, 0x78, 0x41,
	0x48, 0xc3, 0x8f, 0x10, 0xc0, 0xce, 0xa2, 0x8d, 0x27, 0xb3, 0x71, 0xd3, 0x5f, 0x07, 0x94, 0xa9,
	0x02, 0x1e, 0x01, 0x89, 0x3a, 0xfa, 0xe5, 0x93, 0xbf, 0x1f, 0xf5, 0x2a, 0xb8, 0x44, 0x5a, 0xde,
	0x41, 0x38, 0x59, 0x0f, 0x5e, 0x25, 0x36, 0xf0, 0xb7, 0x08, 0xfa, 0x22, 0x47, 0x4c, 0xf2, 0xa6,
	0x08, 0x99, 0x26, 0xf3, 0x3b, 0x48, 0xa4, 0x0b, 0x02, 0xe9, 0x0c, 0x1e, 0xd9, 0x85, 0x24, 0x47,
	0x72, 0x03, 0xff, 0x8c, 0x60, 0x30, 0xb9, 0xcc, 0xe2, 0x6b, 0x1d, 0x32, 0x65, 0xec, 0xdf, 0xca,
	0xf5, 0xc2, 0x7e, 0x12, 0x54, 0x13, 0xa0, 0xe3, 0x78, 0x2c, 0x13, 0x94, 0xc4, 0x17, 0x6a, 0xfc,
	0x1b, 0x82, 0x81, 0x44, 0x30, 0x7c, 0xb5, 0x58, 0xf2, 0x90, 0xf9, 0x5a, 0x51, 0x37, 0x89, 0xfc,
	0x96, 0x40, 0x7e, 0x1d, 0xdf, 0xc8, 0x87, 0x4c, 0xd6, 0x77, 0x5f, 0xec, 0x1b, 0xf8, 0x7b, 0x04,
	0xfd, 0x2d, 0x0b, 0x22, 0x9e, 0xc9, 0x81, 0x93, 0xbc, 0xa3, 0x2b, 0x57, 0x8a, 0x39, 0x49, 0x05,
	0x97, 0x85, 0x82, 0x4b, 0xf8, 0x62, 0xb6, 0x82, 0xe8, 0x56, 0x8c, 0x7f, 0x44, 0x70, 0x3c, 0x1e,
	0x06, 0x4f, 0x17, 0xc8, 0x19, 0x72, 0xce, 0x14, 0xf2, 0x91, 0x98, 0x57, 0x05, 0x26, 0xc1, 0x95,
	0x1c, 0x98, 0x64, 0x5d, 0xae, 0x9f, 0x1b, 0x78, 0x13, 0xc1, 0x50, 0xda, 0x53, 0x07, 0xcf, 0x76,
	0x80, 0x68, 0xf3, 0xe8, 0x54, 0x6e, 0xec, 0xc9, 0x57, 0x0a, 0xb9, 0x2e, 0x84, 0x4c, 0x61, 0x92,
	0x6b, 0x62, 0x2a, 0x3b, 0xb5, 0xff, 0x13, 0xc1, 0xc9, 0x94, 0xc8, 0xf8, 0xd5, 0xe2, 0x34, 0xa1,
	0x90, 0xd9, 0xbd, 0xb8, 0x4a, 0x1d, 0x77, 0x84, 0x8e, 0x39, 0x7c, 0xb3, 0xa0, 0x8e, 0xf4, 0x4b,
	0xe0, 0x1f, 0x04, 0xe5, 0xf6, 0x7b, 0x02, 0xbe, 0xd9, 0x01, 0x36, 0xd7, 0xda, 0xa3, 0xdc, 0xda,
	0x67, 0x14, 0xa9, 0xbe, 0x2a, 0xd4, 0xbf, 0x86, 0x67, 0xb3, 0xd5, 0x2f, 0x47, 0x91, 0x2a, 0xe9,
	0x0d, 0xfd, 0x17, 0xc1, 0x48, 0xe6, 0xe3, 0x17, 0xbf, 0x91, 0xbf, 0x37, 0xa9, 0x2b, 0x87, 0xf2,
	0xe6, 0xde, 0x03, 0x48, 0x91, 0x1f, 0x08, 0x91, 0xef, 0xe2, 0x77, 0xf6, 0x71, 0x73, 0x23, 0x4b,
	0x51, 0x6c, 0xb1, 0x3a, 0x54, 0xe7, 0x36, 0xb7, 0xca, 0xe8, 0xf1, 0x56, 0x19, 0x3d, 0xdb, 0x2a,
	0xa3, 0x6f, 0xb6, 0xcb, 0x3d, 0x8f, 0xb7, 0xcb, 0x3d, 0x4f, 0xb7, 0xcb, 0x3d, 0xf7, 0x5e, 0xb1,
	0x6c, 0x6f, 0xb9, 0x69, 0x68, 0x8b, 0x6c, 0xd5, 0x4f, 0x58, 0x91, 0xec, 0x22, 0xf9, 0x5a, 0xec,
	0x73, 0x9e, 0xf7, 0xd0, 0xa1, 0xdc, 0x38, 0x22, 0xbe, 0xe5, 0xcd, 0xfc, 0x17, 0x00, 0x00, 0xff,
	0xff, 0x63, 0x88, 0xf7, 0x6b, 0x81, 0x14, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// OrderBooks queries all order books that match the given status.
	OrderBooks(ctx context.Context, in *QueryOrderBooksRequest, opts ...grpc.CallOption) (*QueryOrderBooksResponse, error)
	// OrderBook queries orderbook info for given order book id.
	OrderBook(ctx context.Context, in *QueryOrderBookRequest, opts ...grpc.CallOption) (*QueryOrderBookResponse, error)
	// BookParticipants queries participant info for given orderbook.
	BookParticipants(ctx context.Context, in *QueryBookParticipantsRequest, opts ...grpc.CallOption) (*QueryBookParticipantsResponse, error)
	// BookParticipant queries participant info for given orderbook and participant number.
	BookParticipant(ctx context.Context, in *QueryBookParticipantRequest, opts ...grpc.CallOption) (*QueryBookParticipantResponse, error)
	// BookExposures queries exposures info for given orderbook.
	BookExposures(ctx context.Context, in *QueryBookExposuresRequest, opts ...grpc.CallOption) (*QueryBookExposuresResponse, error)
	// BookExposure queries exposure info for given orderbook and odds id.
	BookExposure(ctx context.Context, in *QueryBookExposureRequest, opts ...grpc.CallOption) (*QueryBookExposureResponse, error)
	// ParticipantExposures queries exposures info for given orderbook participants.
	ParticipantExposures(ctx context.Context, in *QueryParticipantExposuresRequest, opts ...grpc.CallOption) (*QueryParticipantExposuresResponse, error)
	// ParticipantExposure queries exposure info for given orderbook participant.
	ParticipantExposure(ctx context.Context, in *QueryParticipantExposureRequest, opts ...grpc.CallOption) (*QueryParticipantExposureResponse, error)
	// HistoricalParticipantExposures queries historical exposures info for given orderbook participant.
	HistoricalParticipantExposures(ctx context.Context, in *QueryHistoricalParticipantExposuresRequest, opts ...grpc.CallOption) (*QueryHistoricalParticipantExposuresResponse, error)
	// ParticipantFullfilledBets queries fulfilled bets for given orderbook participant.
	ParticipantFullfilledBets(ctx context.Context, in *QueryParticipantFullfilledBetsRequest, opts ...grpc.CallOption) (*QueryParticipantFullfilledBetsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) OrderBooks(ctx context.Context, in *QueryOrderBooksRequest, opts ...grpc.CallOption) (*QueryOrderBooksResponse, error) {
	out := new(QueryOrderBooksResponse)
	err := c.cc.Invoke(ctx, "/sgenetwork.sge.orderbook.Query/OrderBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrderBook(ctx context.Context, in *QueryOrderBookRequest, opts ...grpc.CallOption) (*QueryOrderBookResponse, error) {
	out := new(QueryOrderBookResponse)
	err := c.cc.Invoke(ctx, "/sgenetwork.sge.orderbook.Query/OrderBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BookParticipants(ctx context.Context, in *QueryBookParticipantsRequest, opts ...grpc.CallOption) (*QueryBookParticipantsResponse, error) {
	out := new(QueryBookParticipantsResponse)
	err := c.cc.Invoke(ctx, "/sgenetwork.sge.orderbook.Query/BookParticipants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BookParticipant(ctx context.Context, in *QueryBookParticipantRequest, opts ...grpc.CallOption) (*QueryBookParticipantResponse, error) {
	out := new(QueryBookParticipantResponse)
	err := c.cc.Invoke(ctx, "/sgenetwork.sge.orderbook.Query/BookParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BookExposures(ctx context.Context, in *QueryBookExposuresRequest, opts ...grpc.CallOption) (*QueryBookExposuresResponse, error) {
	out := new(QueryBookExposuresResponse)
	err := c.cc.Invoke(ctx, "/sgenetwork.sge.orderbook.Query/BookExposures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BookExposure(ctx context.Context, in *QueryBookExposureRequest, opts ...grpc.CallOption) (*QueryBookExposureResponse, error) {
	out := new(QueryBookExposureResponse)
	err := c.cc.Invoke(ctx, "/sgenetwork.sge.orderbook.Query/BookExposure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ParticipantExposures(ctx context.Context, in *QueryParticipantExposuresRequest, opts ...grpc.CallOption) (*QueryParticipantExposuresResponse, error) {
	out := new(QueryParticipantExposuresResponse)
	err := c.cc.Invoke(ctx, "/sgenetwork.sge.orderbook.Query/ParticipantExposures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ParticipantExposure(ctx context.Context, in *QueryParticipantExposureRequest, opts ...grpc.CallOption) (*QueryParticipantExposureResponse, error) {
	out := new(QueryParticipantExposureResponse)
	err := c.cc.Invoke(ctx, "/sgenetwork.sge.orderbook.Query/ParticipantExposure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HistoricalParticipantExposures(ctx context.Context, in *QueryHistoricalParticipantExposuresRequest, opts ...grpc.CallOption) (*QueryHistoricalParticipantExposuresResponse, error) {
	out := new(QueryHistoricalParticipantExposuresResponse)
	err := c.cc.Invoke(ctx, "/sgenetwork.sge.orderbook.Query/HistoricalParticipantExposures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ParticipantFullfilledBets(ctx context.Context, in *QueryParticipantFullfilledBetsRequest, opts ...grpc.CallOption) (*QueryParticipantFullfilledBetsResponse, error) {
	out := new(QueryParticipantFullfilledBetsResponse)
	err := c.cc.Invoke(ctx, "/sgenetwork.sge.orderbook.Query/ParticipantFullfilledBets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// OrderBooks queries all order books that match the given status.
	OrderBooks(context.Context, *QueryOrderBooksRequest) (*QueryOrderBooksResponse, error)
	// OrderBook queries orderbook info for given order book id.
	OrderBook(context.Context, *QueryOrderBookRequest) (*QueryOrderBookResponse, error)
	// BookParticipants queries participant info for given orderbook.
	BookParticipants(context.Context, *QueryBookParticipantsRequest) (*QueryBookParticipantsResponse, error)
	// BookParticipant queries participant info for given orderbook and participant number.
	BookParticipant(context.Context, *QueryBookParticipantRequest) (*QueryBookParticipantResponse, error)
	// BookExposures queries exposures info for given orderbook.
	BookExposures(context.Context, *QueryBookExposuresRequest) (*QueryBookExposuresResponse, error)
	// BookExposure queries exposure info for given orderbook and odds id.
	BookExposure(context.Context, *QueryBookExposureRequest) (*QueryBookExposureResponse, error)
	// ParticipantExposures queries exposures info for given orderbook participants.
	ParticipantExposures(context.Context, *QueryParticipantExposuresRequest) (*QueryParticipantExposuresResponse, error)
	// ParticipantExposure queries exposure info for given orderbook participant.
	ParticipantExposure(context.Context, *QueryParticipantExposureRequest) (*QueryParticipantExposureResponse, error)
	// HistoricalParticipantExposures queries historical exposures info for given orderbook participant.
	HistoricalParticipantExposures(context.Context, *QueryHistoricalParticipantExposuresRequest) (*QueryHistoricalParticipantExposuresResponse, error)
	// ParticipantFullfilledBets queries fulfilled bets for given orderbook participant.
	ParticipantFullfilledBets(context.Context, *QueryParticipantFullfilledBetsRequest) (*QueryParticipantFullfilledBetsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) OrderBooks(ctx context.Context, req *QueryOrderBooksRequest) (*QueryOrderBooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderBooks not implemented")
}
func (*UnimplementedQueryServer) OrderBook(ctx context.Context, req *QueryOrderBookRequest) (*QueryOrderBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderBook not implemented")
}
func (*UnimplementedQueryServer) BookParticipants(ctx context.Context, req *QueryBookParticipantsRequest) (*QueryBookParticipantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookParticipants not implemented")
}
func (*UnimplementedQueryServer) BookParticipant(ctx context.Context, req *QueryBookParticipantRequest) (*QueryBookParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookParticipant not implemented")
}
func (*UnimplementedQueryServer) BookExposures(ctx context.Context, req *QueryBookExposuresRequest) (*QueryBookExposuresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookExposures not implemented")
}
func (*UnimplementedQueryServer) BookExposure(ctx context.Context, req *QueryBookExposureRequest) (*QueryBookExposureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookExposure not implemented")
}
func (*UnimplementedQueryServer) ParticipantExposures(ctx context.Context, req *QueryParticipantExposuresRequest) (*QueryParticipantExposuresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParticipantExposures not implemented")
}
func (*UnimplementedQueryServer) ParticipantExposure(ctx context.Context, req *QueryParticipantExposureRequest) (*QueryParticipantExposureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParticipantExposure not implemented")
}
func (*UnimplementedQueryServer) HistoricalParticipantExposures(ctx context.Context, req *QueryHistoricalParticipantExposuresRequest) (*QueryHistoricalParticipantExposuresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoricalParticipantExposures not implemented")
}
func (*UnimplementedQueryServer) ParticipantFullfilledBets(ctx context.Context, req *QueryParticipantFullfilledBetsRequest) (*QueryParticipantFullfilledBetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParticipantFullfilledBets not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_OrderBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderBooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrderBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgenetwork.sge.orderbook.Query/OrderBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrderBooks(ctx, req.(*QueryOrderBooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrderBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrderBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgenetwork.sge.orderbook.Query/OrderBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrderBook(ctx, req.(*QueryOrderBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BookParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBookParticipantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BookParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgenetwork.sge.orderbook.Query/BookParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BookParticipants(ctx, req.(*QueryBookParticipantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BookParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBookParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BookParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgenetwork.sge.orderbook.Query/BookParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BookParticipant(ctx, req.(*QueryBookParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BookExposures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBookExposuresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BookExposures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgenetwork.sge.orderbook.Query/BookExposures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BookExposures(ctx, req.(*QueryBookExposuresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BookExposure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBookExposureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BookExposure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgenetwork.sge.orderbook.Query/BookExposure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BookExposure(ctx, req.(*QueryBookExposureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ParticipantExposures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParticipantExposuresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ParticipantExposures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgenetwork.sge.orderbook.Query/ParticipantExposures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ParticipantExposures(ctx, req.(*QueryParticipantExposuresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ParticipantExposure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParticipantExposureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ParticipantExposure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgenetwork.sge.orderbook.Query/ParticipantExposure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ParticipantExposure(ctx, req.(*QueryParticipantExposureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HistoricalParticipantExposures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHistoricalParticipantExposuresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HistoricalParticipantExposures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgenetwork.sge.orderbook.Query/HistoricalParticipantExposures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HistoricalParticipantExposures(ctx, req.(*QueryHistoricalParticipantExposuresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ParticipantFullfilledBets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParticipantFullfilledBetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ParticipantFullfilledBets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sgenetwork.sge.orderbook.Query/ParticipantFullfilledBets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ParticipantFullfilledBets(ctx, req.(*QueryParticipantFullfilledBetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sgenetwork.sge.orderbook.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OrderBooks",
			Handler:    _Query_OrderBooks_Handler,
		},
		{
			MethodName: "OrderBook",
			Handler:    _Query_OrderBook_Handler,
		},
		{
			MethodName: "BookParticipants",
			Handler:    _Query_BookParticipants_Handler,
		},
		{
			MethodName: "BookParticipant",
			Handler:    _Query_BookParticipant_Handler,
		},
		{
			MethodName: "BookExposures",
			Handler:    _Query_BookExposures_Handler,
		},
		{
			MethodName: "BookExposure",
			Handler:    _Query_BookExposure_Handler,
		},
		{
			MethodName: "ParticipantExposures",
			Handler:    _Query_ParticipantExposures_Handler,
		},
		{
			MethodName: "ParticipantExposure",
			Handler:    _Query_ParticipantExposure_Handler,
		},
		{
			MethodName: "HistoricalParticipantExposures",
			Handler:    _Query_HistoricalParticipantExposures_Handler,
		},
		{
			MethodName: "ParticipantFullfilledBets",
			Handler:    _Query_ParticipantFullfilledBets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sge/orderbook/query.proto",
}

func (m *QueryOrderBooksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrderBooksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrderBooksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOrderBooksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrderBooksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrderBooksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Orderbooks) > 0 {
		for iNdEx := len(m.Orderbooks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orderbooks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOrderBookRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrderBookRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrderBookRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BookId) > 0 {
		i -= len(m.BookId)
		copy(dAtA[i:], m.BookId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BookId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOrderBookResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrderBookResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrderBookResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Orderbook.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryBookParticipantsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBookParticipantsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBookParticipantsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BookId) > 0 {
		i -= len(m.BookId)
		copy(dAtA[i:], m.BookId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BookId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBookParticipantsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBookParticipantsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBookParticipantsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BookParticipants) > 0 {
		for iNdEx := len(m.BookParticipants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BookParticipants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBookParticipantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBookParticipantRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBookParticipantRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ParticipantNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ParticipantNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BookId) > 0 {
		i -= len(m.BookId)
		copy(dAtA[i:], m.BookId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BookId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBookParticipantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBookParticipantResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBookParticipantResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BookParticipant.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryBookExposuresRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBookExposuresRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBookExposuresRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BookId) > 0 {
		i -= len(m.BookId)
		copy(dAtA[i:], m.BookId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BookId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBookExposuresResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBookExposuresResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBookExposuresResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BookExposures) > 0 {
		for iNdEx := len(m.BookExposures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BookExposures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBookExposureRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBookExposureRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBookExposureRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OddsId) > 0 {
		i -= len(m.OddsId)
		copy(dAtA[i:], m.OddsId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OddsId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BookId) > 0 {
		i -= len(m.BookId)
		copy(dAtA[i:], m.BookId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BookId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBookExposureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBookExposureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBookExposureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BookExposure.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryParticipantExposuresRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParticipantExposuresRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParticipantExposuresRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BookId) > 0 {
		i -= len(m.BookId)
		copy(dAtA[i:], m.BookId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BookId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParticipantExposuresResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParticipantExposuresResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParticipantExposuresResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ParticipantExposures) > 0 {
		for iNdEx := len(m.ParticipantExposures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ParticipantExposures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParticipantExposureRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParticipantExposureRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParticipantExposureRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ParticipantNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ParticipantNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BookId) > 0 {
		i -= len(m.BookId)
		copy(dAtA[i:], m.BookId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BookId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParticipantExposureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParticipantExposureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParticipantExposureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ParticipantExposure) > 0 {
		for iNdEx := len(m.ParticipantExposure) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ParticipantExposure[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryHistoricalParticipantExposuresRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHistoricalParticipantExposuresRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHistoricalParticipantExposuresRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BookId) > 0 {
		i -= len(m.BookId)
		copy(dAtA[i:], m.BookId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BookId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHistoricalParticipantExposuresResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHistoricalParticipantExposuresResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHistoricalParticipantExposuresResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ParticipantExposures) > 0 {
		for iNdEx := len(m.ParticipantExposures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ParticipantExposures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParticipantFullfilledBetsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParticipantFullfilledBetsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParticipantFullfilledBetsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ParticipantNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ParticipantNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BookId) > 0 {
		i -= len(m.BookId)
		copy(dAtA[i:], m.BookId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BookId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParticipantFullfilledBetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParticipantFullfilledBetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParticipantFullfilledBetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ParticipantBets) > 0 {
		for iNdEx := len(m.ParticipantBets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ParticipantBets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryOrderBooksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOrderBooksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Orderbooks) > 0 {
		for _, e := range m.Orderbooks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOrderBookRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BookId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOrderBookResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Orderbook.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBookParticipantsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BookId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBookParticipantsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BookParticipants) > 0 {
		for _, e := range m.BookParticipants {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBookParticipantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BookId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ParticipantNumber != 0 {
		n += 1 + sovQuery(uint64(m.ParticipantNumber))
	}
	return n
}

func (m *QueryBookParticipantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BookParticipant.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBookExposuresRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BookId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBookExposuresResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BookExposures) > 0 {
		for _, e := range m.BookExposures {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBookExposureRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BookId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.OddsId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBookExposureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BookExposure.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryParticipantExposuresRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BookId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParticipantExposuresResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ParticipantExposures) > 0 {
		for _, e := range m.ParticipantExposures {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParticipantExposureRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BookId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ParticipantNumber != 0 {
		n += 1 + sovQuery(uint64(m.ParticipantNumber))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParticipantExposureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ParticipantExposure) > 0 {
		for _, e := range m.ParticipantExposure {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHistoricalParticipantExposuresRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BookId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHistoricalParticipantExposuresResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ParticipantExposures) > 0 {
		for _, e := range m.ParticipantExposures {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParticipantFullfilledBetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BookId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ParticipantNumber != 0 {
		n += 1 + sovQuery(uint64(m.ParticipantNumber))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParticipantFullfilledBetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ParticipantBets) > 0 {
		for _, e := range m.ParticipantBets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryOrderBooksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrderBooksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrderBooksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrderBooksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrderBooksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrderBooksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orderbooks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orderbooks = append(m.Orderbooks, OrderBook{})
			if err := m.Orderbooks[len(m.Orderbooks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrderBookRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrderBookRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrderBookRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrderBookResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrderBookResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrderBookResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orderbook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Orderbook.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBookParticipantsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBookParticipantsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBookParticipantsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBookParticipantsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBookParticipantsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBookParticipantsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookParticipants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookParticipants = append(m.BookParticipants, BookParticipant{})
			if err := m.BookParticipants[len(m.BookParticipants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBookParticipantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBookParticipantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBookParticipantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantNumber", wireType)
			}
			m.ParticipantNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBookParticipantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBookParticipantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBookParticipantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookParticipant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BookParticipant.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBookExposuresRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBookExposuresRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBookExposuresRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBookExposuresResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBookExposuresResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBookExposuresResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookExposures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookExposures = append(m.BookExposures, BookOddsExposure{})
			if err := m.BookExposures[len(m.BookExposures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBookExposureRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBookExposureRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBookExposureRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OddsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OddsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBookExposureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBookExposureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBookExposureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookExposure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BookExposure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParticipantExposuresRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParticipantExposuresRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParticipantExposuresRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParticipantExposuresResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParticipantExposuresResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParticipantExposuresResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantExposures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipantExposures = append(m.ParticipantExposures, ParticipantExposure{})
			if err := m.ParticipantExposures[len(m.ParticipantExposures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParticipantExposureRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParticipantExposureRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParticipantExposureRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantNumber", wireType)
			}
			m.ParticipantNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParticipantExposureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParticipantExposureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParticipantExposureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantExposure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipantExposure = append(m.ParticipantExposure, ParticipantExposure{})
			if err := m.ParticipantExposure[len(m.ParticipantExposure)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHistoricalParticipantExposuresRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHistoricalParticipantExposuresRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHistoricalParticipantExposuresRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHistoricalParticipantExposuresResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHistoricalParticipantExposuresResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHistoricalParticipantExposuresResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantExposures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipantExposures = append(m.ParticipantExposures, ParticipantExposure{})
			if err := m.ParticipantExposures[len(m.ParticipantExposures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParticipantFullfilledBetsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParticipantFullfilledBetsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParticipantFullfilledBetsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantNumber", wireType)
			}
			m.ParticipantNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParticipantFullfilledBetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParticipantFullfilledBetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParticipantFullfilledBetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantBets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipantBets = append(m.ParticipantBets, ParticipantBetPairResponse{})
			if err := m.ParticipantBets[len(m.ParticipantBets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
