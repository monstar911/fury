// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sge/orderbook/orderbook.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OrderBookStatus is the enum type for the status of the orderbook.
type OrderBookStatus int32

const (
	// invalid
	OrderBookStatus_ORDER_BOOK_STATUS_UNSPECIFIED OrderBookStatus = 0
	// active
	OrderBookStatus_ORDER_BOOK_STATUS_STATUS_ACTIVE OrderBookStatus = 1
	// resolved not settled
	OrderBookStatus_ORDER_BOOK_STATUS_STATUS_RESOLVED OrderBookStatus = 2
	// resolved and settled
	OrderBookStatus_ORDER_BOOK_STATUS_STATUS_SETTLED OrderBookStatus = 3
)

var OrderBookStatus_name = map[int32]string{
	0: "ORDER_BOOK_STATUS_UNSPECIFIED",
	1: "ORDER_BOOK_STATUS_STATUS_ACTIVE",
	2: "ORDER_BOOK_STATUS_STATUS_RESOLVED",
	3: "ORDER_BOOK_STATUS_STATUS_SETTLED",
}

var OrderBookStatus_value = map[string]int32{
	"ORDER_BOOK_STATUS_UNSPECIFIED":     0,
	"ORDER_BOOK_STATUS_STATUS_ACTIVE":   1,
	"ORDER_BOOK_STATUS_STATUS_RESOLVED": 2,
	"ORDER_BOOK_STATUS_STATUS_SETTLED":  3,
}

func (x OrderBookStatus) String() string {
	return proto.EnumName(OrderBookStatus_name, int32(x))
}

func (OrderBookStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7247ccc164993ca5, []int{0}
}

// Params defines the parameters for the orderbook module.
type Params struct {
	// max_book_participants is the maximum number of participants per book.
	MaxBookParticipants uint64 `protobuf:"varint,1,opt,name=max_book_participants,json=maxBookParticipants,proto3" json:"max_book_participants,omitempty" yaml:"max_book_participants"`
	// batch_settlement_count is the batch settlement deposit counts.
	BatchSettlementCount uint64 `protobuf:"varint,2,opt,name=batch_settlement_count,json=batchSettlementCount,proto3" json:"batch_settlement_count,omitempty" yaml:"batch_settlement_count"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_7247ccc164993ca5, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMaxBookParticipants() uint64 {
	if m != nil {
		return m.MaxBookParticipants
	}
	return 0
}

func (m *Params) GetBatchSettlementCount() uint64 {
	if m != nil {
		return m.BatchSettlementCount
	}
	return 0
}

// OrderBookStats holds statistics of the order-book
type OrderBookStats struct {
	// resolved_unsettled is the list of book ids that needs to be settled.
	ResolvedUnsettled []string `protobuf:"bytes,1,rep,name=resolved_unsettled,json=resolvedUnsettled,proto3" json:"resolved_unsettled,omitempty"`
}

func (m *OrderBookStats) Reset()         { *m = OrderBookStats{} }
func (m *OrderBookStats) String() string { return proto.CompactTextString(m) }
func (*OrderBookStats) ProtoMessage()    {}
func (*OrderBookStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_7247ccc164993ca5, []int{1}
}
func (m *OrderBookStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderBookStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderBookStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderBookStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderBookStats.Merge(m, src)
}
func (m *OrderBookStats) XXX_Size() int {
	return m.Size()
}
func (m *OrderBookStats) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderBookStats.DiscardUnknown(m)
}

var xxx_messageInfo_OrderBookStats proto.InternalMessageInfo

func (m *OrderBookStats) GetResolvedUnsettled() []string {
	if m != nil {
		return m.ResolvedUnsettled
	}
	return nil
}

// OrderBook represents the order book maintained against a sport event.
type OrderBook struct {
	// id corresponding to the book
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	// number of participants in the order book
	Participants uint64 `protobuf:"varint,2,opt,name=participants,proto3" json:"participants,omitempty" yaml:"participants"`
	// order book status
	Status       OrderBookStatus `protobuf:"varint,3,opt,name=status,proto3,enum=sgenetwork.sge.orderbook.OrderBookStatus" json:"status,omitempty"`
	NumberOfOdds uint64          `protobuf:"varint,4,opt,name=number_of_odds,json=numberOfOdds,proto3" json:"number_of_odds,omitempty" yaml:"number_of_odds"`
}

func (m *OrderBook) Reset()      { *m = OrderBook{} }
func (*OrderBook) ProtoMessage() {}
func (*OrderBook) Descriptor() ([]byte, []int) {
	return fileDescriptor_7247ccc164993ca5, []int{2}
}
func (m *OrderBook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderBook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderBook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderBook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderBook.Merge(m, src)
}
func (m *OrderBook) XXX_Size() int {
	return m.Size()
}
func (m *OrderBook) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderBook.DiscardUnknown(m)
}

var xxx_messageInfo_OrderBook proto.InternalMessageInfo

// BookParticipant represents the participants of an order book.
type BookParticipant struct {
	// book id is id corresponding to the book
	BookID string `protobuf:"bytes,1,opt,name=book_id,proto3" json:"book_id"`
	// participant_address is the bech32-encoded address of the participant.
	ParticipantAddress string `protobuf:"bytes,2,opt,name=participant_address,json=participantAddress,proto3" json:"participant_address,omitempty" yaml:"participant_address"`
	// number in initial participation queue
	ParticipantNumber uint64 `protobuf:"varint,3,opt,name=participant_number,json=participantNumber,proto3" json:"participant_number,omitempty" yaml:"participant_number"`
	// if participant is a module account
	IsModuleAccount bool `protobuf:"varint,4,opt,name=is_module_account,json=isModuleAccount,proto3" json:"is_module_account,omitempty" yaml:"is_module_account"`
	// liquidity is the total initial liquidity provided
	Liquidity github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=liquidity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"liquidity" yaml:"liquidity"`
	// current round liquidity is the liquidity provided for current round
	CurrentRoundLiquidity github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=current_round_liquidity,json=currentRoundLiquidity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"current_round_liquidity" yaml:"current_round_liquidity"`
	ExposuresNotFilled    uint64                                 `protobuf:"varint,7,opt,name=exposures_not_filled,json=exposuresNotFilled,proto3" json:"exposures_not_filled,omitempty" yaml:"exposures_not_filled"`
	// total_bet_amount is the total bet amount corresponding to all exposure
	TotalBetAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,8,opt,name=total_bet_amount,json=totalBetAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_bet_amount" yaml:"total_bet_amount"`
	// current_round_total_bet_amount is the total bet amount corresponding to all exposure
	CurrentRoundTotalBetAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,9,opt,name=current_round_total_bet_amount,json=currentRoundTotalBetAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"current_round_total_bet_amount" yaml:"current_round_total_bet_amount"`
	// max_loss is the total bet amount corresponding to all exposure
	MaxLoss github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,10,opt,name=max_loss,json=maxLoss,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"max_loss" yaml:"max_loss"`
	// current_round_max_loss is the total bet amount corresponding to all exposure
	CurrentRoundMaxLoss github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,11,opt,name=current_round_max_loss,json=currentRoundMaxLoss,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"current_round_max_loss" yaml:"current_round_max_loss"`
	// current_round_max_loss_odds_id is the total bet amount corresponding to all exposure
	CurrentRoundMaxLossOddsID string `protobuf:"bytes,12,opt,name=current_round_max_loss_odds_id,proto3" json:"current_round_max_loss_odds_id" yaml:"current_round_max_loss_odds_id"`
	// actual_profit is the actual profit
	ActualProfit github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,13,opt,name=actual_profit,json=actualProfit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"actual_profit" yaml:"actual_profit"`
	// if participant is settled
	IsSettled bool `protobuf:"varint,14,opt,name=is_settled,json=isSettled,proto3" json:"is_settled,omitempty" yaml:"is_settled"`
}

func (m *BookParticipant) Reset()      { *m = BookParticipant{} }
func (*BookParticipant) ProtoMessage() {}
func (*BookParticipant) Descriptor() ([]byte, []int) {
	return fileDescriptor_7247ccc164993ca5, []int{3}
}
func (m *BookParticipant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BookParticipant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BookParticipant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BookParticipant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BookParticipant.Merge(m, src)
}
func (m *BookParticipant) XXX_Size() int {
	return m.Size()
}
func (m *BookParticipant) XXX_DiscardUnknown() {
	xxx_messageInfo_BookParticipant.DiscardUnknown(m)
}

var xxx_messageInfo_BookParticipant proto.InternalMessageInfo

// BookOddsExposure represents the exposures taken on odds
type BookOddsExposure struct {
	// book_id is id corresponding to the book
	BookID string `protobuf:"bytes,1,opt,name=book_id,proto3" json:"book_id"`
	// odds_id is odd'd uid
	OddsID            string   `protobuf:"bytes,2,opt,name=odds_id,proto3" json:"odds_id"`
	FullfillmentQueue []uint64 `protobuf:"varint,3,rep,packed,name=fullfillment_queue,json=fullfillmentQueue,proto3" json:"fullfillment_queue,omitempty" yaml:"fullfillment_queue"`
}

func (m *BookOddsExposure) Reset()      { *m = BookOddsExposure{} }
func (*BookOddsExposure) ProtoMessage() {}
func (*BookOddsExposure) Descriptor() ([]byte, []int) {
	return fileDescriptor_7247ccc164993ca5, []int{4}
}
func (m *BookOddsExposure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BookOddsExposure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BookOddsExposure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BookOddsExposure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BookOddsExposure.Merge(m, src)
}
func (m *BookOddsExposure) XXX_Size() int {
	return m.Size()
}
func (m *BookOddsExposure) XXX_DiscardUnknown() {
	xxx_messageInfo_BookOddsExposure.DiscardUnknown(m)
}

var xxx_messageInfo_BookOddsExposure proto.InternalMessageInfo

// ParticipantExposure represents the exposures taken on odds by participants
type ParticipantExposure struct {
	// book_id is id corresponding to the book
	BookID string `protobuf:"bytes,1,opt,name=book_id,proto3" json:"book_id"`
	// odds_id is odd's uid
	OddsID string `protobuf:"bytes,2,opt,name=odds_id,proto3" json:"odds_id"`
	// number in initial participation queue
	ParticipantNumber uint64 `protobuf:"varint,3,opt,name=participant_number,json=participantNumber,proto3" json:"participant_number,omitempty" yaml:"participant_number"`
	// exposure is the total exposure taken on given odd
	Exposure github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=exposure,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"exposure" yaml:"exposure"`
	// bet_amount is the total bet amount corresponding to the exposure
	BetAmount    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=bet_amount,json=betAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"bet_amount" yaml:"bet_amount"`
	IsFullfilled bool                                   `protobuf:"varint,6,opt,name=is_fullfilled,json=isFullfilled,proto3" json:"is_fullfilled,omitempty" yaml:"is_fullfilled"`
	// number of current round in queue
	Round uint64 `protobuf:"varint,7,opt,name=round,proto3" json:"round,omitempty" yaml:"rounds"`
}

func (m *ParticipantExposure) Reset()      { *m = ParticipantExposure{} }
func (*ParticipantExposure) ProtoMessage() {}
func (*ParticipantExposure) Descriptor() ([]byte, []int) {
	return fileDescriptor_7247ccc164993ca5, []int{5}
}
func (m *ParticipantExposure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParticipantExposure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParticipantExposure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParticipantExposure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParticipantExposure.Merge(m, src)
}
func (m *ParticipantExposure) XXX_Size() int {
	return m.Size()
}
func (m *ParticipantExposure) XXX_DiscardUnknown() {
	xxx_messageInfo_ParticipantExposure.DiscardUnknown(m)
}

var xxx_messageInfo_ParticipantExposure proto.InternalMessageInfo

// ParticipantBetPair represents the book participant and bet bond
type ParticipantBetPair struct {
	// book id is id corresponding to the book
	BookID string `protobuf:"bytes,1,opt,name=book_id,proto3" json:"book_id"`
	// number in initial participation queue
	ParticipantNumber uint64 `protobuf:"varint,2,opt,name=participant_number,json=participantNumber,proto3" json:"participant_number,omitempty" yaml:"participant_number"`
	// bet_uid is bet's uuid
	BetUID string `protobuf:"bytes,3,opt,name=bet_uid,proto3" json:"bet_uid"`
	// bet_id is bet's sequential id
	BetID uint64 `protobuf:"varint,4,opt,name=bet_id,proto3" json:"bet_id"`
}

func (m *ParticipantBetPair) Reset()         { *m = ParticipantBetPair{} }
func (m *ParticipantBetPair) String() string { return proto.CompactTextString(m) }
func (*ParticipantBetPair) ProtoMessage()    {}
func (*ParticipantBetPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_7247ccc164993ca5, []int{6}
}
func (m *ParticipantBetPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParticipantBetPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParticipantBetPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParticipantBetPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParticipantBetPair.Merge(m, src)
}
func (m *ParticipantBetPair) XXX_Size() int {
	return m.Size()
}
func (m *ParticipantBetPair) XXX_DiscardUnknown() {
	xxx_messageInfo_ParticipantBetPair.DiscardUnknown(m)
}

var xxx_messageInfo_ParticipantBetPair proto.InternalMessageInfo

func (m *ParticipantBetPair) GetBookID() string {
	if m != nil {
		return m.BookID
	}
	return ""
}

func (m *ParticipantBetPair) GetParticipantNumber() uint64 {
	if m != nil {
		return m.ParticipantNumber
	}
	return 0
}

func (m *ParticipantBetPair) GetBetUID() string {
	if m != nil {
		return m.BetUID
	}
	return ""
}

func (m *ParticipantBetPair) GetBetID() uint64 {
	if m != nil {
		return m.BetID
	}
	return 0
}

// ParticipantBetPairResponse represents the book participant and bet bond response
type ParticipantBetPairResponse struct {
	// book id is id corresponding to the book
	BookID string `protobuf:"bytes,1,opt,name=book_id,proto3" json:"book_id"`
	// number in initial participation queue
	ParticipantNumber uint64 `protobuf:"varint,2,opt,name=participant_number,json=participantNumber,proto3" json:"participant_number,omitempty" yaml:"participant_number"`
	// bet_uid is bet's uuid
	BetUID string `protobuf:"bytes,3,opt,name=bet_uid,proto3" json:"bet_uid"`
}

func (m *ParticipantBetPairResponse) Reset()         { *m = ParticipantBetPairResponse{} }
func (m *ParticipantBetPairResponse) String() string { return proto.CompactTextString(m) }
func (*ParticipantBetPairResponse) ProtoMessage()    {}
func (*ParticipantBetPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7247ccc164993ca5, []int{7}
}
func (m *ParticipantBetPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParticipantBetPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParticipantBetPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParticipantBetPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParticipantBetPairResponse.Merge(m, src)
}
func (m *ParticipantBetPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *ParticipantBetPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ParticipantBetPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ParticipantBetPairResponse proto.InternalMessageInfo

func (m *ParticipantBetPairResponse) GetBookID() string {
	if m != nil {
		return m.BookID
	}
	return ""
}

func (m *ParticipantBetPairResponse) GetParticipantNumber() uint64 {
	if m != nil {
		return m.ParticipantNumber
	}
	return 0
}

func (m *ParticipantBetPairResponse) GetBetUID() string {
	if m != nil {
		return m.BetUID
	}
	return ""
}

func init() {
	proto.RegisterEnum("sgenetwork.sge.orderbook.OrderBookStatus", OrderBookStatus_name, OrderBookStatus_value)
	proto.RegisterType((*Params)(nil), "sgenetwork.sge.orderbook.Params")
	proto.RegisterType((*OrderBookStats)(nil), "sgenetwork.sge.orderbook.OrderBookStats")
	proto.RegisterType((*OrderBook)(nil), "sgenetwork.sge.orderbook.OrderBook")
	proto.RegisterType((*BookParticipant)(nil), "sgenetwork.sge.orderbook.BookParticipant")
	proto.RegisterType((*BookOddsExposure)(nil), "sgenetwork.sge.orderbook.BookOddsExposure")
	proto.RegisterType((*ParticipantExposure)(nil), "sgenetwork.sge.orderbook.ParticipantExposure")
	proto.RegisterType((*ParticipantBetPair)(nil), "sgenetwork.sge.orderbook.ParticipantBetPair")
	proto.RegisterType((*ParticipantBetPairResponse)(nil), "sgenetwork.sge.orderbook.ParticipantBetPairResponse")
}

func init() { proto.RegisterFile("sge/orderbook/orderbook.proto", fileDescriptor_7247ccc164993ca5) }

var fileDescriptor_7247ccc164993ca5 = []byte{
	// 1237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xf7, 0xda, 0xad, 0x63, 0x4f, 0x9d, 0xc4, 0x1e, 0x27, 0xed, 0x36, 0xdf, 0xc6, 0xeb, 0xee,
	0x97, 0x42, 0xf9, 0x51, 0x5b, 0x02, 0x4e, 0x45, 0xa8, 0xf2, 0x26, 0x8e, 0xb0, 0x48, 0x6b, 0x77,
	0xec, 0xb4, 0x12, 0x02, 0x2d, 0x6b, 0xef, 0xc4, 0x59, 0xc5, 0xf6, 0xb8, 0x3b, 0xb3, 0x90, 0xdc,
	0x39, 0xf4, 0xc8, 0x11, 0x89, 0x4b, 0x4e, 0x9c, 0xf9, 0x17, 0x38, 0xd1, 0x03, 0x87, 0x1c, 0x11,
	0x87, 0x15, 0x72, 0x2e, 0x88, 0x1b, 0x3e, 0x71, 0x42, 0x68, 0x67, 0x76, 0xd7, 0xeb, 0x1f, 0x51,
	0x65, 0x40, 0x48, 0x9c, 0x76, 0xf6, 0xf3, 0xde, 0x7c, 0xde, 0xaf, 0x99, 0xf7, 0x76, 0xc1, 0x36,
	0xed, 0xe2, 0x32, 0xb1, 0x4d, 0x6c, 0xb7, 0x09, 0x39, 0x9e, 0xac, 0x4a, 0x43, 0x9b, 0x30, 0x02,
	0x65, 0xda, 0xc5, 0x03, 0xcc, 0x3e, 0x27, 0xf6, 0x71, 0x89, 0x76, 0x71, 0x29, 0x94, 0x6f, 0x6d,
	0x74, 0x49, 0x97, 0x70, 0xa5, 0xb2, 0xb7, 0x12, 0xfa, 0xea, 0x77, 0x12, 0x48, 0x36, 0x0c, 0xdb,
	0xe8, 0x53, 0xd8, 0x02, 0x9b, 0x7d, 0xe3, 0x44, 0xf7, 0x94, 0xf5, 0xa1, 0x61, 0x33, 0xab, 0x63,
	0x0d, 0x8d, 0x01, 0xa3, 0xb2, 0x54, 0x94, 0xee, 0x5e, 0xd1, 0x8a, 0x63, 0x57, 0xb9, 0x75, 0x6a,
	0xf4, 0x7b, 0xf7, 0xd5, 0x85, 0x6a, 0x2a, 0xca, 0xf7, 0x8d, 0x13, 0x8d, 0x90, 0xe3, 0x46, 0x04,
	0x85, 0x4f, 0xc1, 0xf5, 0xb6, 0xc1, 0x3a, 0x47, 0x3a, 0xc5, 0x8c, 0xf5, 0x70, 0x1f, 0x0f, 0x98,
	0xde, 0x21, 0xce, 0x80, 0xc9, 0x71, 0x4e, 0x7b, 0x7b, 0xec, 0x2a, 0xdb, 0x82, 0x76, 0xb1, 0x9e,
	0x8a, 0x36, 0xb8, 0xa0, 0x19, 0xe2, 0x3b, 0x1e, 0x7c, 0x3f, 0xf5, 0xd5, 0x99, 0x12, 0xfb, 0xe5,
	0x4c, 0x91, 0xd4, 0x07, 0x60, 0xad, 0xee, 0x85, 0xe9, 0xd9, 0x6e, 0x32, 0x83, 0x51, 0x78, 0x0f,
	0x40, 0x1b, 0x53, 0xd2, 0xfb, 0x0c, 0x9b, 0xba, 0x33, 0x10, 0x8c, 0xa6, 0x2c, 0x15, 0x13, 0x77,
	0xd3, 0x28, 0x17, 0x48, 0x0e, 0x02, 0x81, 0xfa, 0xbb, 0x04, 0xd2, 0x21, 0x03, 0xbc, 0x05, 0xe2,
	0x96, 0xc9, 0x83, 0x4e, 0x6b, 0x99, 0x91, 0xab, 0xc4, 0x6b, 0xbb, 0xbf, 0xba, 0x4a, 0xdc, 0x32,
	0x51, 0xdc, 0x32, 0xe1, 0x7b, 0x20, 0x33, 0x95, 0x1c, 0x11, 0xc5, 0x8d, 0xb1, 0xab, 0xe4, 0x45,
	0x14, 0xd3, 0x39, 0x99, 0x52, 0x86, 0x15, 0x90, 0xa4, 0xcc, 0x60, 0x0e, 0x95, 0x13, 0x45, 0xe9,
	0xee, 0xda, 0xdb, 0xaf, 0x97, 0x2e, 0x2b, 0x57, 0x69, 0x2a, 0x22, 0x87, 0x22, 0x7f, 0x23, 0x7c,
	0x00, 0xd6, 0x06, 0x4e, 0xbf, 0x8d, 0x6d, 0x9d, 0x1c, 0xea, 0xc4, 0x34, 0xa9, 0x7c, 0x85, 0x7b,
	0x70, 0x73, 0xec, 0x2a, 0x9b, 0xc2, 0x83, 0x69, 0xb9, 0x8a, 0x32, 0x02, 0xa8, 0x1f, 0xd6, 0x4d,
	0x93, 0xde, 0xcf, 0x3c, 0x3f, 0x53, 0x62, 0x7e, 0xee, 0x62, 0xea, 0xf7, 0xd7, 0xc0, 0xfa, 0x4c,
	0xcd, 0x60, 0x19, 0xac, 0xf0, 0xea, 0x86, 0x59, 0xd8, 0x1c, 0xb9, 0x4a, 0xd2, 0xd3, 0xe2, 0x99,
	0x08, 0x84, 0x28, 0x58, 0xc0, 0x3a, 0xc8, 0x47, 0xc2, 0xd4, 0x0d, 0xd3, 0xb4, 0x31, 0x15, 0xa9,
	0x49, 0x6b, 0x85, 0xb1, 0xab, 0x6c, 0xcd, 0xa5, 0x26, 0x50, 0x52, 0x11, 0x8c, 0xa0, 0x15, 0x01,
	0xc2, 0x7d, 0x10, 0x45, 0x75, 0xe1, 0x3f, 0xcf, 0xd9, 0x15, 0x6d, 0x7b, 0xec, 0x2a, 0x37, 0xe7,
	0xf9, 0x84, 0x8e, 0x8a, 0x72, 0x11, 0xf0, 0x11, 0xc7, 0xe0, 0x07, 0x20, 0x67, 0x51, 0xbd, 0x4f,
	0x4c, 0xa7, 0x87, 0x75, 0xa3, 0x23, 0x4e, 0x9f, 0x97, 0xb5, 0x94, 0x76, 0x6b, 0xec, 0x2a, 0xb2,
	0x20, 0x9b, 0x53, 0x51, 0xd1, 0xba, 0x45, 0x1f, 0x72, 0xa8, 0x22, 0x10, 0xf8, 0x29, 0x48, 0xf7,
	0xac, 0x67, 0x8e, 0x65, 0x5a, 0xec, 0x54, 0xbe, 0xca, 0xc3, 0xd3, 0x5e, 0xb8, 0x4a, 0xec, 0x27,
	0x57, 0x79, 0xb5, 0x6b, 0xb1, 0x23, 0xa7, 0x5d, 0xea, 0x90, 0x7e, 0xb9, 0x43, 0x68, 0x9f, 0x50,
	0xff, 0x71, 0x8f, 0x9a, 0xc7, 0x65, 0x76, 0x3a, 0xc4, 0xb4, 0x54, 0x1b, 0xb0, 0xb1, 0xab, 0x64,
	0x85, 0xbd, 0x90, 0x48, 0x45, 0x13, 0x52, 0xf8, 0x5c, 0x02, 0x37, 0x3a, 0x8e, 0x6d, 0x7b, 0xc7,
	0xdf, 0x26, 0xce, 0xc0, 0xd4, 0x27, 0x06, 0x93, 0xdc, 0x60, 0x63, 0x69, 0x83, 0x05, 0x61, 0xf0,
	0x12, 0x5a, 0x15, 0x6d, 0xfa, 0x12, 0xe4, 0x09, 0xf6, 0x43, 0x57, 0x1e, 0x83, 0x0d, 0x7c, 0x32,
	0x24, 0xd4, 0xb1, 0x31, 0xd5, 0x07, 0x84, 0xe9, 0x87, 0x56, 0xcf, 0xbb, 0x46, 0x2b, 0xbc, 0x0c,
	0xca, 0xd8, 0x55, 0xfe, 0x27, 0x88, 0x17, 0x69, 0xa9, 0x08, 0x86, 0xf0, 0x23, 0xc2, 0xf6, 0x38,
	0x08, 0x29, 0xc8, 0x32, 0xc2, 0x8c, 0x9e, 0xde, 0xc6, 0x4c, 0x37, 0xfa, 0xbc, 0x10, 0x29, 0x1e,
	0x55, 0x6d, 0xe9, 0xa8, 0x6e, 0x08, 0xe3, 0xb3, 0x7c, 0x2a, 0x5a, 0xe3, 0x90, 0x86, 0x59, 0x85,
	0x03, 0xf0, 0x6b, 0x09, 0x14, 0xa6, 0x63, 0x9f, 0xf3, 0x21, 0xcd, 0x7d, 0x78, 0xba, 0xb4, 0x0f,
	0x77, 0x16, 0x65, 0x76, 0xde, 0xa3, 0xad, 0x68, 0x82, 0x5b, 0xd3, 0xde, 0x7d, 0x0c, 0x52, 0x5e,
	0x3b, 0xed, 0x11, 0x4a, 0x65, 0xc0, 0xdd, 0xa8, 0x2c, 0xed, 0xc6, 0xfa, 0xa4, 0x2d, 0x7b, 0x3c,
	0x2a, 0x5a, 0xe9, 0x1b, 0x27, 0xfb, 0x84, 0x52, 0xf8, 0x85, 0x04, 0xae, 0x4f, 0x7b, 0x17, 0x1a,
	0xbb, 0xc6, 0x8d, 0xd5, 0x97, 0x36, 0xb6, 0xbd, 0x28, 0xe6, 0x89, 0xe9, 0x7c, 0x34, 0xd6, 0x87,
	0xbe, 0x1b, 0xdf, 0xce, 0x95, 0x20, 0xd8, 0xc0, 0x5b, 0x94, 0xd7, 0x69, 0x32, 0xdc, 0x9d, 0xa3,
	0x91, 0xab, 0xdc, 0xdc, 0x99, 0x67, 0xf0, 0x3a, 0x17, 0x6f, 0x3e, 0x2f, 0xa1, 0xb9, 0xac, 0x26,
	0xb3, 0x7a, 0x2a, 0x7a, 0x09, 0x11, 0x3c, 0x06, 0xab, 0x46, 0x87, 0x39, 0x46, 0x4f, 0x1f, 0xda,
	0xe4, 0xd0, 0x62, 0xf2, 0x2a, 0x77, 0x70, 0x6f, 0xe9, 0x7c, 0x6d, 0x08, 0x7f, 0xa6, 0xc8, 0x54,
	0x94, 0x11, 0xef, 0x0d, 0xfe, 0x0a, 0xdf, 0x05, 0xc0, 0xa2, 0x7a, 0x30, 0xa7, 0xd6, 0x78, 0x6b,
	0xda, 0x1c, 0xbb, 0x4a, 0x2e, 0x6c, 0x4d, 0xc1, 0xa8, 0x42, 0x69, 0x8b, 0x8a, 0x49, 0x68, 0xce,
	0x74, 0xf2, 0x73, 0x09, 0x64, 0xbd, 0x1e, 0xed, 0xa5, 0xaa, 0xea, 0x5f, 0xbd, 0xe5, 0x5b, 0x79,
	0x19, 0xac, 0x04, 0x15, 0x89, 0x4f, 0x36, 0x84, 0xe9, 0x0f, 0x84, 0x28, 0x58, 0x78, 0xad, 0xfa,
	0xd0, 0xe9, 0xf5, 0xbc, 0x5b, 0xcf, 0x67, 0xf6, 0x33, 0x07, 0x3b, 0x58, 0x4e, 0x14, 0x13, 0xd3,
	0xad, 0x7a, 0x5e, 0x47, 0x45, 0xb9, 0x28, 0xf8, 0xd8, 0xc3, 0x66, 0x42, 0xfa, 0x23, 0x01, 0xf2,
	0x91, 0xc1, 0xf4, 0xef, 0x46, 0xf5, 0x0f, 0x0e, 0xa0, 0x4f, 0x40, 0x2a, 0x68, 0x86, 0x7c, 0xee,
	0xfc, 0x8d, 0x3b, 0x1e, 0xf0, 0xa8, 0x28, 0xa4, 0x84, 0x6d, 0x00, 0x22, 0xbd, 0x4c, 0x8c, 0xa5,
	0x9d, 0xa5, 0x0d, 0xf8, 0x67, 0x2d, 0xda, 0xb7, 0xd2, 0xed, 0xb0, 0x4d, 0xbd, 0x0f, 0x56, 0x2d,
	0xaa, 0x07, 0x05, 0xc3, 0x26, 0x1f, 0x46, 0x29, 0x4d, 0x9e, 0x1c, 0xf0, 0x29, 0xb1, 0x8a, 0x32,
	0x16, 0xdd, 0x0b, 0x5f, 0xe1, 0x6b, 0xe0, 0x2a, 0xbf, 0x67, 0xfe, 0xf0, 0xc8, 0x8d, 0x5d, 0x65,
	0x55, 0x6c, 0xe3, 0x30, 0x55, 0x91, 0x90, 0xcf, 0x1c, 0x80, 0xdf, 0x24, 0x00, 0x23, 0x07, 0x40,
	0xc3, 0xac, 0x61, 0x58, 0xf6, 0xf2, 0xf5, 0x5f, 0x5c, 0xce, 0xf8, 0x5f, 0x2c, 0xa7, 0x67, 0x1e,
	0x33, 0xdd, 0xb1, 0x4c, 0x7e, 0x22, 0x02, 0xf3, 0x98, 0x1d, 0xf8, 0xe6, 0x85, 0x10, 0x05, 0x0b,
	0xf8, 0x26, 0x48, 0x7a, 0x4b, 0xcb, 0xf4, 0xbf, 0xd5, 0xf2, 0x23, 0x57, 0xb9, 0xaa, 0x61, 0xc6,
	0xd5, 0x7d, 0x11, 0xf2, 0x9f, 0xea, 0x0f, 0x12, 0xd8, 0x9a, 0x8f, 0x19, 0x61, 0x3a, 0x24, 0x03,
	0x8a, 0xff, 0x6b, 0xb1, 0xbf, 0xf1, 0x8d, 0x04, 0xd6, 0x67, 0xbe, 0x65, 0xe1, 0x6d, 0xb0, 0x5d,
	0x47, 0xbb, 0x55, 0xa4, 0x6b, 0xf5, 0xfa, 0x87, 0x7a, 0xb3, 0x55, 0x69, 0x1d, 0x34, 0xf5, 0x83,
	0x47, 0xcd, 0x46, 0x75, 0xa7, 0xb6, 0x57, 0xab, 0xee, 0x66, 0x63, 0xf0, 0xff, 0x40, 0x99, 0x57,
	0xf1, 0x1f, 0x95, 0x9d, 0x56, 0xed, 0x49, 0x35, 0x2b, 0xc1, 0x3b, 0xe0, 0xf6, 0xa5, 0x4a, 0xa8,
	0xda, 0xac, 0xef, 0x3f, 0xa9, 0xee, 0x66, 0xe3, 0xf0, 0x15, 0x50, 0xbc, 0x54, 0xad, 0x59, 0x6d,
	0xb5, 0xf6, 0xab, 0xbb, 0xd9, 0x84, 0xb6, 0xf7, 0x62, 0x54, 0x90, 0xce, 0x47, 0x05, 0xe9, 0xe7,
	0x51, 0x41, 0xfa, 0xf2, 0xa2, 0x10, 0x3b, 0xbf, 0x28, 0xc4, 0x7e, 0xbc, 0x28, 0xc4, 0x3e, 0x7a,
	0x2b, 0x72, 0x87, 0x68, 0x17, 0xdf, 0xf3, 0x3f, 0xd8, 0xbd, 0x75, 0xf9, 0x24, 0xf2, 0x2f, 0xc6,
	0x6f, 0x53, 0x3b, 0xc9, 0x7f, 0xac, 0xde, 0xf9, 0x33, 0x00, 0x00, 0xff, 0xff, 0xad, 0xfb, 0xa8,
	0xbd, 0xa9, 0x0d, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxBookParticipants != that1.MaxBookParticipants {
		return false
	}
	if this.BatchSettlementCount != that1.BatchSettlementCount {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BatchSettlementCount != 0 {
		i = encodeVarintOrderbook(dAtA, i, uint64(m.BatchSettlementCount))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxBookParticipants != 0 {
		i = encodeVarintOrderbook(dAtA, i, uint64(m.MaxBookParticipants))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OrderBookStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderBookStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderBookStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ResolvedUnsettled) > 0 {
		for iNdEx := len(m.ResolvedUnsettled) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ResolvedUnsettled[iNdEx])
			copy(dAtA[i:], m.ResolvedUnsettled[iNdEx])
			i = encodeVarintOrderbook(dAtA, i, uint64(len(m.ResolvedUnsettled[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OrderBook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderBook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderBook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumberOfOdds != 0 {
		i = encodeVarintOrderbook(dAtA, i, uint64(m.NumberOfOdds))
		i--
		dAtA[i] = 0x20
	}
	if m.Status != 0 {
		i = encodeVarintOrderbook(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.Participants != 0 {
		i = encodeVarintOrderbook(dAtA, i, uint64(m.Participants))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintOrderbook(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BookParticipant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BookParticipant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BookParticipant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsSettled {
		i--
		if m.IsSettled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	{
		size := m.ActualProfit.Size()
		i -= size
		if _, err := m.ActualProfit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrderbook(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	if len(m.CurrentRoundMaxLossOddsID) > 0 {
		i -= len(m.CurrentRoundMaxLossOddsID)
		copy(dAtA[i:], m.CurrentRoundMaxLossOddsID)
		i = encodeVarintOrderbook(dAtA, i, uint64(len(m.CurrentRoundMaxLossOddsID)))
		i--
		dAtA[i] = 0x62
	}
	{
		size := m.CurrentRoundMaxLoss.Size()
		i -= size
		if _, err := m.CurrentRoundMaxLoss.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrderbook(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.MaxLoss.Size()
		i -= size
		if _, err := m.MaxLoss.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrderbook(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.CurrentRoundTotalBetAmount.Size()
		i -= size
		if _, err := m.CurrentRoundTotalBetAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrderbook(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.TotalBetAmount.Size()
		i -= size
		if _, err := m.TotalBetAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrderbook(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.ExposuresNotFilled != 0 {
		i = encodeVarintOrderbook(dAtA, i, uint64(m.ExposuresNotFilled))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.CurrentRoundLiquidity.Size()
		i -= size
		if _, err := m.CurrentRoundLiquidity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrderbook(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.Liquidity.Size()
		i -= size
		if _, err := m.Liquidity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrderbook(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.IsModuleAccount {
		i--
		if m.IsModuleAccount {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.ParticipantNumber != 0 {
		i = encodeVarintOrderbook(dAtA, i, uint64(m.ParticipantNumber))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ParticipantAddress) > 0 {
		i -= len(m.ParticipantAddress)
		copy(dAtA[i:], m.ParticipantAddress)
		i = encodeVarintOrderbook(dAtA, i, uint64(len(m.ParticipantAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BookID) > 0 {
		i -= len(m.BookID)
		copy(dAtA[i:], m.BookID)
		i = encodeVarintOrderbook(dAtA, i, uint64(len(m.BookID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BookOddsExposure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BookOddsExposure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BookOddsExposure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FullfillmentQueue) > 0 {
		dAtA2 := make([]byte, len(m.FullfillmentQueue)*10)
		var j1 int
		for _, num := range m.FullfillmentQueue {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintOrderbook(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OddsID) > 0 {
		i -= len(m.OddsID)
		copy(dAtA[i:], m.OddsID)
		i = encodeVarintOrderbook(dAtA, i, uint64(len(m.OddsID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BookID) > 0 {
		i -= len(m.BookID)
		copy(dAtA[i:], m.BookID)
		i = encodeVarintOrderbook(dAtA, i, uint64(len(m.BookID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ParticipantExposure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParticipantExposure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParticipantExposure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Round != 0 {
		i = encodeVarintOrderbook(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x38
	}
	if m.IsFullfilled {
		i--
		if m.IsFullfilled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.BetAmount.Size()
		i -= size
		if _, err := m.BetAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrderbook(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Exposure.Size()
		i -= size
		if _, err := m.Exposure.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrderbook(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.ParticipantNumber != 0 {
		i = encodeVarintOrderbook(dAtA, i, uint64(m.ParticipantNumber))
		i--
		dAtA[i] = 0x18
	}
	if len(m.OddsID) > 0 {
		i -= len(m.OddsID)
		copy(dAtA[i:], m.OddsID)
		i = encodeVarintOrderbook(dAtA, i, uint64(len(m.OddsID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BookID) > 0 {
		i -= len(m.BookID)
		copy(dAtA[i:], m.BookID)
		i = encodeVarintOrderbook(dAtA, i, uint64(len(m.BookID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ParticipantBetPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParticipantBetPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParticipantBetPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BetID != 0 {
		i = encodeVarintOrderbook(dAtA, i, uint64(m.BetID))
		i--
		dAtA[i] = 0x20
	}
	if len(m.BetUID) > 0 {
		i -= len(m.BetUID)
		copy(dAtA[i:], m.BetUID)
		i = encodeVarintOrderbook(dAtA, i, uint64(len(m.BetUID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ParticipantNumber != 0 {
		i = encodeVarintOrderbook(dAtA, i, uint64(m.ParticipantNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BookID) > 0 {
		i -= len(m.BookID)
		copy(dAtA[i:], m.BookID)
		i = encodeVarintOrderbook(dAtA, i, uint64(len(m.BookID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ParticipantBetPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParticipantBetPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParticipantBetPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BetUID) > 0 {
		i -= len(m.BetUID)
		copy(dAtA[i:], m.BetUID)
		i = encodeVarintOrderbook(dAtA, i, uint64(len(m.BetUID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ParticipantNumber != 0 {
		i = encodeVarintOrderbook(dAtA, i, uint64(m.ParticipantNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BookID) > 0 {
		i -= len(m.BookID)
		copy(dAtA[i:], m.BookID)
		i = encodeVarintOrderbook(dAtA, i, uint64(len(m.BookID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOrderbook(dAtA []byte, offset int, v uint64) int {
	offset -= sovOrderbook(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxBookParticipants != 0 {
		n += 1 + sovOrderbook(uint64(m.MaxBookParticipants))
	}
	if m.BatchSettlementCount != 0 {
		n += 1 + sovOrderbook(uint64(m.BatchSettlementCount))
	}
	return n
}

func (m *OrderBookStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ResolvedUnsettled) > 0 {
		for _, s := range m.ResolvedUnsettled {
			l = len(s)
			n += 1 + l + sovOrderbook(uint64(l))
		}
	}
	return n
}

func (m *OrderBook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovOrderbook(uint64(l))
	}
	if m.Participants != 0 {
		n += 1 + sovOrderbook(uint64(m.Participants))
	}
	if m.Status != 0 {
		n += 1 + sovOrderbook(uint64(m.Status))
	}
	if m.NumberOfOdds != 0 {
		n += 1 + sovOrderbook(uint64(m.NumberOfOdds))
	}
	return n
}

func (m *BookParticipant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BookID)
	if l > 0 {
		n += 1 + l + sovOrderbook(uint64(l))
	}
	l = len(m.ParticipantAddress)
	if l > 0 {
		n += 1 + l + sovOrderbook(uint64(l))
	}
	if m.ParticipantNumber != 0 {
		n += 1 + sovOrderbook(uint64(m.ParticipantNumber))
	}
	if m.IsModuleAccount {
		n += 2
	}
	l = m.Liquidity.Size()
	n += 1 + l + sovOrderbook(uint64(l))
	l = m.CurrentRoundLiquidity.Size()
	n += 1 + l + sovOrderbook(uint64(l))
	if m.ExposuresNotFilled != 0 {
		n += 1 + sovOrderbook(uint64(m.ExposuresNotFilled))
	}
	l = m.TotalBetAmount.Size()
	n += 1 + l + sovOrderbook(uint64(l))
	l = m.CurrentRoundTotalBetAmount.Size()
	n += 1 + l + sovOrderbook(uint64(l))
	l = m.MaxLoss.Size()
	n += 1 + l + sovOrderbook(uint64(l))
	l = m.CurrentRoundMaxLoss.Size()
	n += 1 + l + sovOrderbook(uint64(l))
	l = len(m.CurrentRoundMaxLossOddsID)
	if l > 0 {
		n += 1 + l + sovOrderbook(uint64(l))
	}
	l = m.ActualProfit.Size()
	n += 1 + l + sovOrderbook(uint64(l))
	if m.IsSettled {
		n += 2
	}
	return n
}

func (m *BookOddsExposure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BookID)
	if l > 0 {
		n += 1 + l + sovOrderbook(uint64(l))
	}
	l = len(m.OddsID)
	if l > 0 {
		n += 1 + l + sovOrderbook(uint64(l))
	}
	if len(m.FullfillmentQueue) > 0 {
		l = 0
		for _, e := range m.FullfillmentQueue {
			l += sovOrderbook(uint64(e))
		}
		n += 1 + sovOrderbook(uint64(l)) + l
	}
	return n
}

func (m *ParticipantExposure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BookID)
	if l > 0 {
		n += 1 + l + sovOrderbook(uint64(l))
	}
	l = len(m.OddsID)
	if l > 0 {
		n += 1 + l + sovOrderbook(uint64(l))
	}
	if m.ParticipantNumber != 0 {
		n += 1 + sovOrderbook(uint64(m.ParticipantNumber))
	}
	l = m.Exposure.Size()
	n += 1 + l + sovOrderbook(uint64(l))
	l = m.BetAmount.Size()
	n += 1 + l + sovOrderbook(uint64(l))
	if m.IsFullfilled {
		n += 2
	}
	if m.Round != 0 {
		n += 1 + sovOrderbook(uint64(m.Round))
	}
	return n
}

func (m *ParticipantBetPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BookID)
	if l > 0 {
		n += 1 + l + sovOrderbook(uint64(l))
	}
	if m.ParticipantNumber != 0 {
		n += 1 + sovOrderbook(uint64(m.ParticipantNumber))
	}
	l = len(m.BetUID)
	if l > 0 {
		n += 1 + l + sovOrderbook(uint64(l))
	}
	if m.BetID != 0 {
		n += 1 + sovOrderbook(uint64(m.BetID))
	}
	return n
}

func (m *ParticipantBetPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BookID)
	if l > 0 {
		n += 1 + l + sovOrderbook(uint64(l))
	}
	if m.ParticipantNumber != 0 {
		n += 1 + sovOrderbook(uint64(m.ParticipantNumber))
	}
	l = len(m.BetUID)
	if l > 0 {
		n += 1 + l + sovOrderbook(uint64(l))
	}
	return n
}

func sovOrderbook(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOrderbook(x uint64) (n int) {
	return sovOrderbook(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBookParticipants", wireType)
			}
			m.MaxBookParticipants = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxBookParticipants |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchSettlementCount", wireType)
			}
			m.BatchSettlementCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchSettlementCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrderbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrderbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderBookStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderBookStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderBookStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolvedUnsettled", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResolvedUnsettled = append(m.ResolvedUnsettled, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrderbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrderbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderBook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderBook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderBook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			m.Participants = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Participants |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= OrderBookStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfOdds", wireType)
			}
			m.NumberOfOdds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfOdds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrderbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrderbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BookParticipant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BookParticipant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BookParticipant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipantAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantNumber", wireType)
			}
			m.ParticipantNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsModuleAccount", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsModuleAccount = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Liquidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRoundLiquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentRoundLiquidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExposuresNotFilled", wireType)
			}
			m.ExposuresNotFilled = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExposuresNotFilled |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBetAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalBetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRoundTotalBetAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentRoundTotalBetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLoss", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxLoss.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRoundMaxLoss", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentRoundMaxLoss.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRoundMaxLossOddsID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentRoundMaxLossOddsID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualProfit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActualProfit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSettled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSettled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOrderbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrderbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BookOddsExposure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BookOddsExposure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BookOddsExposure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OddsID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OddsID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOrderbook
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FullfillmentQueue = append(m.FullfillmentQueue, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOrderbook
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthOrderbook
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthOrderbook
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.FullfillmentQueue) == 0 {
					m.FullfillmentQueue = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOrderbook
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FullfillmentQueue = append(m.FullfillmentQueue, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FullfillmentQueue", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrderbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrderbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParticipantExposure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParticipantExposure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParticipantExposure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OddsID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OddsID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantNumber", wireType)
			}
			m.ParticipantNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exposure", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Exposure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFullfilled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFullfilled = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrderbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrderbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParticipantBetPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParticipantBetPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParticipantBetPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantNumber", wireType)
			}
			m.ParticipantNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BetUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetID", wireType)
			}
			m.BetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BetID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrderbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrderbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParticipantBetPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrderbook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParticipantBetPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParticipantBetPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantNumber", wireType)
			}
			m.ParticipantNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrderbook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrderbook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BetUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrderbook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrderbook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrderbook(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrderbook
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrderbook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOrderbook
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOrderbook
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOrderbook
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOrderbook        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrderbook          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOrderbook = fmt.Errorf("proto: unexpected end of group")
)
