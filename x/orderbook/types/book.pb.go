// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sge/orderbook/book.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OrderBookStatus is the enum type for the status of the orderbook.
type OrderBookStatus int32

const (
	// invalid
	OrderBookStatus_ORDER_BOOK_STATUS_UNSPECIFIED OrderBookStatus = 0
	// active
	OrderBookStatus_ORDER_BOOK_STATUS_STATUS_ACTIVE OrderBookStatus = 1
	// resolved not settled
	OrderBookStatus_ORDER_BOOK_STATUS_STATUS_RESOLVED OrderBookStatus = 2
	// resolved and settled
	OrderBookStatus_ORDER_BOOK_STATUS_STATUS_SETTLED OrderBookStatus = 3
)

var OrderBookStatus_name = map[int32]string{
	0: "ORDER_BOOK_STATUS_UNSPECIFIED",
	1: "ORDER_BOOK_STATUS_STATUS_ACTIVE",
	2: "ORDER_BOOK_STATUS_STATUS_RESOLVED",
	3: "ORDER_BOOK_STATUS_STATUS_SETTLED",
}

var OrderBookStatus_value = map[string]int32{
	"ORDER_BOOK_STATUS_UNSPECIFIED":     0,
	"ORDER_BOOK_STATUS_STATUS_ACTIVE":   1,
	"ORDER_BOOK_STATUS_STATUS_RESOLVED": 2,
	"ORDER_BOOK_STATUS_STATUS_SETTLED":  3,
}

func (x OrderBookStatus) String() string {
	return proto.EnumName(OrderBookStatus_name, int32(x))
}

func (OrderBookStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3eb9397612f99f5e, []int{0}
}

// OrderBook represents the order book maintained against a sport event.
type OrderBook struct {
	// id corresponding to the book
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	// participation_count is the count of participations in the order book
	ParticipationCount uint64 `protobuf:"varint,2,opt,name=participation_count,json=participationCount,proto3" json:"participation_count,omitempty" yaml:"participation_count"`
	// odds_count is the count of the odds in the order book
	OddsCount uint64 `protobuf:"varint,3,opt,name=odds_count,json=oddsCount,proto3" json:"odds_count,omitempty" yaml:"odds_count"`
	// order book status
	Status OrderBookStatus `protobuf:"varint,4,opt,name=status,proto3,enum=sgenetwork.sge.orderbook.OrderBookStatus" json:"status,omitempty"`
}

func (m *OrderBook) Reset()      { *m = OrderBook{} }
func (*OrderBook) ProtoMessage() {}
func (*OrderBook) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eb9397612f99f5e, []int{0}
}
func (m *OrderBook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderBook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderBook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderBook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderBook.Merge(m, src)
}
func (m *OrderBook) XXX_Size() int {
	return m.Size()
}
func (m *OrderBook) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderBook.DiscardUnknown(m)
}

var xxx_messageInfo_OrderBook proto.InternalMessageInfo

// BookOddsExposure represents the exposures taken on odds
type BookOddsExposure struct {
	// book_id is id corresponding to the book
	BookID string `protobuf:"bytes,1,opt,name=book_id,proto3" json:"book_id"`
	// odds_id is odd'd uid
	OddsID           string   `protobuf:"bytes,2,opt,name=odds_id,proto3" json:"odds_id"`
	FulfillmentQueue []uint64 `protobuf:"varint,3,rep,packed,name=fulfillment_queue,json=fulfillmentQueue,proto3" json:"fulfillment_queue,omitempty" yaml:"fulfillment_queue"`
}

func (m *BookOddsExposure) Reset()      { *m = BookOddsExposure{} }
func (*BookOddsExposure) ProtoMessage() {}
func (*BookOddsExposure) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eb9397612f99f5e, []int{1}
}
func (m *BookOddsExposure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BookOddsExposure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BookOddsExposure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BookOddsExposure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BookOddsExposure.Merge(m, src)
}
func (m *BookOddsExposure) XXX_Size() int {
	return m.Size()
}
func (m *BookOddsExposure) XXX_DiscardUnknown() {
	xxx_messageInfo_BookOddsExposure.DiscardUnknown(m)
}

var xxx_messageInfo_BookOddsExposure proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("sgenetwork.sge.orderbook.OrderBookStatus", OrderBookStatus_name, OrderBookStatus_value)
	proto.RegisterType((*OrderBook)(nil), "sgenetwork.sge.orderbook.OrderBook")
	proto.RegisterType((*BookOddsExposure)(nil), "sgenetwork.sge.orderbook.BookOddsExposure")
}

func init() { proto.RegisterFile("sge/orderbook/book.proto", fileDescriptor_3eb9397612f99f5e) }

var fileDescriptor_3eb9397612f99f5e = []byte{
	// 497 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x3f, 0x6f, 0xd3, 0x40,
	0x18, 0xc6, 0x7d, 0x4e, 0x14, 0x94, 0x53, 0x05, 0xee, 0x41, 0x25, 0xab, 0x2a, 0xbe, 0xd4, 0x80,
	0x14, 0x10, 0xd8, 0x12, 0x30, 0x75, 0x8b, 0x13, 0x57, 0x8a, 0xa8, 0x30, 0x9c, 0xd3, 0x0e, 0x2c,
	0x56, 0x12, 0x5f, 0x8d, 0x95, 0x3f, 0x17, 0xec, 0xb3, 0x68, 0x47, 0x36, 0x46, 0x46, 0xc6, 0x4c,
	0x7c, 0x16, 0x16, 0xa4, 0x8e, 0x4c, 0x16, 0x72, 0x16, 0xc4, 0x98, 0x4f, 0x80, 0xce, 0x76, 0x42,
	0x4b, 0x9b, 0xc5, 0x7e, 0xfd, 0xbe, 0xbf, 0xe7, 0x91, 0xdf, 0xe7, 0x0e, 0xaa, 0x71, 0x40, 0x4d,
	0x16, 0xf9, 0x34, 0x1a, 0x30, 0x36, 0x32, 0xc5, 0xc3, 0x98, 0x45, 0x8c, 0x33, 0x24, 0x26, 0x53,
	0xca, 0x3f, 0xb2, 0x68, 0x64, 0xc4, 0x01, 0x35, 0xd6, 0xd0, 0xee, 0xbd, 0x80, 0x05, 0x2c, 0x87,
	0x4c, 0x51, 0x15, 0xbc, 0xfe, 0x49, 0x86, 0x75, 0x47, 0x30, 0x16, 0x63, 0x23, 0xb4, 0x07, 0xe5,
	0xd0, 0x57, 0x41, 0x03, 0x34, 0xeb, 0xd6, 0x56, 0x96, 0x62, 0xb9, 0xdb, 0xf9, 0x93, 0x62, 0x39,
	0xf4, 0x89, 0x1c, 0xfa, 0xc8, 0x81, 0x77, 0x67, 0xfd, 0x88, 0x87, 0xc3, 0x70, 0xd6, 0xe7, 0x21,
	0x9b, 0x7a, 0x43, 0x96, 0x4c, 0xb9, 0x2a, 0x37, 0x40, 0xb3, 0x6a, 0x69, 0xcb, 0x14, 0xef, 0x9e,
	0xf7, 0x27, 0xe3, 0x03, 0xfd, 0x06, 0x48, 0x27, 0xe8, 0x4a, 0xb7, 0x2d, 0x9a, 0xe8, 0x25, 0x84,
	0xcc, 0xf7, 0xe3, 0xd2, 0xa7, 0x92, 0xfb, 0xec, 0x2c, 0x53, 0xbc, 0x5d, 0xf8, 0xfc, 0x9b, 0xe9,
	0xa4, 0x2e, 0x3e, 0x0a, 0x55, 0x0b, 0xd6, 0x62, 0xde, 0xe7, 0x49, 0xac, 0x56, 0x1b, 0xa0, 0x79,
	0xfb, 0xf9, 0x63, 0x63, 0xd3, 0xce, 0xc6, 0x7a, 0x33, 0x37, 0x17, 0x90, 0x52, 0x78, 0xb0, 0xf5,
	0x79, 0x8e, 0xa5, 0xaf, 0x73, 0x2c, 0xfd, 0x9e, 0x63, 0x49, 0xff, 0x01, 0xa0, 0x22, 0x20, 0xc7,
	0xf7, 0x63, 0xfb, 0x6c, 0xc6, 0xe2, 0x24, 0xa2, 0xc8, 0x84, 0xb7, 0x84, 0x85, 0xb7, 0xce, 0x63,
	0x27, 0x4b, 0x71, 0x4d, 0x60, 0x79, 0x26, 0xab, 0x21, 0x59, 0x15, 0x42, 0x90, 0xff, 0x70, 0xe8,
	0xe7, 0x89, 0x94, 0x02, 0xe1, 0x59, 0x08, 0xca, 0x21, 0x59, 0x15, 0xa8, 0x0b, 0xb7, 0x4f, 0x93,
	0xf1, 0x69, 0x38, 0x1e, 0x4f, 0xe8, 0x94, 0x7b, 0x1f, 0x12, 0x9a, 0x50, 0xb5, 0xd2, 0xa8, 0x34,
	0xab, 0xd6, 0xde, 0x32, 0xc5, 0x6a, 0x11, 0xc2, 0x35, 0x44, 0x27, 0xca, 0xa5, 0xde, 0x5b, 0xd1,
	0xba, 0xba, 0xcf, 0x93, 0x6f, 0x00, 0xde, 0xf9, 0x6f, 0x73, 0xb4, 0x0f, 0xef, 0x3b, 0xa4, 0x63,
	0x13, 0xcf, 0x72, 0x9c, 0x57, 0x9e, 0xdb, 0x6b, 0xf5, 0x8e, 0x5d, 0xef, 0xf8, 0xb5, 0xfb, 0xc6,
	0x6e, 0x77, 0x0f, 0xbb, 0x76, 0x47, 0x91, 0xd0, 0x03, 0x88, 0xaf, 0x23, 0xe5, 0xab, 0xd5, 0xee,
	0x75, 0x4f, 0x6c, 0x05, 0xa0, 0x47, 0x70, 0x7f, 0x23, 0x44, 0x6c, 0xd7, 0x39, 0x3a, 0xb1, 0x3b,
	0x8a, 0x8c, 0x1e, 0xc2, 0xc6, 0x46, 0xcc, 0xb5, 0x7b, 0xbd, 0x23, 0xbb, 0xa3, 0x54, 0xac, 0xc3,
	0xef, 0x99, 0x06, 0x2e, 0x32, 0x0d, 0xfc, 0xca, 0x34, 0xf0, 0x65, 0xa1, 0x49, 0x17, 0x0b, 0x4d,
	0xfa, 0xb9, 0xd0, 0xa4, 0x77, 0x4f, 0x83, 0x90, 0xbf, 0x4f, 0x06, 0xc6, 0x90, 0x4d, 0xcc, 0x38,
	0xa0, 0xcf, 0xca, 0xe3, 0x15, 0xb5, 0x79, 0x76, 0xe9, 0xe6, 0xf3, 0xf3, 0x19, 0x8d, 0x07, 0xb5,
	0xfc, 0x2e, 0xbf, 0xf8, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xbc, 0x51, 0x8b, 0xc9, 0x17, 0x03, 0x00,
	0x00,
}

func (m *OrderBook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderBook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderBook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintBook(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.OddsCount != 0 {
		i = encodeVarintBook(dAtA, i, uint64(m.OddsCount))
		i--
		dAtA[i] = 0x18
	}
	if m.ParticipationCount != 0 {
		i = encodeVarintBook(dAtA, i, uint64(m.ParticipationCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintBook(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BookOddsExposure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BookOddsExposure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BookOddsExposure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FulfillmentQueue) > 0 {
		dAtA2 := make([]byte, len(m.FulfillmentQueue)*10)
		var j1 int
		for _, num := range m.FulfillmentQueue {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintBook(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OddsID) > 0 {
		i -= len(m.OddsID)
		copy(dAtA[i:], m.OddsID)
		i = encodeVarintBook(dAtA, i, uint64(len(m.OddsID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BookID) > 0 {
		i -= len(m.BookID)
		copy(dAtA[i:], m.BookID)
		i = encodeVarintBook(dAtA, i, uint64(len(m.BookID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBook(dAtA []byte, offset int, v uint64) int {
	offset -= sovBook(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OrderBook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	if m.ParticipationCount != 0 {
		n += 1 + sovBook(uint64(m.ParticipationCount))
	}
	if m.OddsCount != 0 {
		n += 1 + sovBook(uint64(m.OddsCount))
	}
	if m.Status != 0 {
		n += 1 + sovBook(uint64(m.Status))
	}
	return n
}

func (m *BookOddsExposure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BookID)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	l = len(m.OddsID)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	if len(m.FulfillmentQueue) > 0 {
		l = 0
		for _, e := range m.FulfillmentQueue {
			l += sovBook(uint64(e))
		}
		n += 1 + sovBook(uint64(l)) + l
	}
	return n
}

func sovBook(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBook(x uint64) (n int) {
	return sovBook(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OrderBook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderBook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderBook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipationCount", wireType)
			}
			m.ParticipationCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipationCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OddsCount", wireType)
			}
			m.OddsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OddsCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= OrderBookStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BookOddsExposure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BookOddsExposure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BookOddsExposure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OddsID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OddsID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBook
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FulfillmentQueue = append(m.FulfillmentQueue, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBook
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBook
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBook
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.FulfillmentQueue) == 0 {
					m.FulfillmentQueue = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBook
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FulfillmentQueue = append(m.FulfillmentQueue, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FulfillmentQueue", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBook(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBook
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBook
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBook
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBook
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBook        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBook          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBook = fmt.Errorf("proto: unexpected end of group")
)
