// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sge/orderbook/participation.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BookParticipation represents the participants of an order book.
type BookParticipation struct {
	// index is the id of initial participation queue
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty" yaml:"index"`
	// book id is id corresponding to the book
	BookID string `protobuf:"bytes,2,opt,name=book_id,proto3" json:"book_id"`
	// participant_address is the bech32-encoded address of the participant.
	ParticipantAddress string `protobuf:"bytes,3,opt,name=participant_address,json=participantAddress,proto3" json:"participant_address,omitempty" yaml:"participant_address"`
	// if participation is a module account
	IsModuleAccount bool `protobuf:"varint,4,opt,name=is_module_account,json=isModuleAccount,proto3" json:"is_module_account,omitempty" yaml:"is_module_account"`
	// liquidity is the total initial liquidity provided
	Liquidity github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=liquidity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"liquidity" yaml:"liquidity"`
	// current round liquidity is the liquidity provided for current round
	CurrentRoundLiquidity github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=current_round_liquidity,json=currentRoundLiquidity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"current_round_liquidity" yaml:"current_round_liquidity"`
	ExposuresNotFilled    uint64                                 `protobuf:"varint,7,opt,name=exposures_not_filled,json=exposuresNotFilled,proto3" json:"exposures_not_filled,omitempty" yaml:"exposures_not_filled"`
	// total_bet_amount is the total bet amount corresponding to all exposure
	TotalBetAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,8,opt,name=total_bet_amount,json=totalBetAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_bet_amount" yaml:"total_bet_amount"`
	// current_round_total_bet_amount is the total bet amount corresponding to all
	// exposure
	CurrentRoundTotalBetAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,9,opt,name=current_round_total_bet_amount,json=currentRoundTotalBetAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"current_round_total_bet_amount" yaml:"current_round_total_bet_amount"`
	// max_loss is the total bet amount corresponding to all exposure
	MaxLoss github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,10,opt,name=max_loss,json=maxLoss,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"max_loss" yaml:"max_loss"`
	// current_round_max_loss is the total bet amount corresponding to all
	// exposure
	CurrentRoundMaxLoss github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,11,opt,name=current_round_max_loss,json=currentRoundMaxLoss,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"current_round_max_loss" yaml:"current_round_max_loss"`
	// current_round_max_loss_odds_id is the total bet amount corresponding to all
	// exposure
	CurrentRoundMaxLossOddsID string `protobuf:"bytes,12,opt,name=current_round_max_loss_odds_id,proto3" json:"current_round_max_loss_odds_id" yaml:"current_round_max_loss_odds_id"`
	// actual_profit is the actual profit
	ActualProfit github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,13,opt,name=actual_profit,json=actualProfit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"actual_profit" yaml:"actual_profit"`
	// if participation is settled
	IsSettled bool `protobuf:"varint,14,opt,name=is_settled,json=isSettled,proto3" json:"is_settled,omitempty" yaml:"is_settled"`
}

func (m *BookParticipation) Reset()      { *m = BookParticipation{} }
func (*BookParticipation) ProtoMessage() {}
func (*BookParticipation) Descriptor() ([]byte, []int) {
	return fileDescriptor_2962bcb47b63c36a, []int{0}
}
func (m *BookParticipation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BookParticipation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BookParticipation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BookParticipation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BookParticipation.Merge(m, src)
}
func (m *BookParticipation) XXX_Size() int {
	return m.Size()
}
func (m *BookParticipation) XXX_DiscardUnknown() {
	xxx_messageInfo_BookParticipation.DiscardUnknown(m)
}

var xxx_messageInfo_BookParticipation proto.InternalMessageInfo

// ParticipationBetPair represents the book participation and bet bond
type ParticipationBetPair struct {
	// book id is id corresponding to the book
	BookID string `protobuf:"bytes,1,opt,name=book_id,proto3" json:"book_id"`
	// participation_index is the count of initial participation queue
	ParticipationIndex uint64 `protobuf:"varint,2,opt,name=participation_index,json=participationIndex,proto3" json:"participation_index,omitempty" yaml:"participation_index"`
	// bet_uid is bet's uuid
	BetUID string `protobuf:"bytes,3,opt,name=bet_uid,proto3" json:"bet_uid"`
}

func (m *ParticipationBetPair) Reset()         { *m = ParticipationBetPair{} }
func (m *ParticipationBetPair) String() string { return proto.CompactTextString(m) }
func (*ParticipationBetPair) ProtoMessage()    {}
func (*ParticipationBetPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_2962bcb47b63c36a, []int{1}
}
func (m *ParticipationBetPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParticipationBetPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParticipationBetPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParticipationBetPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParticipationBetPair.Merge(m, src)
}
func (m *ParticipationBetPair) XXX_Size() int {
	return m.Size()
}
func (m *ParticipationBetPair) XXX_DiscardUnknown() {
	xxx_messageInfo_ParticipationBetPair.DiscardUnknown(m)
}

var xxx_messageInfo_ParticipationBetPair proto.InternalMessageInfo

func (m *ParticipationBetPair) GetBookID() string {
	if m != nil {
		return m.BookID
	}
	return ""
}

func (m *ParticipationBetPair) GetParticipationIndex() uint64 {
	if m != nil {
		return m.ParticipationIndex
	}
	return 0
}

func (m *ParticipationBetPair) GetBetUID() string {
	if m != nil {
		return m.BetUID
	}
	return ""
}

func init() {
	proto.RegisterType((*BookParticipation)(nil), "sgenetwork.sge.orderbook.BookParticipation")
	proto.RegisterType((*ParticipationBetPair)(nil), "sgenetwork.sge.orderbook.ParticipationBetPair")
}

func init() { proto.RegisterFile("sge/orderbook/participation.proto", fileDescriptor_2962bcb47b63c36a) }

var fileDescriptor_2962bcb47b63c36a = []byte{
	// 749 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x3f, 0x6f, 0xdb, 0x38,
	0x1c, 0xb5, 0x72, 0xf9, 0x67, 0xc6, 0xf9, 0xa7, 0x38, 0x17, 0x5d, 0xee, 0x4e, 0xcc, 0x09, 0xb8,
	0x20, 0xc3, 0xc5, 0x1e, 0xee, 0xa6, 0x6c, 0xd6, 0x15, 0x41, 0x0d, 0x24, 0x8d, 0xab, 0xb6, 0x28,
	0x50, 0x14, 0x60, 0x65, 0x93, 0x71, 0x08, 0xcb, 0xa2, 0x2b, 0x52, 0xa8, 0xb3, 0x77, 0xc8, 0xd8,
	0xb1, 0x40, 0x97, 0x00, 0xfd, 0x02, 0xfd, 0x18, 0xe9, 0x96, 0xb1, 0xe8, 0x20, 0x14, 0xce, 0x52,
	0x74, 0xf4, 0x27, 0x28, 0x44, 0xca, 0xb2, 0x1c, 0x3b, 0x08, 0x3c, 0x89, 0x7a, 0xbf, 0x9f, 0xde,
	0x7b, 0xe4, 0x0f, 0x7a, 0x04, 0x7f, 0xf1, 0x26, 0x29, 0xb3, 0x00, 0x93, 0xa0, 0xce, 0x58, 0xab,
	0xdc, 0x71, 0x03, 0x41, 0x1b, 0xb4, 0xe3, 0x0a, 0xca, 0xfc, 0x52, 0x27, 0x60, 0x82, 0xe9, 0x06,
	0x6f, 0x12, 0x9f, 0x88, 0x37, 0x2c, 0x68, 0x95, 0x78, 0x93, 0x94, 0xd2, 0xee, 0xed, 0x62, 0x93,
	0x35, 0x99, 0x6c, 0x2a, 0xc7, 0x2b, 0xd5, 0x6f, 0x7d, 0x5c, 0x02, 0xeb, 0x36, 0x63, 0xad, 0x5a,
	0x96, 0x4b, 0xdf, 0x05, 0x73, 0xd4, 0xc7, 0xa4, 0x6b, 0x68, 0x3b, 0xda, 0xde, 0xac, 0xbd, 0xd6,
	0x8f, 0x60, 0xe1, 0xdc, 0x6d, 0x7b, 0x07, 0x96, 0x84, 0x2d, 0x47, 0x95, 0xf5, 0x32, 0x58, 0x88,
	0xb9, 0x11, 0xc5, 0xc6, 0xcc, 0x8e, 0xb6, 0x97, 0xb7, 0x37, 0x7b, 0x11, 0x9c, 0x8f, 0xf9, 0xaa,
	0x0f, 0x7e, 0x44, 0x70, 0x50, 0x74, 0x06, 0x0b, 0xfd, 0x04, 0x6c, 0xa4, 0xae, 0x7d, 0x81, 0x5c,
	0x8c, 0x03, 0xc2, 0xb9, 0xf1, 0x8b, 0xfc, 0xd8, 0xec, 0x47, 0x70, 0x5b, 0xc9, 0x4c, 0x68, 0xb2,
	0x1c, 0x3d, 0x83, 0x56, 0x14, 0xa8, 0x3f, 0x04, 0xeb, 0x94, 0xa3, 0x36, 0xc3, 0xa1, 0x47, 0x90,
	0xdb, 0x68, 0xb0, 0xd0, 0x17, 0xc6, 0xec, 0x8e, 0xb6, 0xb7, 0x68, 0xff, 0xd1, 0x8f, 0xa0, 0x91,
	0xb8, 0xbe, 0xdd, 0x62, 0x39, 0xab, 0x94, 0x1f, 0x4b, 0xa8, 0xa2, 0x10, 0xfd, 0x15, 0xc8, 0x7b,
	0xf4, 0x75, 0x48, 0x31, 0x15, 0xe7, 0xc6, 0x9c, 0x34, 0x64, 0x5f, 0x45, 0x30, 0xf7, 0x35, 0x82,
	0xbb, 0x4d, 0x2a, 0xce, 0xc2, 0x7a, 0xa9, 0xc1, 0xda, 0xe5, 0x06, 0xe3, 0x6d, 0xc6, 0x93, 0xc7,
	0x3e, 0xc7, 0xad, 0xb2, 0x38, 0xef, 0x10, 0x5e, 0xaa, 0xfa, 0xa2, 0x1f, 0xc1, 0x35, 0xa5, 0x97,
	0x12, 0x59, 0xce, 0x90, 0x54, 0xbf, 0xd0, 0xc0, 0x56, 0x23, 0x0c, 0x02, 0xe2, 0x0b, 0x14, 0xb0,
	0xd0, 0xc7, 0x68, 0x28, 0x38, 0x2f, 0x05, 0x6b, 0x53, 0x0b, 0x9a, 0x4a, 0xf0, 0x0e, 0x5a, 0xcb,
	0xd9, 0x4c, 0x2a, 0x4e, 0x5c, 0x38, 0x4a, 0xad, 0x3c, 0x06, 0x45, 0xd2, 0xed, 0x30, 0x1e, 0x06,
	0x84, 0x23, 0x9f, 0x09, 0x74, 0x4a, 0x3d, 0x8f, 0x60, 0x63, 0x41, 0xce, 0x1b, 0xf6, 0x23, 0xf8,
	0xbb, 0x22, 0x9e, 0xd4, 0x65, 0x39, 0x7a, 0x0a, 0x3f, 0x62, 0xe2, 0x50, 0x82, 0x3a, 0x07, 0x6b,
	0x82, 0x09, 0xd7, 0x43, 0x75, 0x22, 0x90, 0xdb, 0x96, 0x83, 0x58, 0x94, 0xbb, 0xaa, 0x4e, 0xbd,
	0xab, 0x2d, 0x25, 0x7e, 0x9b, 0xcf, 0x72, 0x56, 0x24, 0x64, 0x13, 0x51, 0x91, 0x80, 0xfe, 0x41,
	0x03, 0xe6, 0xe8, 0xde, 0xc7, 0x3c, 0xe4, 0xa5, 0x87, 0xe7, 0x53, 0x7b, 0xf8, 0x7b, 0xd2, 0xc9,
	0x8e, 0x3b, 0xda, 0xce, 0x1e, 0xf0, 0xd3, 0x51, 0x77, 0x2f, 0xc1, 0x62, 0xdb, 0xed, 0x22, 0x8f,
	0x71, 0x6e, 0x00, 0x69, 0xa3, 0x32, 0xb5, 0x8d, 0x55, 0x65, 0x63, 0xc0, 0x63, 0x39, 0x0b, 0x6d,
	0xb7, 0x7b, 0xc4, 0x38, 0xd7, 0xdf, 0x6a, 0xe0, 0xd7, 0x51, 0x77, 0xa9, 0xd8, 0x92, 0x14, 0x3b,
	0x99, 0x5a, 0xec, 0xcf, 0x49, 0x7b, 0x1e, 0x4a, 0x6f, 0x64, 0xf7, 0x7a, 0x9c, 0xd8, 0xf8, 0x34,
	0x36, 0x82, 0xc1, 0x07, 0x88, 0x61, 0xcc, 0xe3, 0x6c, 0x28, 0x48, 0x3b, 0x67, 0xbd, 0x08, 0xfe,
	0xf6, 0xff, 0x38, 0xc3, 0x09, 0xc6, 0x5c, 0xc6, 0xc5, 0x3d, 0x34, 0x77, 0xcd, 0xe4, 0x76, 0x9f,
	0xe5, 0xdc, 0x43, 0xa4, 0xb7, 0xc0, 0xb2, 0xdb, 0x10, 0xa1, 0xeb, 0xa1, 0x4e, 0xc0, 0x4e, 0xa9,
	0x30, 0x96, 0xa5, 0xc1, 0xc3, 0xa9, 0xcf, 0xab, 0xa8, 0xfc, 0x8c, 0x90, 0x59, 0x4e, 0x41, 0xbd,
	0xd7, 0xe4, 0xab, 0xfe, 0x1f, 0x00, 0x94, 0x23, 0x4e, 0x84, 0x88, 0x7f, 0xb0, 0x15, 0x19, 0x4d,
	0x9b, 0xfd, 0x08, 0xae, 0xa7, 0xd1, 0x94, 0xd4, 0x2c, 0x27, 0x4f, 0xf9, 0x13, 0xb5, 0x3e, 0x28,
	0x5c, 0x5c, 0xc2, 0xdc, 0xfb, 0x4b, 0x98, 0xfb, 0x7e, 0x09, 0x73, 0xd6, 0x67, 0x0d, 0x14, 0x47,
	0x12, 0xda, 0x26, 0xa2, 0xe6, 0xd2, 0x20, 0x1b, 0xc0, 0xda, 0xd4, 0x01, 0x1c, 0x13, 0x21, 0x95,
	0xf3, 0x33, 0xf2, 0xbf, 0x9f, 0x14, 0xc0, 0xc3, 0xa6, 0x6c, 0x00, 0xc7, 0x68, 0x35, 0xbd, 0x02,
	0x88, 0x40, 0x21, 0xc5, 0x49, 0x8a, 0x2b, 0x07, 0x44, 0x3c, 0x4b, 0x1c, 0xa8, 0xa2, 0x33, 0x58,
	0xd8, 0x87, 0x57, 0x3d, 0x53, 0xbb, 0xee, 0x99, 0xda, 0xb7, 0x9e, 0xa9, 0xbd, 0xbb, 0x31, 0x73,
	0xd7, 0x37, 0x66, 0xee, 0xcb, 0x8d, 0x99, 0x7b, 0xf1, 0x4f, 0xe6, 0xdc, 0x79, 0x93, 0xec, 0x27,
	0xf7, 0x58, 0xbc, 0x2e, 0x77, 0x33, 0xf7, 0x9e, 0x9c, 0x40, 0x7d, 0x5e, 0x5e, 0x60, 0xff, 0xfe,
	0x0c, 0x00, 0x00, 0xff, 0xff, 0xe1, 0xc3, 0xea, 0xdc, 0x15, 0x07, 0x00, 0x00,
}

func (m *BookParticipation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BookParticipation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BookParticipation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsSettled {
		i--
		if m.IsSettled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	{
		size := m.ActualProfit.Size()
		i -= size
		if _, err := m.ActualProfit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParticipation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	if len(m.CurrentRoundMaxLossOddsID) > 0 {
		i -= len(m.CurrentRoundMaxLossOddsID)
		copy(dAtA[i:], m.CurrentRoundMaxLossOddsID)
		i = encodeVarintParticipation(dAtA, i, uint64(len(m.CurrentRoundMaxLossOddsID)))
		i--
		dAtA[i] = 0x62
	}
	{
		size := m.CurrentRoundMaxLoss.Size()
		i -= size
		if _, err := m.CurrentRoundMaxLoss.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParticipation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.MaxLoss.Size()
		i -= size
		if _, err := m.MaxLoss.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParticipation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.CurrentRoundTotalBetAmount.Size()
		i -= size
		if _, err := m.CurrentRoundTotalBetAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParticipation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.TotalBetAmount.Size()
		i -= size
		if _, err := m.TotalBetAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParticipation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.ExposuresNotFilled != 0 {
		i = encodeVarintParticipation(dAtA, i, uint64(m.ExposuresNotFilled))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.CurrentRoundLiquidity.Size()
		i -= size
		if _, err := m.CurrentRoundLiquidity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParticipation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.Liquidity.Size()
		i -= size
		if _, err := m.Liquidity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParticipation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.IsModuleAccount {
		i--
		if m.IsModuleAccount {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.ParticipantAddress) > 0 {
		i -= len(m.ParticipantAddress)
		copy(dAtA[i:], m.ParticipantAddress)
		i = encodeVarintParticipation(dAtA, i, uint64(len(m.ParticipantAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BookID) > 0 {
		i -= len(m.BookID)
		copy(dAtA[i:], m.BookID)
		i = encodeVarintParticipation(dAtA, i, uint64(len(m.BookID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintParticipation(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ParticipationBetPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParticipationBetPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParticipationBetPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BetUID) > 0 {
		i -= len(m.BetUID)
		copy(dAtA[i:], m.BetUID)
		i = encodeVarintParticipation(dAtA, i, uint64(len(m.BetUID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ParticipationIndex != 0 {
		i = encodeVarintParticipation(dAtA, i, uint64(m.ParticipationIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BookID) > 0 {
		i -= len(m.BookID)
		copy(dAtA[i:], m.BookID)
		i = encodeVarintParticipation(dAtA, i, uint64(len(m.BookID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintParticipation(dAtA []byte, offset int, v uint64) int {
	offset -= sovParticipation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BookParticipation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovParticipation(uint64(m.Index))
	}
	l = len(m.BookID)
	if l > 0 {
		n += 1 + l + sovParticipation(uint64(l))
	}
	l = len(m.ParticipantAddress)
	if l > 0 {
		n += 1 + l + sovParticipation(uint64(l))
	}
	if m.IsModuleAccount {
		n += 2
	}
	l = m.Liquidity.Size()
	n += 1 + l + sovParticipation(uint64(l))
	l = m.CurrentRoundLiquidity.Size()
	n += 1 + l + sovParticipation(uint64(l))
	if m.ExposuresNotFilled != 0 {
		n += 1 + sovParticipation(uint64(m.ExposuresNotFilled))
	}
	l = m.TotalBetAmount.Size()
	n += 1 + l + sovParticipation(uint64(l))
	l = m.CurrentRoundTotalBetAmount.Size()
	n += 1 + l + sovParticipation(uint64(l))
	l = m.MaxLoss.Size()
	n += 1 + l + sovParticipation(uint64(l))
	l = m.CurrentRoundMaxLoss.Size()
	n += 1 + l + sovParticipation(uint64(l))
	l = len(m.CurrentRoundMaxLossOddsID)
	if l > 0 {
		n += 1 + l + sovParticipation(uint64(l))
	}
	l = m.ActualProfit.Size()
	n += 1 + l + sovParticipation(uint64(l))
	if m.IsSettled {
		n += 2
	}
	return n
}

func (m *ParticipationBetPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BookID)
	if l > 0 {
		n += 1 + l + sovParticipation(uint64(l))
	}
	if m.ParticipationIndex != 0 {
		n += 1 + sovParticipation(uint64(m.ParticipationIndex))
	}
	l = len(m.BetUID)
	if l > 0 {
		n += 1 + l + sovParticipation(uint64(l))
	}
	return n
}

func sovParticipation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParticipation(x uint64) (n int) {
	return sovParticipation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BookParticipation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParticipation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BookParticipation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BookParticipation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipantAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsModuleAccount", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsModuleAccount = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Liquidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRoundLiquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentRoundLiquidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExposuresNotFilled", wireType)
			}
			m.ExposuresNotFilled = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExposuresNotFilled |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBetAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalBetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRoundTotalBetAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentRoundTotalBetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLoss", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxLoss.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRoundMaxLoss", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentRoundMaxLoss.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRoundMaxLossOddsID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentRoundMaxLossOddsID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualProfit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActualProfit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSettled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSettled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipParticipation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParticipation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParticipationBetPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParticipation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParticipationBetPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParticipationBetPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipationIndex", wireType)
			}
			m.ParticipationIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipationIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BetUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParticipation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParticipation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParticipation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParticipation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParticipation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParticipation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParticipation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParticipation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParticipation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParticipation = fmt.Errorf("proto: unexpected end of group")
)
