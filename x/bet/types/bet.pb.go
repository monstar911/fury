// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sge/bet/bet.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Status of the Bet.
type Bet_Status int32

const (
	//the unknown status
	Bet_STATUS_INVALID Bet_Status = 0
	//placed bet placed and waiting for result
	Bet_STATUS_PLACED Bet_Status = 1
	//canceled by Bettor
	Bet_STATUS_CANCELLED Bet_Status = 2
	//there was an abort because of force like match canceled or system.
	Bet_STATUS_ABORTED Bet_Status = 3
	//pending for any reason like DVM , see BetEventStatus on this case.
	Bet_STATUS_PENDING Bet_Status = 4
	//the result of the bet is decelerated.
	Bet_STATUS_RESULT_DECLARED Bet_Status = 5
	//the bet is settled.
	Bet_STATUS_SETTLED Bet_Status = 6
)

var Bet_Status_name = map[int32]string{
	0: "STATUS_INVALID",
	1: "STATUS_PLACED",
	2: "STATUS_CANCELLED",
	3: "STATUS_ABORTED",
	4: "STATUS_PENDING",
	5: "STATUS_RESULT_DECLARED",
	6: "STATUS_SETTLED",
}

var Bet_Status_value = map[string]int32{
	"STATUS_INVALID":         0,
	"STATUS_PLACED":          1,
	"STATUS_CANCELLED":       2,
	"STATUS_ABORTED":         3,
	"STATUS_PENDING":         4,
	"STATUS_RESULT_DECLARED": 5,
	"STATUS_SETTLED":         6,
}

func (x Bet_Status) String() string {
	return proto.EnumName(Bet_Status_name, int32(x))
}

func (Bet_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9bc076bb1a4d9f6e, []int{0, 0}
}

// Result of the bet.
type Bet_Result int32

const (
	//the invalid or unknown
	Bet_RESULT_INVALID Bet_Result = 0
	// the result is not decelerated yet.
	Bet_RESULT_PENDING Bet_Result = 1
	// bet is won
	Bet_RESULT_WON Bet_Result = 2
	// bet is lost
	Bet_RESULT_LOST Bet_Result = 3
	// bet is draw
	Bet_RESULT_DRAW Bet_Result = 4
	// bet is aborted
	Bet_RESULT_ABORTED Bet_Result = 5
)

var Bet_Result_name = map[int32]string{
	0: "RESULT_INVALID",
	1: "RESULT_PENDING",
	2: "RESULT_WON",
	3: "RESULT_LOST",
	4: "RESULT_DRAW",
	5: "RESULT_ABORTED",
}

var Bet_Result_value = map[string]int32{
	"RESULT_INVALID": 0,
	"RESULT_PENDING": 1,
	"RESULT_WON":     2,
	"RESULT_LOST":    3,
	"RESULT_DRAW":    4,
	"RESULT_ABORTED": 5,
}

func (x Bet_Result) String() string {
	return proto.EnumName(Bet_Result_name, int32(x))
}

func (Bet_Result) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9bc076bb1a4d9f6e, []int{0, 1}
}

type Bet struct {
	// uid is the unique uuid assigned to bet
	UID string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid"`
	// sport_event_uid is the unique uuid of te sportevent on which bet is placed
	SportEventUID string `protobuf:"bytes,2,opt,name=sport_event_uid,proto3" json:"sport_event_uid"`
	// odds_uid is the unique uuid of the odds on which bet is placed
	OddsUID string `protobuf:"bytes,3,opt,name=odds_uid,proto3" json:"odds_uid"`
	// odds_value is the odds on which bet is placed
	OddsValue github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=odds_value,json=oddsValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"odds_value"`
	// amount is the wagger amount deducted by betting fee
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	// betFee is the betting fee
	BetFee types.Coin `protobuf:"bytes,6,opt,name=bet_fee,json=betFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"bet_fee"`
	// status is the status of the bet, such as `pending` or `settled`
	Status Bet_Status `protobuf:"varint,7,opt,name=status,proto3,enum=sgenetwork.sge.bet.Bet_Status" json:"status,omitempty"`
	// result is the result of bet, sunch as `won` or `lost`
	Result Bet_Result `protobuf:"varint,8,opt,name=result,proto3,enum=sgenetwork.sge.bet.Bet_Result" json:"result,omitempty"`
	// verified shows bet is verified or not
	Verified bool `protobuf:"varint,9,opt,name=verified,proto3" json:"verified,omitempty"`
	// ticket is a signed string containing important info such as `oddsValue`
	Ticket string `protobuf:"bytes,10,opt,name=ticket,proto3" json:"ticket,omitempty"`
	// creator is the bettor address
	Creator   string `protobuf:"bytes,11,opt,name=creator,proto3" json:"creator,omitempty"`
	CreatedAt int64  `protobuf:"varint,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *Bet) Reset()         { *m = Bet{} }
func (m *Bet) String() string { return proto.CompactTextString(m) }
func (*Bet) ProtoMessage()    {}
func (*Bet) Descriptor() ([]byte, []int) {
	return fileDescriptor_9bc076bb1a4d9f6e, []int{0}
}
func (m *Bet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bet.Merge(m, src)
}
func (m *Bet) XXX_Size() int {
	return m.Size()
}
func (m *Bet) XXX_DiscardUnknown() {
	xxx_messageInfo_Bet.DiscardUnknown(m)
}

var xxx_messageInfo_Bet proto.InternalMessageInfo

func (m *Bet) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *Bet) GetSportEventUID() string {
	if m != nil {
		return m.SportEventUID
	}
	return ""
}

func (m *Bet) GetOddsUID() string {
	if m != nil {
		return m.OddsUID
	}
	return ""
}

func (m *Bet) GetBetFee() types.Coin {
	if m != nil {
		return m.BetFee
	}
	return types.Coin{}
}

func (m *Bet) GetStatus() Bet_Status {
	if m != nil {
		return m.Status
	}
	return Bet_STATUS_INVALID
}

func (m *Bet) GetResult() Bet_Result {
	if m != nil {
		return m.Result
	}
	return Bet_RESULT_INVALID
}

func (m *Bet) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func (m *Bet) GetTicket() string {
	if m != nil {
		return m.Ticket
	}
	return ""
}

func (m *Bet) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Bet) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func init() {
	proto.RegisterEnum("sgenetwork.sge.bet.Bet_Status", Bet_Status_name, Bet_Status_value)
	proto.RegisterEnum("sgenetwork.sge.bet.Bet_Result", Bet_Result_name, Bet_Result_value)
	proto.RegisterType((*Bet)(nil), "sgenetwork.sge.bet.Bet")
}

func init() { proto.RegisterFile("sge/bet/bet.proto", fileDescriptor_9bc076bb1a4d9f6e) }

var fileDescriptor_9bc076bb1a4d9f6e = []byte{
	// 635 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4d, 0x4e, 0xdb, 0x40,
	0x14, 0x8e, 0x09, 0x38, 0xc9, 0x50, 0x82, 0x19, 0x21, 0xea, 0x46, 0xaa, 0x13, 0xa1, 0xaa, 0xcd,
	0x06, 0x5b, 0x80, 0xd4, 0x75, 0x9d, 0xd8, 0x54, 0x91, 0xd2, 0x04, 0x8d, 0x0d, 0x48, 0xdd, 0x44,
	0xfe, 0x79, 0xb8, 0x16, 0x90, 0x41, 0x9e, 0x49, 0xda, 0xde, 0xa2, 0x17, 0xe0, 0x02, 0x3d, 0x09,
	0x4b, 0x96, 0x55, 0x17, 0x69, 0x15, 0x76, 0x3d, 0x45, 0x35, 0xf6, 0x00, 0x11, 0x95, 0xaa, 0x76,
	0x91, 0xf8, 0xbd, 0xef, 0x6f, 0xc6, 0xcf, 0x63, 0xa3, 0x0d, 0x96, 0x80, 0x15, 0x02, 0x17, 0x3f,
	0xf3, 0x32, 0xa3, 0x9c, 0x62, 0xcc, 0x12, 0x18, 0x03, 0xff, 0x48, 0xb3, 0x33, 0x93, 0x25, 0x60,
	0x86, 0xc0, 0x1b, 0x9b, 0x09, 0x4d, 0x68, 0x4e, 0x5b, 0xa2, 0x2a, 0x94, 0x0d, 0x23, 0xa2, 0xec,
	0x82, 0x32, 0x2b, 0x0c, 0x18, 0x58, 0xd3, 0xdd, 0x10, 0x78, 0xb0, 0x6b, 0x45, 0x34, 0x1d, 0x17,
	0xfc, 0xf6, 0x55, 0x05, 0x95, 0x3b, 0xc0, 0x71, 0x0b, 0x95, 0x27, 0x69, 0xac, 0x2b, 0x2d, 0xa5,
	0x5d, 0xeb, 0xd4, 0xe7, 0xb3, 0x66, 0xf9, 0xa8, 0xe7, 0xfc, 0x9a, 0x35, 0x05, 0x4a, 0xc4, 0x1f,
	0x1e, 0xa0, 0x75, 0x76, 0x49, 0x33, 0x3e, 0x82, 0x29, 0x8c, 0xf9, 0x48, 0xa8, 0x97, 0x72, 0xf5,
	0x8b, 0xf9, 0xac, 0xb9, 0xe6, 0x09, 0xca, 0x15, 0x4c, 0xe1, 0x7b, 0xac, 0x25, 0x8f, 0x01, 0xbc,
	0x8f, 0xaa, 0x34, 0x8e, 0x59, 0x1e, 0x54, 0xce, 0x83, 0x9e, 0xce, 0x67, 0xcd, 0xca, 0x30, 0x8e,
	0x59, 0x11, 0x71, 0x4f, 0x93, 0xfb, 0x0a, 0xbf, 0x43, 0x28, 0xaf, 0xa7, 0xc1, 0xf9, 0x04, 0xf4,
	0xe5, 0xdc, 0x66, 0x5e, 0xcf, 0x9a, 0xa5, 0xef, 0xb3, 0xe6, 0xcb, 0x24, 0xe5, 0x1f, 0x26, 0xa1,
	0x19, 0xd1, 0x0b, 0x4b, 0xde, 0x75, 0x71, 0xd9, 0x61, 0xf1, 0x99, 0xc5, 0x3f, 0x5f, 0x02, 0x33,
	0x1d, 0x88, 0x48, 0x4d, 0x24, 0x1c, 0x8b, 0x00, 0x7c, 0x80, 0xd4, 0xe0, 0x82, 0x4e, 0xc6, 0x5c,
	0x5f, 0xf9, 0xef, 0xa8, 0xde, 0x98, 0x13, 0xe9, 0xc6, 0x11, 0xaa, 0x84, 0xc0, 0x47, 0xa7, 0x00,
	0xba, 0xda, 0x52, 0xda, 0xab, 0x7b, 0xcf, 0xcc, 0x42, 0x6f, 0x8a, 0xb9, 0x9b, 0x72, 0xee, 0x66,
	0x97, 0xa6, 0xe3, 0x8e, 0x25, 0xd6, 0xf8, 0xfa, 0xa3, 0xf9, 0xea, 0x1f, 0xd6, 0x10, 0x06, 0xa2,
	0x86, 0xc0, 0x0f, 0x00, 0xf0, 0x6b, 0xa4, 0x32, 0x1e, 0xf0, 0x09, 0xd3, 0x2b, 0x2d, 0xa5, 0x5d,
	0xdf, 0x33, 0xcc, 0x3f, 0x4f, 0x81, 0xd9, 0x01, 0x6e, 0x7a, 0xb9, 0x8a, 0x48, 0xb5, 0xf0, 0x65,
	0xc0, 0x26, 0xe7, 0x5c, 0xaf, 0xfe, 0xdd, 0x47, 0x72, 0x15, 0x91, 0x6a, 0xdc, 0x40, 0xd5, 0x29,
	0x64, 0xe9, 0x69, 0x0a, 0xb1, 0x5e, 0x6b, 0x29, 0xed, 0x2a, 0xb9, 0xef, 0xf1, 0x16, 0x52, 0x79,
	0x1a, 0x9d, 0x01, 0xd7, 0x91, 0x18, 0x1c, 0x91, 0x1d, 0xd6, 0x51, 0x25, 0xca, 0x20, 0xe0, 0x34,
	0xd3, 0x57, 0x73, 0xe2, 0xae, 0xc5, 0xcf, 0x11, 0xca, 0x4b, 0x88, 0x47, 0x01, 0xd7, 0x9f, 0xb4,
	0x94, 0x76, 0x99, 0xd4, 0x24, 0x62, 0xf3, 0xed, 0x2b, 0x05, 0xa9, 0xc5, 0xbe, 0x31, 0x46, 0x75,
	0xcf, 0xb7, 0xfd, 0x23, 0x6f, 0xd4, 0x1b, 0x1c, 0xdb, 0xfd, 0x9e, 0xa3, 0x95, 0xf0, 0x06, 0x5a,
	0x93, 0xd8, 0x61, 0xdf, 0xee, 0xba, 0x8e, 0xa6, 0xe0, 0x4d, 0xa4, 0x49, 0xa8, 0x6b, 0x0f, 0xba,
	0x6e, 0xbf, 0xef, 0x3a, 0xda, 0xd2, 0x82, 0xd9, 0xee, 0x0c, 0x89, 0xef, 0x3a, 0x5a, 0x79, 0x01,
	0x3b, 0x74, 0x07, 0x4e, 0x6f, 0xf0, 0x56, 0x5b, 0xc6, 0x0d, 0xb4, 0x25, 0x31, 0xe2, 0x7a, 0x47,
	0x7d, 0x7f, 0xe4, 0xb8, 0xdd, 0xbe, 0x4d, 0x5c, 0x47, 0x5b, 0x59, 0xd0, 0x7b, 0xae, 0xef, 0x8b,
	0x5c, 0x75, 0x7b, 0x8a, 0xd4, 0x62, 0x3c, 0x82, 0x95, 0x96, 0x87, 0xed, 0x3d, 0x60, 0x77, 0x2b,
	0x28, 0xb8, 0x8e, 0x90, 0xc4, 0x4e, 0x86, 0x03, 0x6d, 0x09, 0xaf, 0xa3, 0x55, 0xd9, 0xf7, 0x87,
	0x9e, 0xaf, 0x95, 0x17, 0x00, 0x87, 0xd8, 0x27, 0xda, 0xf2, 0x42, 0xca, 0xdd, 0xde, 0x57, 0x3a,
	0x6f, 0xae, 0xe7, 0x86, 0x72, 0x33, 0x37, 0x94, 0x9f, 0x73, 0x43, 0xf9, 0x72, 0x6b, 0x94, 0x6e,
	0x6e, 0x8d, 0xd2, 0xb7, 0x5b, 0xa3, 0xf4, 0x7e, 0xf1, 0x8c, 0xb2, 0x04, 0x76, 0xe4, 0x13, 0x15,
	0xb5, 0xf5, 0x29, 0xff, 0x5e, 0xe4, 0x67, 0x28, 0x54, 0xf3, 0x17, 0x7d, 0xff, 0x77, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xab, 0x16, 0x72, 0x74, 0x47, 0x04, 0x00, 0x00,
}

func (m *Bet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != 0 {
		i = encodeVarintBet(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintBet(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Ticket) > 0 {
		i -= len(m.Ticket)
		copy(dAtA[i:], m.Ticket)
		i = encodeVarintBet(dAtA, i, uint64(len(m.Ticket)))
		i--
		dAtA[i] = 0x52
	}
	if m.Verified {
		i--
		if m.Verified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.Result != 0 {
		i = encodeVarintBet(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x40
	}
	if m.Status != 0 {
		i = encodeVarintBet(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	{
		size, err := m.BetFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBet(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBet(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.OddsValue.Size()
		i -= size
		if _, err := m.OddsValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBet(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.OddsUID) > 0 {
		i -= len(m.OddsUID)
		copy(dAtA[i:], m.OddsUID)
		i = encodeVarintBet(dAtA, i, uint64(len(m.OddsUID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SportEventUID) > 0 {
		i -= len(m.SportEventUID)
		copy(dAtA[i:], m.SportEventUID)
		i = encodeVarintBet(dAtA, i, uint64(len(m.SportEventUID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UID) > 0 {
		i -= len(m.UID)
		copy(dAtA[i:], m.UID)
		i = encodeVarintBet(dAtA, i, uint64(len(m.UID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBet(dAtA []byte, offset int, v uint64) int {
	offset -= sovBet(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Bet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UID)
	if l > 0 {
		n += 1 + l + sovBet(uint64(l))
	}
	l = len(m.SportEventUID)
	if l > 0 {
		n += 1 + l + sovBet(uint64(l))
	}
	l = len(m.OddsUID)
	if l > 0 {
		n += 1 + l + sovBet(uint64(l))
	}
	l = m.OddsValue.Size()
	n += 1 + l + sovBet(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovBet(uint64(l))
	l = m.BetFee.Size()
	n += 1 + l + sovBet(uint64(l))
	if m.Status != 0 {
		n += 1 + sovBet(uint64(m.Status))
	}
	if m.Result != 0 {
		n += 1 + sovBet(uint64(m.Result))
	}
	if m.Verified {
		n += 2
	}
	l = len(m.Ticket)
	if l > 0 {
		n += 1 + l + sovBet(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovBet(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovBet(uint64(m.CreatedAt))
	}
	return n
}

func sovBet(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBet(x uint64) (n int) {
	return sovBet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Bet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SportEventUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SportEventUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OddsUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OddsUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OddsValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OddsValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BetFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Bet_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= Bet_Result(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ticket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBet
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBet
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBet
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBet        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBet          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBet = fmt.Errorf("proto: unexpected end of group")
)
