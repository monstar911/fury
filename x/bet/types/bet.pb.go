// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sge/bet/bet.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Status of the Bet.
type Bet_Status int32

const (
	// unknown status
	Bet_STATUS_UNSPECIFIED Bet_Status = 0
	// bet is placed
	Bet_STATUS_PLACED Bet_Status = 1
	// bet is canceled by Bettor
	Bet_STATUS_CANCELLED Bet_Status = 2
	// bet is aborted
	Bet_STATUS_ABORTED Bet_Status = 3
	// bet is pending for getting placed
	Bet_STATUS_PENDING Bet_Status = 4
	// bet result is declared
	Bet_STATUS_RESULT_DECLARED Bet_Status = 5
	// the bet is settled
	Bet_STATUS_SETTLED Bet_Status = 6
)

var Bet_Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "STATUS_PLACED",
	2: "STATUS_CANCELLED",
	3: "STATUS_ABORTED",
	4: "STATUS_PENDING",
	5: "STATUS_RESULT_DECLARED",
	6: "STATUS_SETTLED",
}

var Bet_Status_value = map[string]int32{
	"STATUS_UNSPECIFIED":     0,
	"STATUS_PLACED":          1,
	"STATUS_CANCELLED":       2,
	"STATUS_ABORTED":         3,
	"STATUS_PENDING":         4,
	"STATUS_RESULT_DECLARED": 5,
	"STATUS_SETTLED":         6,
}

func (x Bet_Status) String() string {
	return proto.EnumName(Bet_Status_name, int32(x))
}

func (Bet_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9bc076bb1a4d9f6e, []int{0, 0}
}

// Result of the bet.
type Bet_Result int32

const (
	// the invalid or unknown
	Bet_RESULT_UNSPECIFIED Bet_Result = 0
	// bet result is pending
	Bet_RESULT_PENDING Bet_Result = 1
	// bet won by the bettor
	Bet_RESULT_WON Bet_Result = 2
	// bet lost by the bettor
	Bet_RESULT_LOST Bet_Result = 3
	// bet is draw
	Bet_RESULT_DRAW Bet_Result = 4
	// bet is aborted
	Bet_RESULT_ABORTED Bet_Result = 5
)

var Bet_Result_name = map[int32]string{
	0: "RESULT_UNSPECIFIED",
	1: "RESULT_PENDING",
	2: "RESULT_WON",
	3: "RESULT_LOST",
	4: "RESULT_DRAW",
	5: "RESULT_ABORTED",
}

var Bet_Result_value = map[string]int32{
	"RESULT_UNSPECIFIED": 0,
	"RESULT_PENDING":     1,
	"RESULT_WON":         2,
	"RESULT_LOST":        3,
	"RESULT_DRAW":        4,
	"RESULT_ABORTED":     5,
}

func (x Bet_Result) String() string {
	return proto.EnumName(Bet_Result_name, int32(x))
}

func (Bet_Result) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9bc076bb1a4d9f6e, []int{0, 1}
}

// Bet is the main type of bet in the blockchain state.
type Bet struct {
	// uid is the universal unique identifier assigned to a bet.
	UID string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid"`
	// sport_event_uid is the universal unique identifier of
	// the sport-event on which the bet is placed.
	SportEventUID string `protobuf:"bytes,2,opt,name=sport_event_uid,proto3" json:"sport_event_uid"`
	// odds_uid is the unique universal unique identifier,
	// of the odds on which the bet is placed.
	OddsUID string `protobuf:"bytes,3,opt,name=odds_uid,proto3" json:"odds_uid"`
	// odds_type is the type of odds that
	// user choose such as decimal, fractional.
	OddsType OddsType `protobuf:"varint,4,opt,name=odds_type,json=oddsType,proto3,enum=sgenetwork.sge.bet.OddsType" json:"odds_type,omitempty"`
	// odds_value is the odds on which the bet is placed.
	OddsValue string `protobuf:"bytes,5,opt,name=odds_value,json=oddsValue,proto3" json:"odds_value,omitempty"`
	// amount is the wager amount.
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	// bet_fee is the betting fee calculated by the bet amount.
	BetFee types.Coin `protobuf:"bytes,7,opt,name=bet_fee,json=betFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"bet_fee"`
	// status is the status of the bet, such as `unspecified` or `settled`.
	Status Bet_Status `protobuf:"varint,8,opt,name=status,proto3,enum=sgenetwork.sge.bet.Bet_Status" json:"status,omitempty"`
	// result is the result of the bet, such as `won` or `lost`.
	Result Bet_Result `protobuf:"varint,9,opt,name=result,proto3,enum=sgenetwork.sge.bet.Bet_Result" json:"result,omitempty"`
	// verified shows bet is verified or not.
	Verified bool `protobuf:"varint,10,opt,name=verified,proto3" json:"verified,omitempty"`
	// ticket is a signed string containing important info such as `odds_value`.
	Ticket string `protobuf:"bytes,11,opt,name=ticket,proto3" json:"ticket,omitempty"`
	// creator is the bettor address.
	Creator string `protobuf:"bytes,12,opt,name=creator,proto3" json:"creator,omitempty"`
	// created_at is the bet placement timestamp.
	CreatedAt int64 `protobuf:"varint,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// settlement_height is the block height that the bet is settled.
	SettlementHeight  int64                                  `protobuf:"varint,14,opt,name=settlement_height,json=settlementHeight,proto3" json:"settlement_height,omitempty"`
	MaxLossMultiplier github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,15,opt,name=max_loss_multiplier,json=maxLossMultiplier,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_loss_multiplier"`
	BetFullfillment   []*BetFullfillment                     `protobuf:"bytes,16,rep,name=bet_fullfillment,json=betFullfillment,proto3" json:"bet_fullfillment,omitempty"`
}

func (m *Bet) Reset()         { *m = Bet{} }
func (m *Bet) String() string { return proto.CompactTextString(m) }
func (*Bet) ProtoMessage()    {}
func (*Bet) Descriptor() ([]byte, []int) {
	return fileDescriptor_9bc076bb1a4d9f6e, []int{0}
}
func (m *Bet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bet.Merge(m, src)
}
func (m *Bet) XXX_Size() int {
	return m.Size()
}
func (m *Bet) XXX_DiscardUnknown() {
	xxx_messageInfo_Bet.DiscardUnknown(m)
}

var xxx_messageInfo_Bet proto.InternalMessageInfo

func (m *Bet) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *Bet) GetSportEventUID() string {
	if m != nil {
		return m.SportEventUID
	}
	return ""
}

func (m *Bet) GetOddsUID() string {
	if m != nil {
		return m.OddsUID
	}
	return ""
}

func (m *Bet) GetOddsType() OddsType {
	if m != nil {
		return m.OddsType
	}
	return OddsType_ODDS_TYPE_UNSPECIFIED
}

func (m *Bet) GetOddsValue() string {
	if m != nil {
		return m.OddsValue
	}
	return ""
}

func (m *Bet) GetBetFee() types.Coin {
	if m != nil {
		return m.BetFee
	}
	return types.Coin{}
}

func (m *Bet) GetStatus() Bet_Status {
	if m != nil {
		return m.Status
	}
	return Bet_STATUS_UNSPECIFIED
}

func (m *Bet) GetResult() Bet_Result {
	if m != nil {
		return m.Result
	}
	return Bet_RESULT_UNSPECIFIED
}

func (m *Bet) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func (m *Bet) GetTicket() string {
	if m != nil {
		return m.Ticket
	}
	return ""
}

func (m *Bet) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Bet) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Bet) GetSettlementHeight() int64 {
	if m != nil {
		return m.SettlementHeight
	}
	return 0
}

func (m *Bet) GetBetFullfillment() []*BetFullfillment {
	if m != nil {
		return m.BetFullfillment
	}
	return nil
}

// UID2ID is the type for mapping UIDs and Sequencial IDs of bets.
type UID2ID struct {
	// uid is the universal unique identifier assigned to the bet.
	UID string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid"`
	// id is an autogenerated sequential id for a bet.
	ID uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id"`
}

func (m *UID2ID) Reset()         { *m = UID2ID{} }
func (m *UID2ID) String() string { return proto.CompactTextString(m) }
func (*UID2ID) ProtoMessage()    {}
func (*UID2ID) Descriptor() ([]byte, []int) {
	return fileDescriptor_9bc076bb1a4d9f6e, []int{1}
}
func (m *UID2ID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UID2ID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UID2ID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UID2ID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UID2ID.Merge(m, src)
}
func (m *UID2ID) XXX_Size() int {
	return m.Size()
}
func (m *UID2ID) XXX_DiscardUnknown() {
	xxx_messageInfo_UID2ID.DiscardUnknown(m)
}

var xxx_messageInfo_UID2ID proto.InternalMessageInfo

func (m *UID2ID) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *UID2ID) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

// ActiveBet is the type for an active bet
type ActiveBet struct {
	// uid is the universal unique identifier for the bet.
	UID string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid"`
	// creator is the bettor address.
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *ActiveBet) Reset()         { *m = ActiveBet{} }
func (m *ActiveBet) String() string { return proto.CompactTextString(m) }
func (*ActiveBet) ProtoMessage()    {}
func (*ActiveBet) Descriptor() ([]byte, []int) {
	return fileDescriptor_9bc076bb1a4d9f6e, []int{2}
}
func (m *ActiveBet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActiveBet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActiveBet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActiveBet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveBet.Merge(m, src)
}
func (m *ActiveBet) XXX_Size() int {
	return m.Size()
}
func (m *ActiveBet) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveBet.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveBet proto.InternalMessageInfo

func (m *ActiveBet) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *ActiveBet) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// SettledBet is the type for a settled bet.
type SettledBet struct {
	// uid is the universal unique identifier for the bet.
	UID string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid"`
	// bettor_address is the bech32 address of the bettor account.
	BettorAddress string `protobuf:"bytes,2,opt,name=bettor_address,json=bettorAddress,proto3" json:"bettor_address,omitempty"`
}

func (m *SettledBet) Reset()         { *m = SettledBet{} }
func (m *SettledBet) String() string { return proto.CompactTextString(m) }
func (*SettledBet) ProtoMessage()    {}
func (*SettledBet) Descriptor() ([]byte, []int) {
	return fileDescriptor_9bc076bb1a4d9f6e, []int{3}
}
func (m *SettledBet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SettledBet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SettledBet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SettledBet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettledBet.Merge(m, src)
}
func (m *SettledBet) XXX_Size() int {
	return m.Size()
}
func (m *SettledBet) XXX_DiscardUnknown() {
	xxx_messageInfo_SettledBet.DiscardUnknown(m)
}

var xxx_messageInfo_SettledBet proto.InternalMessageInfo

func (m *SettledBet) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *SettledBet) GetBettorAddress() string {
	if m != nil {
		return m.BettorAddress
	}
	return ""
}

type BetFullfillment struct {
	// participant_address is the bech32-encoded address of the participant fullfilling bet.
	ParticipantAddress string `protobuf:"bytes,1,opt,name=participant_address,json=participantAddress,proto3" json:"participant_address,omitempty" yaml:"participant_address"`
	// number in initial participation queue number
	ParticipantNumber uint64 `protobuf:"varint,2,opt,name=participant_number,json=participantNumber,proto3" json:"participant_number,omitempty" yaml:"participant_number"`
	// bet amount fullfilled by the participant
	BetAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=bet_amount,json=betAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"bet_amount" yaml:"bet_amount"`
	// payout amount fullfilled by the participant
	PayoutAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=payout_amount,json=payoutAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"payout_amount" yaml:"payout_amount"`
}

func (m *BetFullfillment) Reset()         { *m = BetFullfillment{} }
func (m *BetFullfillment) String() string { return proto.CompactTextString(m) }
func (*BetFullfillment) ProtoMessage()    {}
func (*BetFullfillment) Descriptor() ([]byte, []int) {
	return fileDescriptor_9bc076bb1a4d9f6e, []int{4}
}
func (m *BetFullfillment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BetFullfillment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BetFullfillment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BetFullfillment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BetFullfillment.Merge(m, src)
}
func (m *BetFullfillment) XXX_Size() int {
	return m.Size()
}
func (m *BetFullfillment) XXX_DiscardUnknown() {
	xxx_messageInfo_BetFullfillment.DiscardUnknown(m)
}

var xxx_messageInfo_BetFullfillment proto.InternalMessageInfo

func (m *BetFullfillment) GetParticipantAddress() string {
	if m != nil {
		return m.ParticipantAddress
	}
	return ""
}

func (m *BetFullfillment) GetParticipantNumber() uint64 {
	if m != nil {
		return m.ParticipantNumber
	}
	return 0
}

func init() {
	proto.RegisterEnum("sgenetwork.sge.bet.Bet_Status", Bet_Status_name, Bet_Status_value)
	proto.RegisterEnum("sgenetwork.sge.bet.Bet_Result", Bet_Result_name, Bet_Result_value)
	proto.RegisterType((*Bet)(nil), "sgenetwork.sge.bet.Bet")
	proto.RegisterType((*UID2ID)(nil), "sgenetwork.sge.bet.UID2ID")
	proto.RegisterType((*ActiveBet)(nil), "sgenetwork.sge.bet.ActiveBet")
	proto.RegisterType((*SettledBet)(nil), "sgenetwork.sge.bet.SettledBet")
	proto.RegisterType((*BetFullfillment)(nil), "sgenetwork.sge.bet.BetFullfillment")
}

func init() { proto.RegisterFile("sge/bet/bet.proto", fileDescriptor_9bc076bb1a4d9f6e) }

var fileDescriptor_9bc076bb1a4d9f6e = []byte{
	// 972 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xc1, 0x6e, 0xdb, 0x46,
	0x13, 0x36, 0x25, 0x5b, 0xb6, 0xc6, 0xb6, 0x4c, 0x6d, 0x0c, 0x87, 0x31, 0x12, 0x51, 0xe0, 0xff,
	0xb7, 0x15, 0x50, 0x84, 0x42, 0x1c, 0xa0, 0x40, 0x7b, 0xaa, 0x24, 0xd2, 0x89, 0x00, 0x55, 0x36,
	0x56, 0x52, 0x03, 0xf4, 0x50, 0x82, 0x14, 0xd7, 0x32, 0x61, 0x4a, 0x14, 0xb8, 0x4b, 0xd7, 0xee,
	0xad, 0x0f, 0x50, 0xa0, 0xaf, 0xd0, 0x6b, 0x9f, 0x24, 0xc7, 0x1c, 0x8b, 0x1e, 0xd8, 0x42, 0xbe,
	0xf5, 0xe8, 0x27, 0x28, 0x76, 0xb9, 0x56, 0x68, 0x27, 0x2d, 0xec, 0x83, 0xad, 0xdd, 0x6f, 0xbe,
	0xf9, 0xbe, 0xe5, 0xcc, 0x72, 0x08, 0x55, 0x3a, 0x21, 0x4d, 0x8f, 0x30, 0xfe, 0x67, 0xce, 0xe3,
	0x88, 0x45, 0x08, 0xd1, 0x09, 0x99, 0x11, 0xf6, 0x43, 0x14, 0x9f, 0x99, 0x74, 0x42, 0x4c, 0x8f,
	0xb0, 0xfd, 0xdd, 0x49, 0x34, 0x89, 0x44, 0xb8, 0xc9, 0x57, 0x19, 0x73, 0xbf, 0x36, 0x8e, 0xe8,
	0x34, 0xa2, 0x4d, 0xcf, 0xa5, 0xa4, 0x79, 0xfe, 0xc2, 0x23, 0xcc, 0x7d, 0xd1, 0x1c, 0x47, 0xc1,
	0x4c, 0xc6, 0x1f, 0xdf, 0x88, 0x47, 0xbe, 0x4f, 0x1d, 0x76, 0x39, 0x27, 0x59, 0xc0, 0xf8, 0xb9,
	0x0c, 0xc5, 0x36, 0x61, 0xa8, 0x0e, 0xc5, 0x24, 0xf0, 0x35, 0xa5, 0xae, 0x34, 0xca, 0xed, 0xca,
	0x22, 0xd5, 0x8b, 0xa3, 0xae, 0xf5, 0x77, 0xaa, 0x73, 0x14, 0xf3, 0x7f, 0xa8, 0x0f, 0x3b, 0x74,
	0x1e, 0xc5, 0xcc, 0x21, 0xe7, 0x64, 0xc6, 0x1c, 0xce, 0x2e, 0x08, 0xf6, 0xff, 0x17, 0xa9, 0xbe,
	0x3d, 0xe0, 0x21, 0x9b, 0x47, 0xb2, 0xbc, 0xbb, 0x5c, 0x7c, 0x17, 0x40, 0x2f, 0x61, 0x43, 0x1c,
	0x86, 0x0b, 0x15, 0x85, 0xd0, 0xe3, 0x45, 0xaa, 0xaf, 0x1f, 0xf9, 0x3e, 0xcd, 0x24, 0x96, 0x61,
	0xbc, 0x5c, 0xa1, 0x2f, 0xa1, 0xbc, 0x7c, 0x02, 0x6d, 0xb5, 0xae, 0x34, 0x2a, 0x07, 0x4f, 0xcd,
	0x0f, 0xab, 0x64, 0x72, 0x95, 0xe1, 0xe5, 0x9c, 0x64, 0xa9, 0x7c, 0x85, 0x9e, 0x01, 0x88, 0xd4,
	0x73, 0x37, 0x4c, 0x88, 0xb6, 0xc6, 0x1d, 0xb1, 0x10, 0xfb, 0x96, 0x03, 0xe8, 0x10, 0x4a, 0xee,
	0x34, 0x4a, 0x66, 0x4c, 0x2b, 0x89, 0xc3, 0x98, 0x6f, 0x53, 0x7d, 0xe5, 0x8f, 0x54, 0xff, 0x74,
	0x12, 0xb0, 0xd3, 0xc4, 0x33, 0xc7, 0xd1, 0xb4, 0x29, 0x8b, 0x9c, 0xfd, 0x3c, 0xa7, 0xfe, 0x59,
	0x93, 0x9f, 0x83, 0x9a, 0xdd, 0x19, 0xc3, 0x32, 0x1b, 0x8d, 0x61, 0xdd, 0x23, 0xcc, 0x39, 0x21,
	0x44, 0x5b, 0xaf, 0x2b, 0x8d, 0xcd, 0x83, 0x27, 0x66, 0xc6, 0x37, 0x79, 0x6f, 0x4c, 0xd9, 0x1b,
	0xb3, 0x13, 0x05, 0xb3, 0x76, 0x93, 0x7b, 0xfc, 0xf6, 0xa7, 0xfe, 0xd9, 0x3d, 0x3c, 0x78, 0x02,
	0x2e, 0x79, 0x84, 0x1d, 0x12, 0x82, 0xbe, 0x80, 0x12, 0x65, 0x2e, 0x4b, 0xa8, 0xb6, 0x21, 0x6a,
	0x50, 0xfb, 0x58, 0x0d, 0xda, 0x84, 0x99, 0x03, 0xc1, 0xc2, 0x92, 0xcd, 0xf3, 0x62, 0x42, 0x93,
	0x90, 0x69, 0xe5, 0xff, 0xce, 0xc3, 0x82, 0x85, 0x25, 0x1b, 0xed, 0xc3, 0xc6, 0x39, 0x89, 0x83,
	0x93, 0x80, 0xf8, 0x1a, 0xd4, 0x95, 0xc6, 0x06, 0x5e, 0xee, 0xd1, 0x1e, 0x94, 0x58, 0x30, 0x3e,
	0x23, 0x4c, 0xdb, 0x14, 0x35, 0x95, 0x3b, 0xa4, 0xc1, 0xfa, 0x38, 0x26, 0x2e, 0x8b, 0x62, 0x6d,
	0x4b, 0x04, 0x6e, 0xb6, 0xbc, 0x13, 0x62, 0x49, 0x7c, 0xc7, 0x65, 0xda, 0x76, 0x5d, 0x69, 0x14,
	0x71, 0x59, 0x22, 0x2d, 0x86, 0x3e, 0x87, 0x2a, 0x25, 0x8c, 0x85, 0x64, 0xca, 0xaf, 0xca, 0x29,
	0x09, 0x26, 0xa7, 0x4c, 0xab, 0x08, 0x96, 0xfa, 0x3e, 0xf0, 0x5a, 0xe0, 0xe8, 0x7b, 0x78, 0x34,
	0x75, 0x2f, 0x9c, 0x30, 0xa2, 0xd4, 0x99, 0x26, 0x21, 0x0b, 0xe6, 0x61, 0x40, 0x62, 0x6d, 0xe7,
	0xc1, 0x3d, 0xb4, 0xc8, 0x18, 0x57, 0xa7, 0xee, 0x45, 0x2f, 0xa2, 0xf4, 0x9b, 0xa5, 0x10, 0xea,
	0x83, 0x2a, 0xda, 0x99, 0x84, 0xe1, 0x49, 0x10, 0x86, 0xdc, 0x59, 0x53, 0xeb, 0xc5, 0xc6, 0xe6,
	0xc1, 0xff, 0xfe, 0xa5, 0x76, 0x87, 0x39, 0x2a, 0xde, 0xf1, 0x6e, 0x03, 0xc6, 0xaf, 0x0a, 0x94,
	0xb2, 0xa6, 0xa0, 0x3d, 0x40, 0x83, 0x61, 0x6b, 0x38, 0x1a, 0x38, 0xa3, 0xfe, 0xe0, 0xd8, 0xee,
	0x74, 0x0f, 0xbb, 0xb6, 0xa5, 0xae, 0xa0, 0x2a, 0x6c, 0x4b, 0xfc, 0xb8, 0xd7, 0xea, 0xd8, 0x96,
	0xaa, 0xa0, 0x5d, 0x50, 0x25, 0xd4, 0x69, 0xf5, 0x3b, 0x76, 0xaf, 0x67, 0x5b, 0x6a, 0x01, 0x21,
	0xa8, 0x48, 0xb4, 0xd5, 0x3e, 0xc2, 0x43, 0xdb, 0x52, 0x8b, 0x39, 0xec, 0xd8, 0xee, 0x5b, 0xdd,
	0xfe, 0x2b, 0x75, 0x15, 0xed, 0xc3, 0x9e, 0xc4, 0xb0, 0x3d, 0x18, 0xf5, 0x86, 0x8e, 0x65, 0x77,
	0x7a, 0x2d, 0x6c, 0x5b, 0xea, 0x5a, 0x8e, 0x3f, 0xb0, 0x87, 0x43, 0xae, 0x5b, 0x32, 0x7e, 0x84,
	0x52, 0xd6, 0x7f, 0x7e, 0x44, 0x99, 0x72, 0xfb, 0x88, 0x08, 0x2a, 0x12, 0xbf, 0x71, 0x51, 0x50,
	0x05, 0x40, 0x62, 0x6f, 0x8e, 0xfa, 0x6a, 0x01, 0xed, 0xc0, 0xa6, 0xdc, 0xf7, 0x8e, 0x06, 0x43,
	0xb5, 0x98, 0x03, 0x2c, 0xdc, 0x7a, 0xa3, 0xae, 0xe6, 0x54, 0x6e, 0xce, 0xbf, 0x66, 0xbc, 0x86,
	0xd2, 0xa8, 0x6b, 0x1d, 0x74, 0xad, 0x7b, 0x4c, 0xa4, 0xa7, 0x50, 0x90, 0x43, 0x68, 0xb5, 0xbd,
	0xb5, 0x48, 0xf5, 0x82, 0x88, 0x17, 0x02, 0x1f, 0x17, 0x02, 0xdf, 0x78, 0x05, 0xe5, 0xd6, 0x98,
	0x05, 0xe7, 0xe4, 0x7e, 0xe3, 0x2d, 0x77, 0x5d, 0x0b, 0xb7, 0xae, 0xab, 0x31, 0x02, 0x18, 0x88,
	0x6b, 0xe7, 0xdf, 0x4f, 0xe9, 0x13, 0xa8, 0x78, 0x84, 0xb1, 0x28, 0x76, 0x5c, 0xdf, 0x8f, 0x09,
	0xa5, 0x52, 0x70, 0x3b, 0x43, 0x5b, 0x19, 0x68, 0xfc, 0x54, 0x84, 0x9d, 0x3b, 0xd7, 0x05, 0x1d,
	0xc1, 0xa3, 0xb9, 0x1b, 0xb3, 0x60, 0x1c, 0xcc, 0xdd, 0x19, 0x5b, 0xe6, 0x67, 0x66, 0xb5, 0xeb,
	0x54, 0xdf, 0xbf, 0x74, 0xa7, 0xe1, 0x57, 0xc6, 0x47, 0x48, 0x06, 0x46, 0x39, 0x54, 0x9a, 0xa0,
	0x1e, 0xe4, 0x51, 0x67, 0x96, 0x4c, 0x3d, 0x12, 0xcb, 0x92, 0x3d, 0xbb, 0x4e, 0xf5, 0x27, 0x1f,
	0xea, 0x65, 0x1c, 0x03, 0x57, 0x73, 0x60, 0x5f, 0x60, 0xc8, 0x03, 0xe0, 0x2f, 0x83, 0x9c, 0x93,
	0xd9, 0xd0, 0xee, 0x3c, 0x6c, 0x4e, 0x5e, 0xa7, 0x7a, 0x35, 0xf3, 0x7c, 0xaf, 0x64, 0xe0, 0xb2,
	0x47, 0x58, 0x2b, 0x9b, 0x9f, 0x67, 0xb0, 0x3d, 0x77, 0x2f, 0xa3, 0x64, 0x69, 0xb3, 0x2a, 0x6c,
	0x0e, 0x1f, 0x6c, 0xb3, 0x7b, 0xf3, 0x68, 0x39, 0x31, 0x03, 0x6f, 0x65, 0xfb, 0xcc, 0xac, 0xfd,
	0xf5, 0xdb, 0x45, 0x4d, 0x79, 0xb7, 0xa8, 0x29, 0x7f, 0x2d, 0x6a, 0xca, 0x2f, 0x57, 0xb5, 0x95,
	0x77, 0x57, 0xb5, 0x95, 0xdf, 0xaf, 0x6a, 0x2b, 0xdf, 0xe5, 0x7d, 0xe8, 0x84, 0x3c, 0x97, 0x2f,
	0x3a, 0x5f, 0x37, 0x2f, 0xc4, 0x97, 0x54, 0x78, 0x79, 0x25, 0xf1, 0x19, 0x7d, 0xf9, 0x4f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x0b, 0xa0, 0x0d, 0xc9, 0xbe, 0x07, 0x00, 0x00,
}

func (m *Bet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BetFullfillment) > 0 {
		for iNdEx := len(m.BetFullfillment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BetFullfillment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	{
		size := m.MaxLossMultiplier.Size()
		i -= size
		if _, err := m.MaxLossMultiplier.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBet(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	if m.SettlementHeight != 0 {
		i = encodeVarintBet(dAtA, i, uint64(m.SettlementHeight))
		i--
		dAtA[i] = 0x70
	}
	if m.CreatedAt != 0 {
		i = encodeVarintBet(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x68
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintBet(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Ticket) > 0 {
		i -= len(m.Ticket)
		copy(dAtA[i:], m.Ticket)
		i = encodeVarintBet(dAtA, i, uint64(len(m.Ticket)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Verified {
		i--
		if m.Verified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.Result != 0 {
		i = encodeVarintBet(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x48
	}
	if m.Status != 0 {
		i = encodeVarintBet(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	{
		size, err := m.BetFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBet(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBet(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.OddsValue) > 0 {
		i -= len(m.OddsValue)
		copy(dAtA[i:], m.OddsValue)
		i = encodeVarintBet(dAtA, i, uint64(len(m.OddsValue)))
		i--
		dAtA[i] = 0x2a
	}
	if m.OddsType != 0 {
		i = encodeVarintBet(dAtA, i, uint64(m.OddsType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.OddsUID) > 0 {
		i -= len(m.OddsUID)
		copy(dAtA[i:], m.OddsUID)
		i = encodeVarintBet(dAtA, i, uint64(len(m.OddsUID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SportEventUID) > 0 {
		i -= len(m.SportEventUID)
		copy(dAtA[i:], m.SportEventUID)
		i = encodeVarintBet(dAtA, i, uint64(len(m.SportEventUID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UID) > 0 {
		i -= len(m.UID)
		copy(dAtA[i:], m.UID)
		i = encodeVarintBet(dAtA, i, uint64(len(m.UID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UID2ID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UID2ID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UID2ID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		i = encodeVarintBet(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UID) > 0 {
		i -= len(m.UID)
		copy(dAtA[i:], m.UID)
		i = encodeVarintBet(dAtA, i, uint64(len(m.UID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActiveBet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveBet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActiveBet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintBet(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UID) > 0 {
		i -= len(m.UID)
		copy(dAtA[i:], m.UID)
		i = encodeVarintBet(dAtA, i, uint64(len(m.UID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SettledBet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SettledBet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SettledBet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BettorAddress) > 0 {
		i -= len(m.BettorAddress)
		copy(dAtA[i:], m.BettorAddress)
		i = encodeVarintBet(dAtA, i, uint64(len(m.BettorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UID) > 0 {
		i -= len(m.UID)
		copy(dAtA[i:], m.UID)
		i = encodeVarintBet(dAtA, i, uint64(len(m.UID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BetFullfillment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BetFullfillment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BetFullfillment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.PayoutAmount.Size()
		i -= size
		if _, err := m.PayoutAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBet(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.BetAmount.Size()
		i -= size
		if _, err := m.BetAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBet(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.ParticipantNumber != 0 {
		i = encodeVarintBet(dAtA, i, uint64(m.ParticipantNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ParticipantAddress) > 0 {
		i -= len(m.ParticipantAddress)
		copy(dAtA[i:], m.ParticipantAddress)
		i = encodeVarintBet(dAtA, i, uint64(len(m.ParticipantAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBet(dAtA []byte, offset int, v uint64) int {
	offset -= sovBet(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Bet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UID)
	if l > 0 {
		n += 1 + l + sovBet(uint64(l))
	}
	l = len(m.SportEventUID)
	if l > 0 {
		n += 1 + l + sovBet(uint64(l))
	}
	l = len(m.OddsUID)
	if l > 0 {
		n += 1 + l + sovBet(uint64(l))
	}
	if m.OddsType != 0 {
		n += 1 + sovBet(uint64(m.OddsType))
	}
	l = len(m.OddsValue)
	if l > 0 {
		n += 1 + l + sovBet(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovBet(uint64(l))
	l = m.BetFee.Size()
	n += 1 + l + sovBet(uint64(l))
	if m.Status != 0 {
		n += 1 + sovBet(uint64(m.Status))
	}
	if m.Result != 0 {
		n += 1 + sovBet(uint64(m.Result))
	}
	if m.Verified {
		n += 2
	}
	l = len(m.Ticket)
	if l > 0 {
		n += 1 + l + sovBet(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovBet(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovBet(uint64(m.CreatedAt))
	}
	if m.SettlementHeight != 0 {
		n += 1 + sovBet(uint64(m.SettlementHeight))
	}
	l = m.MaxLossMultiplier.Size()
	n += 1 + l + sovBet(uint64(l))
	if len(m.BetFullfillment) > 0 {
		for _, e := range m.BetFullfillment {
			l = e.Size()
			n += 2 + l + sovBet(uint64(l))
		}
	}
	return n
}

func (m *UID2ID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UID)
	if l > 0 {
		n += 1 + l + sovBet(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovBet(uint64(m.ID))
	}
	return n
}

func (m *ActiveBet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UID)
	if l > 0 {
		n += 1 + l + sovBet(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovBet(uint64(l))
	}
	return n
}

func (m *SettledBet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UID)
	if l > 0 {
		n += 1 + l + sovBet(uint64(l))
	}
	l = len(m.BettorAddress)
	if l > 0 {
		n += 1 + l + sovBet(uint64(l))
	}
	return n
}

func (m *BetFullfillment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ParticipantAddress)
	if l > 0 {
		n += 1 + l + sovBet(uint64(l))
	}
	if m.ParticipantNumber != 0 {
		n += 1 + sovBet(uint64(m.ParticipantNumber))
	}
	l = m.BetAmount.Size()
	n += 1 + l + sovBet(uint64(l))
	l = m.PayoutAmount.Size()
	n += 1 + l + sovBet(uint64(l))
	return n
}

func sovBet(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBet(x uint64) (n int) {
	return sovBet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Bet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SportEventUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SportEventUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OddsUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OddsUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OddsType", wireType)
			}
			m.OddsType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OddsType |= OddsType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OddsValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OddsValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BetFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Bet_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= Bet_Result(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ticket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementHeight", wireType)
			}
			m.SettlementHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SettlementHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLossMultiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxLossMultiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetFullfillment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BetFullfillment = append(m.BetFullfillment, &BetFullfillment{})
			if err := m.BetFullfillment[len(m.BetFullfillment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UID2ID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UID2ID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UID2ID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveBet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveBet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveBet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SettledBet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SettledBet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SettledBet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BettorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BettorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BetFullfillment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BetFullfillment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BetFullfillment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipantAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantNumber", wireType)
			}
			m.ParticipantNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayoutAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PayoutAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBet
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBet
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBet
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBet        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBet          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBet = fmt.Errorf("proto: unexpected end of group")
)
