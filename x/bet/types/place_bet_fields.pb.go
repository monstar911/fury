// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sge/bet/place_bet_fields.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PlaceBetFields contains necessary fields which come in Place bet tx request.
type PlaceBetFields struct {
	// uid is the universal unique identifier assigned to bet.
	UID string `protobuf:"bytes,1,opt,name=uid,json=UID,proto3" json:"UID"`
	// amount is the wager amount.
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	// ticket is a signed string containing important info such as `oddsValue`.
	Ticket string `protobuf:"bytes,3,opt,name=ticket,proto3" json:"ticket,omitempty"`
	// odds_type is the type of odds that are going to be placed
	// such as decimal, fraction, moneyline.
	OddsType OddsType `protobuf:"varint,4,opt,name=odds_type,json=oddsType,proto3,enum=sgenetwork.sge.bet.OddsType" json:"odds_type,omitempty"`
}

func (m *PlaceBetFields) Reset()         { *m = PlaceBetFields{} }
func (m *PlaceBetFields) String() string { return proto.CompactTextString(m) }
func (*PlaceBetFields) ProtoMessage()    {}
func (*PlaceBetFields) Descriptor() ([]byte, []int) {
	return fileDescriptor_d186d55bc7cfa5da, []int{0}
}
func (m *PlaceBetFields) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlaceBetFields) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlaceBetFields.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlaceBetFields) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaceBetFields.Merge(m, src)
}
func (m *PlaceBetFields) XXX_Size() int {
	return m.Size()
}
func (m *PlaceBetFields) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaceBetFields.DiscardUnknown(m)
}

var xxx_messageInfo_PlaceBetFields proto.InternalMessageInfo

func (m *PlaceBetFields) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *PlaceBetFields) GetTicket() string {
	if m != nil {
		return m.Ticket
	}
	return ""
}

func (m *PlaceBetFields) GetOddsType() OddsType {
	if m != nil {
		return m.OddsType
	}
	return OddsType_ODDS_TYPE_UNSPECIFIED
}

func init() {
	proto.RegisterType((*PlaceBetFields)(nil), "sgenetwork.sge.bet.PlaceBetFields")
}

func init() { proto.RegisterFile("sge/bet/place_bet_fields.proto", fileDescriptor_d186d55bc7cfa5da) }

var fileDescriptor_d186d55bc7cfa5da = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xcf, 0x4a, 0x03, 0x31,
	0x10, 0xc6, 0x37, 0x56, 0x8a, 0xcd, 0xa1, 0x87, 0x20, 0xba, 0x14, 0x49, 0x8b, 0x07, 0xe9, 0xa5,
	0x09, 0xe8, 0xc9, 0x9b, 0x14, 0x29, 0xf4, 0xa4, 0x2c, 0x7a, 0xf1, 0x52, 0xba, 0x9b, 0x31, 0x2e,
	0xfd, 0x93, 0xa5, 0x99, 0xa2, 0x7d, 0x0b, 0x1f, 0xab, 0x17, 0xa1, 0x47, 0xf1, 0xb0, 0xc8, 0xee,
	0xcd, 0xa7, 0x90, 0x64, 0x57, 0x11, 0xbc, 0x64, 0xbe, 0x30, 0x93, 0x5f, 0xbe, 0xf9, 0x28, 0xb7,
	0x1a, 0x64, 0x0c, 0x28, 0xb3, 0xf9, 0x34, 0x81, 0x49, 0x0c, 0x38, 0x79, 0x4c, 0x61, 0xae, 0xac,
	0xc8, 0x56, 0x06, 0x0d, 0x63, 0x56, 0xc3, 0x12, 0xf0, 0xd9, 0xac, 0x66, 0xc2, 0x6a, 0x10, 0x31,
	0x60, 0xe7, 0x50, 0x1b, 0x6d, 0x7c, 0x5b, 0x3a, 0x55, 0x4d, 0x76, 0x8e, 0x7f, 0x48, 0x46, 0x29,
	0x3b, 0xc1, 0x4d, 0x06, 0x55, 0xe3, 0xf4, 0x8d, 0xd0, 0xf6, 0xad, 0xa3, 0x0f, 0x01, 0x47, 0x9e,
	0xcd, 0x7a, 0xb4, 0xb1, 0x4e, 0x55, 0x48, 0x7a, 0xa4, 0xdf, 0x1a, 0xb6, 0x8b, 0xbc, 0xdb, 0xb8,
	0x1f, 0x5f, 0x7f, 0x55, 0x25, 0x72, 0x07, 0x1b, 0xd1, 0xe6, 0x74, 0x61, 0xd6, 0x4b, 0x0c, 0xf7,
	0xfc, 0x90, 0xd8, 0xe6, 0xdd, 0xe0, 0x23, 0xef, 0x9e, 0xe9, 0x14, 0x9f, 0xd6, 0xb1, 0x48, 0xcc,
	0x42, 0x26, 0xc6, 0x2e, 0x8c, 0xad, 0xcb, 0xc0, 0xaa, 0x99, 0x74, 0xbf, 0x5a, 0x31, 0x5e, 0x62,
	0x54, 0xbf, 0x66, 0x47, 0xb4, 0x89, 0x69, 0x32, 0x03, 0x0c, 0x1b, 0x8e, 0x13, 0xd5, 0x37, 0x76,
	0x49, 0x5b, 0xbf, 0x3e, 0xc3, 0xfd, 0x1e, 0xe9, 0xb7, 0xcf, 0x4f, 0xc4, 0xff, 0x5d, 0xc5, 0x8d,
	0x52, 0xf6, 0x6e, 0x93, 0x41, 0x74, 0x60, 0x6a, 0x35, 0xbc, 0xda, 0x16, 0x9c, 0xec, 0x0a, 0x4e,
	0x3e, 0x0b, 0x4e, 0x5e, 0x4b, 0x1e, 0xec, 0x4a, 0x1e, 0xbc, 0x97, 0x3c, 0x78, 0xf8, 0x6b, 0xce,
	0x6a, 0x18, 0xd4, 0x30, 0xa7, 0xe5, 0x8b, 0xcf, 0xc6, 0x1b, 0x8c, 0x9b, 0x3e, 0x98, 0x8b, 0xef,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x46, 0x56, 0xbd, 0xea, 0x7d, 0x01, 0x00, 0x00,
}

func (m *PlaceBetFields) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlaceBetFields) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlaceBetFields) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OddsType != 0 {
		i = encodeVarintPlaceBetFields(dAtA, i, uint64(m.OddsType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Ticket) > 0 {
		i -= len(m.Ticket)
		copy(dAtA[i:], m.Ticket)
		i = encodeVarintPlaceBetFields(dAtA, i, uint64(len(m.Ticket)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPlaceBetFields(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.UID) > 0 {
		i -= len(m.UID)
		copy(dAtA[i:], m.UID)
		i = encodeVarintPlaceBetFields(dAtA, i, uint64(len(m.UID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPlaceBetFields(dAtA []byte, offset int, v uint64) int {
	offset -= sovPlaceBetFields(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PlaceBetFields) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UID)
	if l > 0 {
		n += 1 + l + sovPlaceBetFields(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovPlaceBetFields(uint64(l))
	l = len(m.Ticket)
	if l > 0 {
		n += 1 + l + sovPlaceBetFields(uint64(l))
	}
	if m.OddsType != 0 {
		n += 1 + sovPlaceBetFields(uint64(m.OddsType))
	}
	return n
}

func sovPlaceBetFields(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPlaceBetFields(x uint64) (n int) {
	return sovPlaceBetFields(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PlaceBetFields) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlaceBetFields
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlaceBetFields: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlaceBetFields: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlaceBetFields
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlaceBetFields
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlaceBetFields
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlaceBetFields
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlaceBetFields
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlaceBetFields
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlaceBetFields
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlaceBetFields
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlaceBetFields
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ticket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OddsType", wireType)
			}
			m.OddsType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlaceBetFields
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OddsType |= OddsType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlaceBetFields(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlaceBetFields
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlaceBetFields(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlaceBetFields
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlaceBetFields
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlaceBetFields
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlaceBetFields
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPlaceBetFields
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPlaceBetFields
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPlaceBetFields        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlaceBetFields          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPlaceBetFields = fmt.Errorf("proto: unexpected end of group")
)
