// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sge/house/house.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// WithdrawalMode is the enum type for the withdrawal mode.
type WithdrawalMode int32

const (
	// invalid
	WithdrawalMode_WITHDRAWAL_MODE_UNSPECIFIED WithdrawalMode = 0
	// full
	WithdrawalMode_WITHDRAWAL_MODE_FULL WithdrawalMode = 1
	// partial
	WithdrawalMode_WITHDRAWAL_MODE_PARTIAL WithdrawalMode = 2
)

var WithdrawalMode_name = map[int32]string{
	0: "WITHDRAWAL_MODE_UNSPECIFIED",
	1: "WITHDRAWAL_MODE_FULL",
	2: "WITHDRAWAL_MODE_PARTIAL",
}

var WithdrawalMode_value = map[string]int32{
	"WITHDRAWAL_MODE_UNSPECIFIED": 0,
	"WITHDRAWAL_MODE_FULL":        1,
	"WITHDRAWAL_MODE_PARTIAL":     2,
}

func (x WithdrawalMode) String() string {
	return proto.EnumName(WithdrawalMode_name, int32(x))
}

func (WithdrawalMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7ac648d293874eae, []int{0}
}

// Params defines the parameters for the house module.
type Params struct {
	// minimum_deposit is the minum amount of deposit acceptable.
	MinimumDeposit uint64 `protobuf:"varint,1,opt,name=minimum_deposit,json=minimumDeposit,proto3" json:"minimum_deposit,omitempty" yaml:"minimum_deposit"`
	// house_participation_fee is the % of deposit to be paid for house participation by the user
	HouseParticipationFee github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=house_participation_fee,json=houseParticipationFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"house_participation_fee"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ac648d293874eae, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMinimumDeposit() uint64 {
	if m != nil {
		return m.MinimumDeposit
	}
	return 0
}

// Deposit represents the deposit against a sport event held by an account.
type Deposit struct {
	// depositor_address is the bech32-encoded address of the depositor.
	DepositorAddress string `protobuf:"bytes,1,opt,name=depositor_address,json=depositorAddress,proto3" json:"depositor_address,omitempty" yaml:"depositor_address"`
	// sport_event_uid is the uid of sport event against which deposit is being made.
	SportEventUID string `protobuf:"bytes,2,opt,name=sport_event_uid,json=sportEventUID,proto3" json:"sportEventUID"`
	// amount is the amount being deposited.
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount" yaml:"amount"`
	// fee is deducted from amount at the point of deposit.
	Fee github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=fee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"fee" yaml:"fee"`
	// liquidity is the liquidity being provided to the house after fee deduction.
	Liquidity github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=liquidity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"liquidity" yaml:"liquidity"`
	// id corresponding to the book participant
	ParticipantID uint64 `protobuf:"varint,6,opt,name=participant_id,json=participantID,proto3" json:"participantID"`
	// withdrawals
	Withdrawals uint64 `protobuf:"varint,7,opt,name=withdrawals,proto3" json:"withdrawals,omitempty" yaml:"withdrawals"`
	// total_withdrawal_amount
	TotalWithdrawalAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,8,opt,name=total_withdrawal_amount,json=totalWithdrawalAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_withdrawal_amount" yaml:"total_withdrawal_amount"`
}

func (m *Deposit) Reset()      { *m = Deposit{} }
func (*Deposit) ProtoMessage() {}
func (*Deposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ac648d293874eae, []int{1}
}
func (m *Deposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Deposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Deposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Deposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deposit.Merge(m, src)
}
func (m *Deposit) XXX_Size() int {
	return m.Size()
}
func (m *Deposit) XXX_DiscardUnknown() {
	xxx_messageInfo_Deposit.DiscardUnknown(m)
}

var xxx_messageInfo_Deposit proto.InternalMessageInfo

// Withdrawal represents the withdrawal against a deposit.
type Withdrawal struct {
	// depositor_address is the bech32-encoded address of the depositor.
	DepositorAddress string `protobuf:"bytes,1,opt,name=depositor_address,json=depositorAddress,proto3" json:"depositor_address,omitempty" yaml:"depositor_address"`
	// sport_event_uid is the uid of sport event against which deposit is being made.
	SportEventUID string `protobuf:"bytes,2,opt,name=sport_event_uid,json=sportEventUID,proto3" json:"sportEventUID"`
	// id corresponding to the book participant
	ParticipantID uint64 `protobuf:"varint,3,opt,name=participant_id,json=participantID,proto3" json:"participantID"`
	// withdrawal number is the number of withdrawal against the deposit
	WithdrawalNumber uint64         `protobuf:"varint,4,opt,name=withdrawal_number,json=withdrawalNumber,proto3" json:"withdrawal_number,omitempty" yaml:"withdrawal_number"`
	Mode             WithdrawalMode `protobuf:"varint,5,opt,name=mode,proto3,enum=sgenetwork.sge.house.WithdrawalMode" json:"mode,omitempty" yaml:"mode"`
	// amount is the amount being withdrawan.
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount" yaml:"amount"`
}

func (m *Withdrawal) Reset()      { *m = Withdrawal{} }
func (*Withdrawal) ProtoMessage() {}
func (*Withdrawal) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ac648d293874eae, []int{2}
}
func (m *Withdrawal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Withdrawal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Withdrawal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Withdrawal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Withdrawal.Merge(m, src)
}
func (m *Withdrawal) XXX_Size() int {
	return m.Size()
}
func (m *Withdrawal) XXX_DiscardUnknown() {
	xxx_messageInfo_Withdrawal.DiscardUnknown(m)
}

var xxx_messageInfo_Withdrawal proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("sgenetwork.sge.house.WithdrawalMode", WithdrawalMode_name, WithdrawalMode_value)
	proto.RegisterType((*Params)(nil), "sgenetwork.sge.house.Params")
	proto.RegisterType((*Deposit)(nil), "sgenetwork.sge.house.Deposit")
	proto.RegisterType((*Withdrawal)(nil), "sgenetwork.sge.house.Withdrawal")
}

func init() { proto.RegisterFile("sge/house/house.proto", fileDescriptor_7ac648d293874eae) }

var fileDescriptor_7ac648d293874eae = []byte{
	// 693 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x95, 0x4f, 0x4f, 0xdb, 0x48,
	0x18, 0xc6, 0x6d, 0x12, 0x02, 0x0c, 0x4b, 0x08, 0x23, 0xfe, 0x58, 0xb0, 0x8a, 0xd1, 0x68, 0xb5,
	0x42, 0x2b, 0xe1, 0x48, 0xdb, 0x4b, 0x85, 0x2a, 0x55, 0x31, 0x09, 0xaa, 0xab, 0x40, 0xa3, 0x01,
	0x14, 0xa9, 0x17, 0xd7, 0xc4, 0x83, 0x63, 0x11, 0x7b, 0x5c, 0xcf, 0xb8, 0x94, 0x6f, 0xc0, 0xb1,
	0xc7, 0x1e, 0xf9, 0x26, 0xbd, 0xd2, 0x1b, 0xc7, 0xaa, 0x07, 0xab, 0x0a, 0x97, 0xaa, 0xbd, 0xe5,
	0x13, 0x54, 0x19, 0xbb, 0x89, 0x03, 0xed, 0x21, 0x55, 0x0f, 0xbd, 0x24, 0xf6, 0xf3, 0x3e, 0xfa,
	0xcd, 0x3c, 0xef, 0xbc, 0xb6, 0xc1, 0x0a, 0x73, 0x48, 0xa5, 0x43, 0x23, 0x96, 0xfe, 0x6a, 0x41,
	0x48, 0x39, 0x85, 0xcb, 0xcc, 0x21, 0x3e, 0xe1, 0xe7, 0x34, 0x3c, 0xd3, 0x98, 0x43, 0x34, 0x51,
	0x5b, 0x5f, 0x76, 0xa8, 0x43, 0x85, 0xa1, 0x32, 0xb8, 0x4a, 0xbc, 0xe8, 0x9d, 0x0c, 0x0a, 0x4d,
	0x2b, 0xb4, 0x3c, 0x06, 0x77, 0xc1, 0xa2, 0xe7, 0xfa, 0xae, 0x17, 0x79, 0xa6, 0x4d, 0x02, 0xca,
	0x5c, 0xae, 0xc8, 0x9b, 0xf2, 0x56, 0x5e, 0x5f, 0xef, 0xc7, 0xea, 0xea, 0x85, 0xe5, 0x75, 0x77,
	0xd0, 0x1d, 0x03, 0xc2, 0xc5, 0x54, 0xa9, 0x25, 0x02, 0x3c, 0x05, 0x6b, 0x62, 0x39, 0x33, 0xb0,
	0x42, 0xee, 0xb6, 0xdd, 0xc0, 0xe2, 0x2e, 0xf5, 0xcd, 0x53, 0x42, 0x94, 0xa9, 0x4d, 0x79, 0x6b,
	0x4e, 0xd7, 0xae, 0x63, 0x55, 0xfa, 0x18, 0xab, 0xff, 0x3a, 0x2e, 0xef, 0x44, 0x27, 0x5a, 0x9b,
	0x7a, 0x95, 0x36, 0x65, 0x1e, 0x65, 0xe9, 0xdf, 0x36, 0xb3, 0xcf, 0x2a, 0xfc, 0x22, 0x20, 0x4c,
	0xab, 0x91, 0x36, 0x5e, 0x11, 0xb8, 0x66, 0x96, 0xb6, 0x47, 0xc8, 0xce, 0xec, 0xdb, 0x2b, 0x55,
	0xfa, 0x7c, 0xa5, 0xca, 0xe8, 0xfd, 0x34, 0x98, 0xf9, 0xbe, 0xba, 0x01, 0x96, 0xd2, 0x9d, 0xd1,
	0xd0, 0xb4, 0x6c, 0x3b, 0x24, 0x8c, 0x89, 0x10, 0x73, 0xfa, 0xdf, 0xfd, 0x58, 0x55, 0x92, 0x10,
	0xf7, 0x2c, 0x08, 0x97, 0x86, 0x5a, 0x35, 0x91, 0xe0, 0x53, 0xb0, 0xc8, 0x02, 0x1a, 0x72, 0x93,
	0xbc, 0x22, 0x3e, 0x37, 0x23, 0xd7, 0x4e, 0x03, 0xa0, 0x5e, 0xac, 0x2e, 0x1c, 0x0e, 0x4a, 0xf5,
	0x41, 0xe5, 0xd8, 0xa8, 0x7d, 0x89, 0xd5, 0x05, 0x96, 0x15, 0xf0, 0xf8, 0x2d, 0x6c, 0x81, 0x82,
	0xe5, 0xd1, 0xc8, 0xe7, 0x4a, 0x4e, 0x20, 0x1e, 0x4f, 0xd0, 0x03, 0xc3, 0xe7, 0xfd, 0x58, 0x5d,
	0x48, 0x76, 0x9e, 0x50, 0x10, 0x4e, 0x71, 0xf0, 0x00, 0xe4, 0x06, 0x9d, 0xcd, 0x0b, 0xea, 0xa3,
	0x89, 0xa9, 0x20, 0xa1, 0x9e, 0x12, 0x82, 0xf0, 0x00, 0x04, 0x5f, 0x80, 0xb9, 0xae, 0xfb, 0x32,
	0x72, 0x6d, 0x97, 0x5f, 0x28, 0xd3, 0x82, 0xaa, 0x4f, 0x4c, 0x2d, 0x25, 0xd4, 0x21, 0x08, 0xe1,
	0x11, 0x14, 0x1a, 0xa0, 0x38, 0x9c, 0x0c, 0x9f, 0x9b, 0xae, 0xad, 0x14, 0xc4, 0x8c, 0x89, 0xae,
	0x36, 0x47, 0x95, 0xa4, 0xab, 0x41, 0x56, 0xc0, 0xe3, 0xb7, 0xf0, 0x21, 0x98, 0x3f, 0x77, 0x79,
	0xc7, 0x0e, 0xad, 0x73, 0xab, 0xcb, 0x94, 0x19, 0xc1, 0x59, 0xed, 0xc7, 0x2a, 0x4c, 0x36, 0x90,
	0x29, 0x22, 0x9c, 0xb5, 0xc2, 0x4b, 0x19, 0xac, 0x71, 0xca, 0xad, 0xae, 0x39, 0x52, 0xcd, 0xf4,
	0x84, 0x66, 0x45, 0xea, 0xe6, 0xc4, 0xa9, 0xcb, 0xc9, 0xa2, 0x3f, 0xc1, 0x22, 0xbc, 0x22, 0x2a,
	0xad, 0x61, 0xa1, 0x2a, 0xf4, 0x9d, 0xbf, 0x2e, 0xaf, 0x54, 0x29, 0x9d, 0x65, 0x09, 0x7d, 0xcd,
	0x01, 0x30, 0xb2, 0xfc, 0xa9, 0xe3, 0x7c, 0xff, 0x0c, 0x73, 0xbf, 0x7a, 0x86, 0x06, 0x58, 0xca,
	0xf4, 0xca, 0x8f, 0xbc, 0x13, 0x12, 0x8a, 0x71, 0xce, 0x67, 0x13, 0xde, 0xb3, 0x20, 0x5c, 0x1a,
	0x69, 0x07, 0x42, 0x82, 0x06, 0xc8, 0x7b, 0xd4, 0x26, 0x62, 0x6c, 0x8b, 0xff, 0xff, 0xa3, 0xfd,
	0xe8, 0x25, 0xa8, 0x8d, 0x9a, 0xbb, 0x4f, 0x6d, 0xa2, 0x2f, 0xf6, 0x63, 0x75, 0x3e, 0x7d, 0xb3,
	0x51, 0x9b, 0x20, 0x2c, 0x10, 0x99, 0xe7, 0xb5, 0xf0, 0x5b, 0x9f, 0xd7, 0xf1, 0xd3, 0xfe, 0xaf,
	0x03, 0x8a, 0xe3, 0xfb, 0x81, 0x2a, 0xd8, 0x68, 0x19, 0x47, 0x4f, 0x6a, 0xb8, 0xda, 0xaa, 0x36,
	0xcc, 0xfd, 0x67, 0xb5, 0xba, 0x79, 0x7c, 0x70, 0xd8, 0xac, 0xef, 0x1a, 0x7b, 0x46, 0xbd, 0x56,
	0x92, 0xa0, 0x02, 0x96, 0xef, 0x1a, 0xf6, 0x8e, 0x1b, 0x8d, 0x92, 0x0c, 0x37, 0xc0, 0xda, 0xdd,
	0x4a, 0xb3, 0x8a, 0x8f, 0x8c, 0x6a, 0xa3, 0x34, 0xa5, 0xeb, 0xd7, 0xbd, 0xb2, 0x7c, 0xd3, 0x2b,
	0xcb, 0x9f, 0x7a, 0x65, 0xf9, 0xcd, 0x6d, 0x59, 0xba, 0xb9, 0x2d, 0x4b, 0x1f, 0x6e, 0xcb, 0xd2,
	0xf3, 0xad, 0x4c, 0x24, 0xe6, 0x90, 0xed, 0xb4, 0x65, 0x83, 0xeb, 0xca, 0xeb, 0xf4, 0xdb, 0x22,
	0x82, 0x9d, 0x14, 0xc4, 0x07, 0xe3, 0xc1, 0xb7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9d, 0x86, 0xc1,
	0xb7, 0x75, 0x06, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinimumDeposit != that1.MinimumDeposit {
		return false
	}
	if !this.HouseParticipationFee.Equal(that1.HouseParticipationFee) {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.HouseParticipationFee.Size()
		i -= size
		if _, err := m.HouseParticipationFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintHouse(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.MinimumDeposit != 0 {
		i = encodeVarintHouse(dAtA, i, uint64(m.MinimumDeposit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Deposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Deposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Deposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalWithdrawalAmount.Size()
		i -= size
		if _, err := m.TotalWithdrawalAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintHouse(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.Withdrawals != 0 {
		i = encodeVarintHouse(dAtA, i, uint64(m.Withdrawals))
		i--
		dAtA[i] = 0x38
	}
	if m.ParticipantID != 0 {
		i = encodeVarintHouse(dAtA, i, uint64(m.ParticipantID))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.Liquidity.Size()
		i -= size
		if _, err := m.Liquidity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintHouse(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Fee.Size()
		i -= size
		if _, err := m.Fee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintHouse(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintHouse(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.SportEventUID) > 0 {
		i -= len(m.SportEventUID)
		copy(dAtA[i:], m.SportEventUID)
		i = encodeVarintHouse(dAtA, i, uint64(len(m.SportEventUID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DepositorAddress) > 0 {
		i -= len(m.DepositorAddress)
		copy(dAtA[i:], m.DepositorAddress)
		i = encodeVarintHouse(dAtA, i, uint64(len(m.DepositorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Withdrawal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Withdrawal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Withdrawal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintHouse(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.Mode != 0 {
		i = encodeVarintHouse(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x28
	}
	if m.WithdrawalNumber != 0 {
		i = encodeVarintHouse(dAtA, i, uint64(m.WithdrawalNumber))
		i--
		dAtA[i] = 0x20
	}
	if m.ParticipantID != 0 {
		i = encodeVarintHouse(dAtA, i, uint64(m.ParticipantID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SportEventUID) > 0 {
		i -= len(m.SportEventUID)
		copy(dAtA[i:], m.SportEventUID)
		i = encodeVarintHouse(dAtA, i, uint64(len(m.SportEventUID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DepositorAddress) > 0 {
		i -= len(m.DepositorAddress)
		copy(dAtA[i:], m.DepositorAddress)
		i = encodeVarintHouse(dAtA, i, uint64(len(m.DepositorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintHouse(dAtA []byte, offset int, v uint64) int {
	offset -= sovHouse(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinimumDeposit != 0 {
		n += 1 + sovHouse(uint64(m.MinimumDeposit))
	}
	l = m.HouseParticipationFee.Size()
	n += 1 + l + sovHouse(uint64(l))
	return n
}

func (m *Deposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DepositorAddress)
	if l > 0 {
		n += 1 + l + sovHouse(uint64(l))
	}
	l = len(m.SportEventUID)
	if l > 0 {
		n += 1 + l + sovHouse(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovHouse(uint64(l))
	l = m.Fee.Size()
	n += 1 + l + sovHouse(uint64(l))
	l = m.Liquidity.Size()
	n += 1 + l + sovHouse(uint64(l))
	if m.ParticipantID != 0 {
		n += 1 + sovHouse(uint64(m.ParticipantID))
	}
	if m.Withdrawals != 0 {
		n += 1 + sovHouse(uint64(m.Withdrawals))
	}
	l = m.TotalWithdrawalAmount.Size()
	n += 1 + l + sovHouse(uint64(l))
	return n
}

func (m *Withdrawal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DepositorAddress)
	if l > 0 {
		n += 1 + l + sovHouse(uint64(l))
	}
	l = len(m.SportEventUID)
	if l > 0 {
		n += 1 + l + sovHouse(uint64(l))
	}
	if m.ParticipantID != 0 {
		n += 1 + sovHouse(uint64(m.ParticipantID))
	}
	if m.WithdrawalNumber != 0 {
		n += 1 + sovHouse(uint64(m.WithdrawalNumber))
	}
	if m.Mode != 0 {
		n += 1 + sovHouse(uint64(m.Mode))
	}
	l = m.Amount.Size()
	n += 1 + l + sovHouse(uint64(l))
	return n
}

func sovHouse(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHouse(x uint64) (n int) {
	return sovHouse(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHouse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumDeposit", wireType)
			}
			m.MinimumDeposit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinimumDeposit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HouseParticipationFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHouse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHouse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HouseParticipationFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHouse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHouse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Deposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHouse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Deposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Deposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHouse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHouse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SportEventUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHouse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHouse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SportEventUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHouse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHouse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHouse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHouse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHouse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHouse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Liquidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantID", wireType)
			}
			m.ParticipantID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdrawals", wireType)
			}
			m.Withdrawals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Withdrawals |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalWithdrawalAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHouse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHouse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalWithdrawalAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHouse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHouse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Withdrawal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHouse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Withdrawal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Withdrawal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHouse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHouse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SportEventUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHouse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHouse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SportEventUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantID", wireType)
			}
			m.ParticipantID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalNumber", wireType)
			}
			m.WithdrawalNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawalNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= WithdrawalMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHouse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHouse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHouse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHouse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHouse(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHouse
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHouse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHouse
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHouse
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHouse
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHouse        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHouse          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHouse = fmt.Errorf("proto: unexpected end of group")
)
