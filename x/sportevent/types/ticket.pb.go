// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sge/sportevent/ticket.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SportEventUpdateTicketPayload indicates data of update sportevent ticket
type SportEventUpdateTicketPayload struct {
	// uid is the uuid of the sport-event
	UID string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid"`
	// start_ts is the start timestamp of the sport-event
	StartTS uint64 `protobuf:"varint,2,opt,name=start_ts,proto3" json:"start_ts"`
	// end_ts is the end timestamp of the sport-event
	EndTS uint64 `protobuf:"varint,3,opt,name=end_ts,proto3" json:"end_ts"`
	// bet_constraints holds the constraints of sport-event to accept bets
	BetConstraints *EventBetConstraints `protobuf:"bytes,4,opt,name=bet_constraints,json=betConstraints,proto3" json:"bet_constraints,omitempty"`
	// active is the status of active or inactive sport-event
	Active bool `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
}

func (m *SportEventUpdateTicketPayload) Reset()         { *m = SportEventUpdateTicketPayload{} }
func (m *SportEventUpdateTicketPayload) String() string { return proto.CompactTextString(m) }
func (*SportEventUpdateTicketPayload) ProtoMessage()    {}
func (*SportEventUpdateTicketPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7e970e0fce71fcc, []int{0}
}
func (m *SportEventUpdateTicketPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SportEventUpdateTicketPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SportEventUpdateTicketPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SportEventUpdateTicketPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SportEventUpdateTicketPayload.Merge(m, src)
}
func (m *SportEventUpdateTicketPayload) XXX_Size() int {
	return m.Size()
}
func (m *SportEventUpdateTicketPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_SportEventUpdateTicketPayload.DiscardUnknown(m)
}

var xxx_messageInfo_SportEventUpdateTicketPayload proto.InternalMessageInfo

func (m *SportEventUpdateTicketPayload) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *SportEventUpdateTicketPayload) GetStartTS() uint64 {
	if m != nil {
		return m.StartTS
	}
	return 0
}

func (m *SportEventUpdateTicketPayload) GetEndTS() uint64 {
	if m != nil {
		return m.EndTS
	}
	return 0
}

func (m *SportEventUpdateTicketPayload) GetBetConstraints() *EventBetConstraints {
	if m != nil {
		return m.BetConstraints
	}
	return nil
}

func (m *SportEventUpdateTicketPayload) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

// SportEventResolutionTicketPayload indicates data of resolution of sportevent.
// ticket
type SportEventResolutionTicketPayload struct {
	// uid is the universal unique identifier of sport-event.
	UID string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid"`
	// resolution_ts is the resolution timestamp of the sport-event.
	ResolutionTS uint64 `protobuf:"varint,2,opt,name=resolution_ts,proto3" json:"resolution_ts"`
	// winner_odds_uids is the universal unique identifier list of the winner odds.
	WinnerOddsUIDs []string `protobuf:"bytes,3,rep,name=winner_odds_uids,proto3" json:"winner_odds_uids"`
	// status is the status of the resolution.
	Status SportEventStatus `protobuf:"varint,4,opt,name=status,proto3,enum=sgenetwork.sge.sportevent.SportEventStatus" json:"status,omitempty"`
}

func (m *SportEventResolutionTicketPayload) Reset()         { *m = SportEventResolutionTicketPayload{} }
func (m *SportEventResolutionTicketPayload) String() string { return proto.CompactTextString(m) }
func (*SportEventResolutionTicketPayload) ProtoMessage()    {}
func (*SportEventResolutionTicketPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7e970e0fce71fcc, []int{1}
}
func (m *SportEventResolutionTicketPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SportEventResolutionTicketPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SportEventResolutionTicketPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SportEventResolutionTicketPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SportEventResolutionTicketPayload.Merge(m, src)
}
func (m *SportEventResolutionTicketPayload) XXX_Size() int {
	return m.Size()
}
func (m *SportEventResolutionTicketPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_SportEventResolutionTicketPayload.DiscardUnknown(m)
}

var xxx_messageInfo_SportEventResolutionTicketPayload proto.InternalMessageInfo

func (m *SportEventResolutionTicketPayload) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *SportEventResolutionTicketPayload) GetResolutionTS() uint64 {
	if m != nil {
		return m.ResolutionTS
	}
	return 0
}

func (m *SportEventResolutionTicketPayload) GetWinnerOddsUIDs() []string {
	if m != nil {
		return m.WinnerOddsUIDs
	}
	return nil
}

func (m *SportEventResolutionTicketPayload) GetStatus() SportEventStatus {
	if m != nil {
		return m.Status
	}
	return SportEventStatus_SPORT_EVENT_STATUS_UNSPECIFIED
}

func init() {
	proto.RegisterType((*SportEventUpdateTicketPayload)(nil), "sgenetwork.sge.sportevent.SportEventUpdateTicketPayload")
	proto.RegisterType((*SportEventResolutionTicketPayload)(nil), "sgenetwork.sge.sportevent.SportEventResolutionTicketPayload")
}

func init() { proto.RegisterFile("sge/sportevent/ticket.proto", fileDescriptor_b7e970e0fce71fcc) }

var fileDescriptor_b7e970e0fce71fcc = []byte{
	// 443 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xe3, 0xa4, 0x0d, 0xed, 0x02, 0x01, 0x19, 0x04, 0xa1, 0x08, 0xdb, 0xed, 0x01, 0x59,
	0xaa, 0x6a, 0x4b, 0xed, 0x1b, 0xb8, 0xad, 0xaa, 0x9e, 0x40, 0x9b, 0x46, 0x95, 0xb8, 0x58, 0x4e,
	0x76, 0x64, 0xac, 0x96, 0xdd, 0xc8, 0x3b, 0x6e, 0xe9, 0x5b, 0x70, 0xe0, 0x1d, 0x78, 0x15, 0x8e,
	0x3d, 0x72, 0x5a, 0xa1, 0xcd, 0x2d, 0x4f, 0x81, 0x76, 0x63, 0xc5, 0x98, 0x08, 0x24, 0x2e, 0xf6,
	0x3f, 0x33, 0xff, 0xb7, 0xab, 0xfd, 0x35, 0xe4, 0xb5, 0xcc, 0x21, 0x96, 0x33, 0x51, 0x22, 0xdc,
	0x00, 0xc7, 0x18, 0x8b, 0xe9, 0x15, 0x60, 0x34, 0x2b, 0x05, 0x0a, 0xf7, 0x95, 0xcc, 0x81, 0x03,
	0xde, 0x8a, 0xf2, 0x2a, 0x92, 0x39, 0x44, 0x8d, 0x6f, 0x27, 0xf8, 0x83, 0xb3, 0x32, 0xb5, 0x7a,
	0x09, 0xef, 0x3c, 0xcf, 0x45, 0x2e, 0xac, 0x8c, 0x8d, 0x5a, 0x76, 0xf7, 0xbe, 0x76, 0xc9, 0x9b,
	0x91, 0xf1, 0x9e, 0x1a, 0xeb, 0x78, 0xc6, 0x32, 0x84, 0x0b, 0x7b, 0xe7, 0xfb, 0xec, 0xee, 0x5a,
	0x64, 0xcc, 0x0d, 0x48, 0xaf, 0x2a, 0xd8, 0xd0, 0x09, 0x9c, 0x70, 0x3b, 0x19, 0x68, 0xe5, 0xf7,
	0xc6, 0xe7, 0x27, 0x0b, 0xe5, 0x9b, 0x2e, 0x35, 0x1f, 0xf7, 0x88, 0x6c, 0x49, 0xcc, 0x4a, 0x4c,
	0x51, 0x0e, 0xbb, 0x81, 0x13, 0x6e, 0x24, 0x2f, 0xb5, 0xf2, 0x1f, 0x8c, 0x4c, 0xef, 0x62, 0xb4,
	0x50, 0xfe, 0x6a, 0x4c, 0x57, 0xca, 0xdd, 0x27, 0x7d, 0xe0, 0xcc, 0x20, 0x3d, 0x8b, 0x3c, 0xd3,
	0xca, 0xdf, 0x3c, 0xe5, 0xcc, 0x02, 0xf5, 0x88, 0xd6, 0x7f, 0xf7, 0x92, 0x3c, 0x99, 0x00, 0xa6,
	0x53, 0xc1, 0x25, 0x96, 0x59, 0xc1, 0x51, 0x0e, 0x37, 0x02, 0x27, 0x7c, 0x78, 0x18, 0x45, 0x7f,
	0x8d, 0x24, 0xb2, 0x2f, 0x4a, 0x00, 0x8f, 0x1b, 0x8a, 0x0e, 0x26, 0xad, 0xda, 0x7d, 0x41, 0xfa,
	0xd9, 0x14, 0x8b, 0x1b, 0x18, 0x6e, 0x06, 0x4e, 0xb8, 0x45, 0xeb, 0x6a, 0xef, 0x5b, 0x97, 0xec,
	0x36, 0xb1, 0x50, 0x90, 0xe2, 0xba, 0xc2, 0x42, 0xf0, 0xff, 0x8d, 0xe6, 0x8c, 0x3c, 0x2e, 0x57,
	0x70, 0x93, 0xcf, 0xae, 0x56, 0xfe, 0xa3, 0xdf, 0x4e, 0x35, 0x6f, 0x6e, 0x1b, 0x69, 0xbb, 0x74,
	0x29, 0x79, 0x7a, 0x5b, 0x70, 0x0e, 0x65, 0x2a, 0x18, 0x93, 0x69, 0x55, 0x30, 0x13, 0x5c, 0x2f,
	0xdc, 0x4e, 0xde, 0x6a, 0xe5, 0x0f, 0x2e, 0xed, 0xec, 0x1d, 0x63, 0x72, 0x7c, 0x7e, 0x22, 0x17,
	0xca, 0x5f, 0x73, 0xd3, 0xb5, 0x8e, 0x7b, 0x4c, 0xfa, 0x12, 0x33, 0xac, 0x96, 0x61, 0x0e, 0x0e,
	0xf7, 0xff, 0x11, 0x66, 0x13, 0xc6, 0xc8, 0x22, 0xb4, 0x46, 0x93, 0xb3, 0xef, 0xda, 0x73, 0xee,
	0xb5, 0xe7, 0xfc, 0xd4, 0x9e, 0xf3, 0x65, 0xee, 0x75, 0xee, 0xe7, 0x5e, 0xe7, 0xc7, 0xdc, 0xeb,
	0x7c, 0x38, 0xc8, 0x0b, 0xfc, 0x58, 0x4d, 0xa2, 0xa9, 0xf8, 0x14, 0xcb, 0x1c, 0x0e, 0xea, 0x93,
	0x8d, 0x8e, 0x3f, 0xb7, 0x76, 0xfc, 0x6e, 0x06, 0x72, 0xd2, 0xb7, 0x0b, 0x79, 0xf4, 0x2b, 0x00,
	0x00, 0xff, 0xff, 0xa9, 0xda, 0x43, 0x1a, 0x02, 0x03, 0x00, 0x00,
}

func (m *SportEventUpdateTicketPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SportEventUpdateTicketPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SportEventUpdateTicketPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.BetConstraints != nil {
		{
			size, err := m.BetConstraints.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTicket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.EndTS != 0 {
		i = encodeVarintTicket(dAtA, i, uint64(m.EndTS))
		i--
		dAtA[i] = 0x18
	}
	if m.StartTS != 0 {
		i = encodeVarintTicket(dAtA, i, uint64(m.StartTS))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UID) > 0 {
		i -= len(m.UID)
		copy(dAtA[i:], m.UID)
		i = encodeVarintTicket(dAtA, i, uint64(len(m.UID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SportEventResolutionTicketPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SportEventResolutionTicketPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SportEventResolutionTicketPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintTicket(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.WinnerOddsUIDs) > 0 {
		for iNdEx := len(m.WinnerOddsUIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.WinnerOddsUIDs[iNdEx])
			copy(dAtA[i:], m.WinnerOddsUIDs[iNdEx])
			i = encodeVarintTicket(dAtA, i, uint64(len(m.WinnerOddsUIDs[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ResolutionTS != 0 {
		i = encodeVarintTicket(dAtA, i, uint64(m.ResolutionTS))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UID) > 0 {
		i -= len(m.UID)
		copy(dAtA[i:], m.UID)
		i = encodeVarintTicket(dAtA, i, uint64(len(m.UID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTicket(dAtA []byte, offset int, v uint64) int {
	offset -= sovTicket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SportEventUpdateTicketPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UID)
	if l > 0 {
		n += 1 + l + sovTicket(uint64(l))
	}
	if m.StartTS != 0 {
		n += 1 + sovTicket(uint64(m.StartTS))
	}
	if m.EndTS != 0 {
		n += 1 + sovTicket(uint64(m.EndTS))
	}
	if m.BetConstraints != nil {
		l = m.BetConstraints.Size()
		n += 1 + l + sovTicket(uint64(l))
	}
	if m.Active {
		n += 2
	}
	return n
}

func (m *SportEventResolutionTicketPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UID)
	if l > 0 {
		n += 1 + l + sovTicket(uint64(l))
	}
	if m.ResolutionTS != 0 {
		n += 1 + sovTicket(uint64(m.ResolutionTS))
	}
	if len(m.WinnerOddsUIDs) > 0 {
		for _, s := range m.WinnerOddsUIDs {
			l = len(s)
			n += 1 + l + sovTicket(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovTicket(uint64(m.Status))
	}
	return n
}

func sovTicket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTicket(x uint64) (n int) {
	return sovTicket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SportEventUpdateTicketPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTicket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SportEventUpdateTicketPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SportEventUpdateTicketPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTicket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTicket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTS", wireType)
			}
			m.StartTS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTS |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTS", wireType)
			}
			m.EndTS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTS |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetConstraints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTicket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTicket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BetConstraints == nil {
				m.BetConstraints = &EventBetConstraints{}
			}
			if err := m.BetConstraints.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTicket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTicket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SportEventResolutionTicketPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTicket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SportEventResolutionTicketPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SportEventResolutionTicketPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTicket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTicket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolutionTS", wireType)
			}
			m.ResolutionTS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResolutionTS |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinnerOddsUIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTicket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTicket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WinnerOddsUIDs = append(m.WinnerOddsUIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SportEventStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTicket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTicket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTicket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTicket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTicket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTicket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTicket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTicket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTicket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTicket = fmt.Errorf("proto: unexpected end of group")
)
