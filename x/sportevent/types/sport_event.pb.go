// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sge/sportevent/sport_event.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SportEventStatus int32

const (
	SportEventStatus_STATUS_PENDING         SportEventStatus = 0
	SportEventStatus_STATUS_INVALID         SportEventStatus = 1
	SportEventStatus_STATUS_CANCELLED       SportEventStatus = 2
	SportEventStatus_STATUS_ABORTED         SportEventStatus = 3
	SportEventStatus_STATUS_RESULT_DECLARED SportEventStatus = 4
)

var SportEventStatus_name = map[int32]string{
	0: "STATUS_PENDING",
	1: "STATUS_INVALID",
	2: "STATUS_CANCELLED",
	3: "STATUS_ABORTED",
	4: "STATUS_RESULT_DECLARED",
}

var SportEventStatus_value = map[string]int32{
	"STATUS_PENDING":         0,
	"STATUS_INVALID":         1,
	"STATUS_CANCELLED":       2,
	"STATUS_ABORTED":         3,
	"STATUS_RESULT_DECLARED": 4,
}

func (x SportEventStatus) String() string {
	return proto.EnumName(SportEventStatus_name, int32(x))
}

func (SportEventStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f4c38f73099259f8, []int{0}
}

// the internal keeper representation of sport event
type SportEvent struct {
	UID            string               `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid"`
	StartTS        uint64               `protobuf:"varint,2,opt,name=start_ts,proto3" json:"start_ts"`
	EndTS          uint64               `protobuf:"varint,3,opt,name=end_ts,proto3" json:"end_ts"`
	OddsUIDs       []string             `protobuf:"bytes,4,rep,name=odds_uids,proto3" json:"odds_uids"`
	WinnerOddsUIDs []string             `protobuf:"bytes,5,rep,name=winner_odds_uids,proto3" json:"winner_odds_uids"`
	Status         SportEventStatus     `protobuf:"varint,6,opt,name=status,proto3,enum=sgenetwork.sge.sportevent.SportEventStatus" json:"status,omitempty"`
	ResolutionTS   uint64               `protobuf:"varint,7,opt,name=resolution_ts,proto3" json:"resolution_ts"`
	Creator        string               `protobuf:"bytes,8,opt,name=creator,proto3" json:"creator,omitempty"`
	BetConstraints *EventBetConstraints `protobuf:"bytes,9,opt,name=betConstraints,proto3" json:"betConstraints,omitempty"`
	Active         bool                 `protobuf:"varint,10,opt,name=active,proto3" json:"active,omitempty"`
}

func (m *SportEvent) Reset()         { *m = SportEvent{} }
func (m *SportEvent) String() string { return proto.CompactTextString(m) }
func (*SportEvent) ProtoMessage()    {}
func (*SportEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4c38f73099259f8, []int{0}
}
func (m *SportEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SportEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SportEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SportEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SportEvent.Merge(m, src)
}
func (m *SportEvent) XXX_Size() int {
	return m.Size()
}
func (m *SportEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_SportEvent.DiscardUnknown(m)
}

var xxx_messageInfo_SportEvent proto.InternalMessageInfo

func (m *SportEvent) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *SportEvent) GetStartTS() uint64 {
	if m != nil {
		return m.StartTS
	}
	return 0
}

func (m *SportEvent) GetEndTS() uint64 {
	if m != nil {
		return m.EndTS
	}
	return 0
}

func (m *SportEvent) GetOddsUIDs() []string {
	if m != nil {
		return m.OddsUIDs
	}
	return nil
}

func (m *SportEvent) GetWinnerOddsUIDs() []string {
	if m != nil {
		return m.WinnerOddsUIDs
	}
	return nil
}

func (m *SportEvent) GetStatus() SportEventStatus {
	if m != nil {
		return m.Status
	}
	return SportEventStatus_STATUS_PENDING
}

func (m *SportEvent) GetResolutionTS() uint64 {
	if m != nil {
		return m.ResolutionTS
	}
	return 0
}

func (m *SportEvent) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *SportEvent) GetBetConstraints() *EventBetConstraints {
	if m != nil {
		return m.BetConstraints
	}
	return nil
}

func (m *SportEvent) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type ResolutionEvent struct {
	UID            string           `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid"`
	ResolutionTS   uint64           `protobuf:"varint,2,opt,name=resolution_ts,proto3" json:"resolution_ts"`
	WinnerOddsUIDs []string         `protobuf:"bytes,3,rep,name=winner_odds_uids,proto3" json:"winner_odds_uids"`
	Status         SportEventStatus `protobuf:"varint,4,opt,name=status,proto3,enum=sgenetwork.sge.sportevent.SportEventStatus" json:"status,omitempty"`
}

func (m *ResolutionEvent) Reset()         { *m = ResolutionEvent{} }
func (m *ResolutionEvent) String() string { return proto.CompactTextString(m) }
func (*ResolutionEvent) ProtoMessage()    {}
func (*ResolutionEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4c38f73099259f8, []int{1}
}
func (m *ResolutionEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolutionEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolutionEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResolutionEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolutionEvent.Merge(m, src)
}
func (m *ResolutionEvent) XXX_Size() int {
	return m.Size()
}
func (m *ResolutionEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolutionEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ResolutionEvent proto.InternalMessageInfo

func (m *ResolutionEvent) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *ResolutionEvent) GetResolutionTS() uint64 {
	if m != nil {
		return m.ResolutionTS
	}
	return 0
}

func (m *ResolutionEvent) GetWinnerOddsUIDs() []string {
	if m != nil {
		return m.WinnerOddsUIDs
	}
	return nil
}

func (m *ResolutionEvent) GetStatus() SportEventStatus {
	if m != nil {
		return m.Status
	}
	return SportEventStatus_STATUS_PENDING
}

// Bet constraints parent group for a sport event
type EventBetConstraints struct {
	MaxBetCap          github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=max_bet_cap,json=maxBetCap,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"max_bet_cap"`
	MinAmount          github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=min_amount,json=minAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_amount"`
	BetFee             types.Coin                             `protobuf:"bytes,3,opt,name=bet_fee,json=betFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"bet_fee"`
	MaxLoss            github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=max_loss,json=maxLoss,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"max_loss"`
	CurrentTotalAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=current_total_amount,json=currentTotalAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"current_total_amount"`
}

func (m *EventBetConstraints) Reset()         { *m = EventBetConstraints{} }
func (m *EventBetConstraints) String() string { return proto.CompactTextString(m) }
func (*EventBetConstraints) ProtoMessage()    {}
func (*EventBetConstraints) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4c38f73099259f8, []int{2}
}
func (m *EventBetConstraints) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBetConstraints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBetConstraints.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBetConstraints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBetConstraints.Merge(m, src)
}
func (m *EventBetConstraints) XXX_Size() int {
	return m.Size()
}
func (m *EventBetConstraints) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBetConstraints.DiscardUnknown(m)
}

var xxx_messageInfo_EventBetConstraints proto.InternalMessageInfo

func (m *EventBetConstraints) GetBetFee() types.Coin {
	if m != nil {
		return m.BetFee
	}
	return types.Coin{}
}

func init() {
	proto.RegisterEnum("sgenetwork.sge.sportevent.SportEventStatus", SportEventStatus_name, SportEventStatus_value)
	proto.RegisterType((*SportEvent)(nil), "sgenetwork.sge.sportevent.SportEvent")
	proto.RegisterType((*ResolutionEvent)(nil), "sgenetwork.sge.sportevent.ResolutionEvent")
	proto.RegisterType((*EventBetConstraints)(nil), "sgenetwork.sge.sportevent.EventBetConstraints")
}

func init() { proto.RegisterFile("sge/sportevent/sport_event.proto", fileDescriptor_f4c38f73099259f8) }

var fileDescriptor_f4c38f73099259f8 = []byte{
	// 739 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x4f, 0x6f, 0xd3, 0x30,
	0x14, 0x6f, 0xda, 0xae, 0x7f, 0x3c, 0x28, 0x91, 0x37, 0x8d, 0x6c, 0x87, 0x26, 0xec, 0x30, 0x2a,
	0xa6, 0x25, 0xda, 0x76, 0xe0, 0xdc, 0x36, 0x61, 0xaa, 0x54, 0x3a, 0xe4, 0xb6, 0x43, 0xe2, 0x12,
	0xd2, 0xc4, 0x94, 0x68, 0xab, 0x5d, 0xc5, 0xee, 0x56, 0x6e, 0x7c, 0x04, 0x2e, 0x7c, 0x09, 0xee,
	0x7c, 0x05, 0xb4, 0xe3, 0x8e, 0x88, 0x43, 0x40, 0xd9, 0x6d, 0x9f, 0x02, 0x39, 0xcd, 0xd6, 0xee,
	0x0f, 0x68, 0x54, 0x5c, 0xe2, 0xe7, 0xf7, 0xde, 0xef, 0xe7, 0xe7, 0xdf, 0xb3, 0x1d, 0xa0, 0xb1,
	0x3e, 0x36, 0xd8, 0x90, 0x06, 0x1c, 0x1f, 0x63, 0xc2, 0x27, 0xa6, 0x1d, 0xdb, 0xfa, 0x30, 0xa0,
	0x9c, 0xc2, 0x55, 0xd6, 0xc7, 0x04, 0xf3, 0x13, 0x1a, 0x1c, 0xea, 0xac, 0x8f, 0xf5, 0x69, 0xf2,
	0xda, 0x72, 0x9f, 0xf6, 0x69, 0x9c, 0x65, 0x08, 0x6b, 0x02, 0x58, 0x2b, 0xbb, 0x94, 0x0d, 0x28,
	0x33, 0x7a, 0x0e, 0xc3, 0xc6, 0xf1, 0x76, 0x0f, 0x73, 0x67, 0xdb, 0x70, 0xa9, 0x4f, 0x26, 0xf1,
	0xf5, 0xaf, 0x59, 0x00, 0xda, 0x82, 0xc4, 0x12, 0x24, 0x50, 0x03, 0x99, 0x91, 0xef, 0x29, 0x92,
	0x26, 0x55, 0x8a, 0xb5, 0x52, 0x14, 0xaa, 0x99, 0x6e, 0xc3, 0xbc, 0x08, 0x55, 0xe1, 0x45, 0xe2,
	0x03, 0x77, 0x41, 0x81, 0x71, 0x27, 0xe0, 0x36, 0x67, 0x4a, 0x5a, 0x93, 0x2a, 0xd9, 0xda, 0xe3,
	0x28, 0x54, 0xf3, 0x6d, 0xe1, 0xeb, 0xb4, 0x2f, 0x42, 0xf5, 0x2a, 0x8c, 0xae, 0x2c, 0xb8, 0x09,
	0x72, 0x98, 0x78, 0x02, 0x92, 0x89, 0x21, 0x4b, 0x51, 0xa8, 0x2e, 0x58, 0xc4, 0x8b, 0x01, 0x49,
	0x08, 0x25, 0x23, 0x7c, 0x0e, 0x8a, 0xd4, 0xf3, 0x98, 0x3d, 0xf2, 0x3d, 0xa6, 0x64, 0xb5, 0x4c,
	0xa5, 0x58, 0x5b, 0x8d, 0x42, 0xb5, 0xb0, 0xef, 0x79, 0xac, 0xdb, 0x30, 0xd9, 0x45, 0xa8, 0x4e,
	0x13, 0xd0, 0xd4, 0x84, 0x08, 0xc8, 0x27, 0x3e, 0x21, 0x38, 0xb0, 0xa7, 0xf8, 0x85, 0x18, 0xbf,
	0x11, 0x85, 0x6a, 0xe9, 0x75, 0x1c, 0x9b, 0x61, 0xb9, 0x95, 0x8d, 0x6e, 0x79, 0x60, 0x1d, 0xe4,
	0x18, 0x77, 0xf8, 0x88, 0x29, 0x39, 0x4d, 0xaa, 0x94, 0x76, 0x36, 0xf5, 0x3f, 0x76, 0x40, 0x9f,
	0xea, 0xd8, 0x8e, 0x21, 0x28, 0x81, 0xc2, 0x3d, 0xf0, 0x30, 0xc0, 0x8c, 0x1e, 0x8d, 0xb8, 0x4f,
	0x89, 0x50, 0x21, 0x1f, 0xab, 0xf0, 0x24, 0x0a, 0xd5, 0x07, 0xe8, 0x2a, 0x10, 0x8b, 0x71, 0x3d,
	0x11, 0x5d, 0x9f, 0x42, 0x05, 0xe4, 0xdd, 0x00, 0x3b, 0x9c, 0x06, 0x4a, 0x41, 0xb4, 0x08, 0x5d,
	0x4e, 0xe1, 0x01, 0x28, 0xf5, 0x30, 0xaf, 0x53, 0xc2, 0x78, 0xe0, 0xf8, 0x84, 0x33, 0xa5, 0xa8,
	0x49, 0x95, 0xc5, 0x1d, 0xfd, 0x2f, 0xf5, 0xc6, 0xa5, 0xd6, 0xae, 0xa1, 0xd0, 0x0d, 0x16, 0xb8,
	0x02, 0x72, 0x8e, 0xcb, 0xfd, 0x63, 0xac, 0x00, 0x4d, 0xaa, 0x14, 0x50, 0x32, 0x5b, 0xff, 0x9c,
	0x06, 0x8f, 0xa6, 0xa5, 0xdf, 0xf7, 0xf0, 0xdc, 0x12, 0x22, 0x3d, 0xa7, 0x10, 0x77, 0xb5, 0x3a,
	0xf3, 0xdf, 0x5a, 0x9d, 0x9d, 0xbb, 0xd5, 0xeb, 0xdf, 0x32, 0x60, 0xe9, 0x0e, 0x5d, 0x61, 0x0b,
	0x2c, 0x0e, 0x9c, 0xb1, 0xdd, 0xc3, 0xdc, 0x76, 0x9d, 0x61, 0xa2, 0x91, 0x7e, 0x1a, 0xaa, 0xa9,
	0x1f, 0xa1, 0xba, 0xd1, 0xf7, 0xf9, 0xfb, 0x51, 0x4f, 0x77, 0xe9, 0xc0, 0x48, 0xee, 0xeb, 0x64,
	0xd8, 0x62, 0xde, 0xa1, 0xc1, 0x3f, 0x0c, 0x31, 0xd3, 0x1b, 0x84, 0xa3, 0xe2, 0xc0, 0x19, 0x0b,
	0x5e, 0x67, 0x08, 0x5f, 0x02, 0x30, 0xf0, 0x89, 0xed, 0x0c, 0xe8, 0x88, 0xf0, 0x58, 0xc6, 0x79,
	0xe8, 0x7c, 0x52, 0x8d, 0x09, 0xa0, 0x0b, 0xf2, 0xa2, 0xb4, 0x77, 0x18, 0xc7, 0x37, 0x74, 0x71,
	0x67, 0x55, 0x9f, 0x40, 0x74, 0xf1, 0x70, 0xe8, 0xc9, 0xc3, 0xa1, 0xd7, 0xa9, 0x4f, 0x6a, 0x86,
	0x58, 0xe6, 0xcb, 0x4f, 0xf5, 0xe9, 0x3d, 0x96, 0x11, 0x00, 0x94, 0xeb, 0x61, 0xfe, 0x02, 0x63,
	0xd8, 0x00, 0x05, 0xa1, 0xc1, 0x11, 0x65, 0x13, 0x89, 0xff, 0xbd, 0xe2, 0xfc, 0xc0, 0x19, 0x37,
	0x29, 0x63, 0xf0, 0x2d, 0x58, 0x76, 0x47, 0x41, 0x80, 0x09, 0xb7, 0x39, 0xe5, 0xce, 0xd1, 0xa5,
	0x10, 0x0b, 0x73, 0xd1, 0xc2, 0x84, 0xab, 0x23, 0xa8, 0x26, 0x8a, 0x3c, 0xfb, 0x28, 0x01, 0xf9,
	0x66, 0x97, 0x21, 0x04, 0xa5, 0x76, 0xa7, 0xda, 0xe9, 0xb6, 0xed, 0x57, 0x56, 0xcb, 0x6c, 0xb4,
	0xf6, 0xe4, 0xd4, 0x8c, 0xaf, 0xd1, 0x3a, 0xa8, 0x36, 0x1b, 0xa6, 0x2c, 0xc1, 0x65, 0x20, 0x27,
	0xbe, 0x7a, 0xb5, 0x55, 0xb7, 0x9a, 0x4d, 0xcb, 0x94, 0xd3, 0x33, 0x99, 0xd5, 0xda, 0x3e, 0xea,
	0x58, 0xa6, 0x9c, 0x81, 0x6b, 0x60, 0x25, 0xf1, 0x21, 0xab, 0xdd, 0x6d, 0x76, 0x6c, 0xd3, 0xaa,
	0x37, 0xab, 0xc8, 0x32, 0xe5, 0x6c, 0x6d, 0xef, 0x34, 0x2a, 0x4b, 0x67, 0x51, 0x59, 0xfa, 0x15,
	0x95, 0xa5, 0x4f, 0xe7, 0xe5, 0xd4, 0xd9, 0x79, 0x39, 0xf5, 0xfd, 0xbc, 0x9c, 0x7a, 0xb3, 0x35,
	0xb3, 0x31, 0xd6, 0xc7, 0x5b, 0xc9, 0x29, 0x15, 0xb6, 0x31, 0x9e, 0xfd, 0x83, 0xc4, 0x7b, 0xec,
	0xe5, 0xe2, 0xb7, 0x7e, 0xf7, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x81, 0xf3, 0xf6, 0x6e, 0x60,
	0x06, 0x00, 0x00,
}

func (m *SportEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SportEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SportEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.BetConstraints != nil {
		{
			size, err := m.BetConstraints.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSportEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSportEvent(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x42
	}
	if m.ResolutionTS != 0 {
		i = encodeVarintSportEvent(dAtA, i, uint64(m.ResolutionTS))
		i--
		dAtA[i] = 0x38
	}
	if m.Status != 0 {
		i = encodeVarintSportEvent(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if len(m.WinnerOddsUIDs) > 0 {
		for iNdEx := len(m.WinnerOddsUIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.WinnerOddsUIDs[iNdEx])
			copy(dAtA[i:], m.WinnerOddsUIDs[iNdEx])
			i = encodeVarintSportEvent(dAtA, i, uint64(len(m.WinnerOddsUIDs[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.OddsUIDs) > 0 {
		for iNdEx := len(m.OddsUIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OddsUIDs[iNdEx])
			copy(dAtA[i:], m.OddsUIDs[iNdEx])
			i = encodeVarintSportEvent(dAtA, i, uint64(len(m.OddsUIDs[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.EndTS != 0 {
		i = encodeVarintSportEvent(dAtA, i, uint64(m.EndTS))
		i--
		dAtA[i] = 0x18
	}
	if m.StartTS != 0 {
		i = encodeVarintSportEvent(dAtA, i, uint64(m.StartTS))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UID) > 0 {
		i -= len(m.UID)
		copy(dAtA[i:], m.UID)
		i = encodeVarintSportEvent(dAtA, i, uint64(len(m.UID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResolutionEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolutionEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResolutionEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintSportEvent(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.WinnerOddsUIDs) > 0 {
		for iNdEx := len(m.WinnerOddsUIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.WinnerOddsUIDs[iNdEx])
			copy(dAtA[i:], m.WinnerOddsUIDs[iNdEx])
			i = encodeVarintSportEvent(dAtA, i, uint64(len(m.WinnerOddsUIDs[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ResolutionTS != 0 {
		i = encodeVarintSportEvent(dAtA, i, uint64(m.ResolutionTS))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UID) > 0 {
		i -= len(m.UID)
		copy(dAtA[i:], m.UID)
		i = encodeVarintSportEvent(dAtA, i, uint64(len(m.UID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBetConstraints) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBetConstraints) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBetConstraints) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CurrentTotalAmount.Size()
		i -= size
		if _, err := m.CurrentTotalAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSportEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.MaxLoss.Size()
		i -= size
		if _, err := m.MaxLoss.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSportEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.BetFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSportEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.MinAmount.Size()
		i -= size
		if _, err := m.MinAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSportEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.MaxBetCap.Size()
		i -= size
		if _, err := m.MaxBetCap.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSportEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintSportEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovSportEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SportEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UID)
	if l > 0 {
		n += 1 + l + sovSportEvent(uint64(l))
	}
	if m.StartTS != 0 {
		n += 1 + sovSportEvent(uint64(m.StartTS))
	}
	if m.EndTS != 0 {
		n += 1 + sovSportEvent(uint64(m.EndTS))
	}
	if len(m.OddsUIDs) > 0 {
		for _, s := range m.OddsUIDs {
			l = len(s)
			n += 1 + l + sovSportEvent(uint64(l))
		}
	}
	if len(m.WinnerOddsUIDs) > 0 {
		for _, s := range m.WinnerOddsUIDs {
			l = len(s)
			n += 1 + l + sovSportEvent(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovSportEvent(uint64(m.Status))
	}
	if m.ResolutionTS != 0 {
		n += 1 + sovSportEvent(uint64(m.ResolutionTS))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSportEvent(uint64(l))
	}
	if m.BetConstraints != nil {
		l = m.BetConstraints.Size()
		n += 1 + l + sovSportEvent(uint64(l))
	}
	if m.Active {
		n += 2
	}
	return n
}

func (m *ResolutionEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UID)
	if l > 0 {
		n += 1 + l + sovSportEvent(uint64(l))
	}
	if m.ResolutionTS != 0 {
		n += 1 + sovSportEvent(uint64(m.ResolutionTS))
	}
	if len(m.WinnerOddsUIDs) > 0 {
		for _, s := range m.WinnerOddsUIDs {
			l = len(s)
			n += 1 + l + sovSportEvent(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovSportEvent(uint64(m.Status))
	}
	return n
}

func (m *EventBetConstraints) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MaxBetCap.Size()
	n += 1 + l + sovSportEvent(uint64(l))
	l = m.MinAmount.Size()
	n += 1 + l + sovSportEvent(uint64(l))
	l = m.BetFee.Size()
	n += 1 + l + sovSportEvent(uint64(l))
	l = m.MaxLoss.Size()
	n += 1 + l + sovSportEvent(uint64(l))
	l = m.CurrentTotalAmount.Size()
	n += 1 + l + sovSportEvent(uint64(l))
	return n
}

func sovSportEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSportEvent(x uint64) (n int) {
	return sovSportEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SportEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SportEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SportEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTS", wireType)
			}
			m.StartTS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTS |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTS", wireType)
			}
			m.EndTS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTS |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OddsUIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OddsUIDs = append(m.OddsUIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinnerOddsUIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WinnerOddsUIDs = append(m.WinnerOddsUIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SportEventStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolutionTS", wireType)
			}
			m.ResolutionTS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResolutionTS |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetConstraints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BetConstraints == nil {
				m.BetConstraints = &EventBetConstraints{}
			}
			if err := m.BetConstraints.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSportEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSportEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolutionEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolutionEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolutionEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolutionTS", wireType)
			}
			m.ResolutionTS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResolutionTS |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinnerOddsUIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WinnerOddsUIDs = append(m.WinnerOddsUIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SportEventStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSportEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSportEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBetConstraints) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSportEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBetConstraints: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBetConstraints: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBetCap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxBetCap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSportEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSportEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BetFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLoss", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxLoss.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTotalAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSportEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSportEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSportEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentTotalAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSportEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSportEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSportEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSportEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSportEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSportEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSportEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSportEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSportEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSportEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSportEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSportEvent = fmt.Errorf("proto: unexpected end of group")
)
