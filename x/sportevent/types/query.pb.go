// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fury/sportevent/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method.
// Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_45776640ee419e76, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
// Query/Params RPC method.
type QueryParamsResponse struct {
	// params hold all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_45776640ee419e76, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QuerySportEventRequest is the request type for the Query/{uid} RPC method.
// Query/SportEvent RPC method.
type QuerySportEventRequest struct {
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *QuerySportEventRequest) Reset()         { *m = QuerySportEventRequest{} }
func (m *QuerySportEventRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySportEventRequest) ProtoMessage()    {}
func (*QuerySportEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_45776640ee419e76, []int{2}
}
func (m *QuerySportEventRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySportEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySportEventRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySportEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySportEventRequest.Merge(m, src)
}
func (m *QuerySportEventRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySportEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySportEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySportEventRequest proto.InternalMessageInfo

func (m *QuerySportEventRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

// QuerySportEventRequest is the response type for the Query/{uid} RPC method.
// Query/SportEvent RPC method.
type QuerySportEventResponse struct {
	SportEvent SportEvent `protobuf:"bytes,1,opt,name=sport_event,json=sportEvent,proto3" json:"sport_event"`
}

func (m *QuerySportEventResponse) Reset()         { *m = QuerySportEventResponse{} }
func (m *QuerySportEventResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySportEventResponse) ProtoMessage()    {}
func (*QuerySportEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_45776640ee419e76, []int{3}
}
func (m *QuerySportEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySportEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySportEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySportEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySportEventResponse.Merge(m, src)
}
func (m *QuerySportEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySportEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySportEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySportEventResponse proto.InternalMessageInfo

func (m *QuerySportEventResponse) GetSportEvent() SportEvent {
	if m != nil {
		return m.SportEvent
	}
	return SportEvent{}
}

// QuerySportEventsRequest is the request type for the Query/sport_events RPC
// method.
// Query/SportEvents RPC method.
type QuerySportEventsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySportEventsRequest) Reset()         { *m = QuerySportEventsRequest{} }
func (m *QuerySportEventsRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySportEventsRequest) ProtoMessage()    {}
func (*QuerySportEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_45776640ee419e76, []int{4}
}
func (m *QuerySportEventsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySportEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySportEventsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySportEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySportEventsRequest.Merge(m, src)
}
func (m *QuerySportEventsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySportEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySportEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySportEventsRequest proto.InternalMessageInfo

func (m *QuerySportEventsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QuerySportEventsResponse is the response type for the Query/sport_events RPC
// method.
// Query/SportEvents RPC method.
type QuerySportEventsResponse struct {
	SportEvent []SportEvent        `protobuf:"bytes,1,rep,name=sport_event,json=sportEvent,proto3" json:"sport_event"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySportEventsResponse) Reset()         { *m = QuerySportEventsResponse{} }
func (m *QuerySportEventsResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySportEventsResponse) ProtoMessage()    {}
func (*QuerySportEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_45776640ee419e76, []int{5}
}
func (m *QuerySportEventsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySportEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySportEventsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySportEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySportEventsResponse.Merge(m, src)
}
func (m *QuerySportEventsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySportEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySportEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySportEventsResponse proto.InternalMessageInfo

func (m *QuerySportEventsResponse) GetSportEvent() []SportEvent {
	if m != nil {
		return m.SportEvent
	}
	return nil
}

func (m *QuerySportEventsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QuerySportEventsByUIDsRequest is the request type for the
// Query/sposport_events_by_uids  RPC method.
// Query/SportEventsByUIDs RPC method.
type QuerySportEventsByUIDsRequest struct {
	Uids []string `protobuf:"bytes,1,rep,name=uids,proto3" json:"uids"`
}

func (m *QuerySportEventsByUIDsRequest) Reset()         { *m = QuerySportEventsByUIDsRequest{} }
func (m *QuerySportEventsByUIDsRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySportEventsByUIDsRequest) ProtoMessage()    {}
func (*QuerySportEventsByUIDsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_45776640ee419e76, []int{6}
}
func (m *QuerySportEventsByUIDsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySportEventsByUIDsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySportEventsByUIDsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySportEventsByUIDsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySportEventsByUIDsRequest.Merge(m, src)
}
func (m *QuerySportEventsByUIDsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySportEventsByUIDsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySportEventsByUIDsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySportEventsByUIDsRequest proto.InternalMessageInfo

func (m *QuerySportEventsByUIDsRequest) GetUids() []string {
	if m != nil {
		return m.Uids
	}
	return nil
}

// QuerySportEventsByUIDsResponse is the response type for the
// Query/sposport_events_by_uids  RPC method.
// Query/SportEventsByUIDs RPC method.
type QuerySportEventsByUIDsResponse struct {
	SportEvents  []SportEvent `protobuf:"bytes,1,rep,name=sport_events,json=sportEvents,proto3" json:"sport_events"`
	FailedEvents []string     `protobuf:"bytes,2,rep,name=failed_events,json=failedEvents,proto3" json:"failed_events,omitempty"`
}

func (m *QuerySportEventsByUIDsResponse) Reset()         { *m = QuerySportEventsByUIDsResponse{} }
func (m *QuerySportEventsByUIDsResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySportEventsByUIDsResponse) ProtoMessage()    {}
func (*QuerySportEventsByUIDsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_45776640ee419e76, []int{7}
}
func (m *QuerySportEventsByUIDsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySportEventsByUIDsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySportEventsByUIDsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySportEventsByUIDsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySportEventsByUIDsResponse.Merge(m, src)
}
func (m *QuerySportEventsByUIDsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySportEventsByUIDsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySportEventsByUIDsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySportEventsByUIDsResponse proto.InternalMessageInfo

func (m *QuerySportEventsByUIDsResponse) GetSportEvents() []SportEvent {
	if m != nil {
		return m.SportEvents
	}
	return nil
}

func (m *QuerySportEventsByUIDsResponse) GetFailedEvents() []string {
	if m != nil {
		return m.FailedEvents
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "furynetwork.fury.sportevent.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "furynetwork.fury.sportevent.QueryParamsResponse")
	proto.RegisterType((*QuerySportEventRequest)(nil), "furynetwork.fury.sportevent.QuerySportEventRequest")
	proto.RegisterType((*QuerySportEventResponse)(nil), "furynetwork.fury.sportevent.QuerySportEventResponse")
	proto.RegisterType((*QuerySportEventsRequest)(nil), "furynetwork.fury.sportevent.QuerySportEventsRequest")
	proto.RegisterType((*QuerySportEventsResponse)(nil), "furynetwork.fury.sportevent.QuerySportEventsResponse")
	proto.RegisterType((*QuerySportEventsByUIDsRequest)(nil), "furynetwork.fury.sportevent.QuerySportEventsByUIDsRequest")
	proto.RegisterType((*QuerySportEventsByUIDsResponse)(nil), "furynetwork.fury.sportevent.QuerySportEventsByUIDsResponse")
}

func init() { proto.RegisterFile("fury/sportevent/query.proto", fileDescriptor_45776640ee419e76) }

var fileDescriptor_45776640ee419e76 = []byte{
	// 616 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0x4f, 0x6b, 0x13, 0x41,
	0x18, 0xc6, 0xb3, 0xfd, 0x13, 0xec, 0x9b, 0x0a, 0x3a, 0x96, 0x36, 0x5d, 0xdb, 0x4d, 0x5d, 0xa9,
	0x4a, 0x31, 0xb3, 0x24, 0xf5, 0xa0, 0x07, 0x11, 0x82, 0x5a, 0x04, 0x91, 0xba, 0xa2, 0x07, 0x2f,
	0x61, 0xd2, 0x8c, 0xe3, 0x62, 0xb3, 0xb3, 0xcd, 0xec, 0x56, 0x83, 0xf4, 0xe2, 0x49, 0x6f, 0x42,
	0xf1, 0xe8, 0x87, 0xf0, 0x0b, 0x78, 0xee, 0xb1, 0xe0, 0xc5, 0x53, 0x91, 0xc4, 0x93, 0x9f, 0x42,
	0x76, 0x66, 0x92, 0x6c, 0xb2, 0x24, 0x35, 0xf5, 0x12, 0x26, 0xbb, 0xcf, 0xf3, 0xbe, 0xbf, 0x67,
	0x66, 0xde, 0x05, 0x53, 0x30, 0xea, 0x88, 0x80, 0x37, 0x43, 0xba, 0x4f, 0xfd, 0xd0, 0xd9, 0x8b,
	0x68, 0xb3, 0x85, 0x83, 0x26, 0x0f, 0x39, 0x5a, 0x16, 0x8c, 0xfa, 0x34, 0x7c, 0xcb, 0x9b, 0x6f,
	0xb0, 0x60, 0x14, 0xf7, 0x65, 0xe6, 0x02, 0xe3, 0x8c, 0x4b, 0x95, 0x13, 0xaf, 0x94, 0xc1, 0x5c,
	0x61, 0x9c, 0xb3, 0x5d, 0xea, 0x90, 0xc0, 0x73, 0x88, 0xef, 0xf3, 0x90, 0x84, 0x1e, 0xf7, 0x85,
	0x7e, 0xbb, 0xb1, 0xc3, 0x45, 0x83, 0x0b, 0xa7, 0x46, 0x04, 0x55, 0x7d, 0x9c, 0xfd, 0x52, 0x8d,
	0x86, 0xa4, 0xe4, 0x04, 0x84, 0x79, 0xbe, 0x14, 0x6b, 0xed, 0xe5, 0x21, 0xac, 0x80, 0x34, 0x49,
	0xa3, 0x5b, 0x68, 0x6d, 0xe8, 0xa5, 0x5c, 0x56, 0xe5, 0x5a, 0x29, 0xec, 0x05, 0x40, 0x4f, 0xe3,
	0x06, 0xdb, 0xd2, 0xe6, 0xd2, 0xbd, 0x88, 0x8a, 0xd0, 0x7e, 0x01, 0x97, 0x06, 0x9e, 0x8a, 0x80,
	0xfb, 0x82, 0xa2, 0x7b, 0x90, 0x55, 0xe5, 0xf3, 0xc6, 0x9a, 0x71, 0x23, 0x57, 0xbe, 0x82, 0x47,
	0xe6, 0xc6, 0xca, 0x5a, 0x99, 0x39, 0x3a, 0x29, 0x64, 0x5c, 0x6d, 0xb3, 0x37, 0x60, 0x51, 0xd6,
	0x7d, 0x16, 0xeb, 0x1e, 0xc4, 0x3a, 0xdd, 0x11, 0x5d, 0x80, 0xe9, 0xc8, 0xab, 0xcb, 0xba, 0x73,
	0x6e, 0xbc, 0xb4, 0x19, 0x2c, 0xa5, 0xb4, 0x9a, 0xe3, 0x31, 0xe4, 0x12, 0x49, 0x34, 0xcc, 0xfa,
	0x18, 0x98, 0x7e, 0x0d, 0x0d, 0x04, 0xa2, 0xf7, 0xc4, 0x26, 0xa9, 0x46, 0xdd, 0x7d, 0x40, 0x0f,
	0x01, 0xfa, 0x1b, 0xae, 0xfb, 0x5c, 0xc3, 0xea, 0x74, 0x70, 0x7c, 0x3a, 0x58, 0xdd, 0x02, 0x7d,
	0x3a, 0x78, 0x9b, 0x30, 0xaa, 0xbd, 0x6e, 0xc2, 0x69, 0x7f, 0x33, 0x20, 0x9f, 0xee, 0x31, 0x2a,
	0xcd, 0xf4, 0x7f, 0xa4, 0x41, 0x5b, 0x03, 0xc8, 0x53, 0x12, 0xf9, 0xfa, 0xa9, 0xc8, 0x0a, 0x65,
	0x80, 0xf9, 0x2e, 0xac, 0x0e, 0x23, 0x57, 0x5a, 0xcf, 0x1f, 0xdd, 0xef, 0x6d, 0xce, 0x0a, 0xcc,
	0x44, 0x5e, 0x5d, 0x48, 0xe0, 0xb9, 0xca, 0xb9, 0x3f, 0x27, 0x05, 0xf9, 0xdf, 0x95, 0xbf, 0xf6,
	0x17, 0x03, 0xac, 0x51, 0x7e, 0x1d, 0xfc, 0x09, 0xcc, 0x27, 0x82, 0x8b, 0xb3, 0x24, 0xcf, 0xf5,
	0x93, 0x0b, 0x74, 0x15, 0xce, 0xbf, 0x22, 0xde, 0x2e, 0xad, 0x77, 0x0b, 0x4e, 0xc5, 0x64, 0xee,
	0xbc, 0x7a, 0xa8, 0x44, 0xe5, 0x4f, 0xb3, 0x30, 0x2b, 0xb9, 0xd0, 0x47, 0x03, 0xb2, 0xea, 0x96,
	0xa2, 0xe2, 0x98, 0x9e, 0xe9, 0xf1, 0x30, 0xf1, 0xbf, 0xca, 0x55, 0x50, 0xbb, 0xf0, 0xe1, 0xc7,
	0xef, 0xc3, 0xa9, 0x65, 0xb4, 0xe4, 0xf4, 0xe6, 0xb1, 0x98, 0x9c, 0x56, 0x74, 0x68, 0x00, 0xf4,
	0xb3, 0xa1, 0xd2, 0x69, 0xf5, 0x53, 0xf3, 0x63, 0x96, 0x27, 0xb1, 0x68, 0x2c, 0x4b, 0x62, 0xe5,
	0xd1, 0x62, 0x0a, 0xeb, 0x7d, 0xe4, 0xd5, 0x0f, 0xd0, 0x57, 0x03, 0x72, 0x89, 0xd3, 0x43, 0x13,
	0xf4, 0xe8, 0x6d, 0xd5, 0xe6, 0x44, 0x1e, 0x0d, 0xb6, 0x2e, 0xc1, 0x0a, 0x68, 0x35, 0x05, 0x96,
	0xbc, 0x2f, 0xe8, 0xbb, 0x01, 0x17, 0x53, 0xb7, 0x0b, 0xdd, 0x9e, 0xa0, 0xe3, 0xc0, 0x85, 0x36,
	0xef, 0x9c, 0xc1, 0xa9, 0x89, 0x6f, 0x49, 0x62, 0x8c, 0x6e, 0x8e, 0x25, 0xae, 0xd6, 0x5a, 0xd5,
	0x78, 0x38, 0xe4, 0xfe, 0x8a, 0x83, 0xca, 0xd6, 0x51, 0xdb, 0x32, 0x8e, 0xdb, 0x96, 0xf1, 0xab,
	0x6d, 0x19, 0x9f, 0x3b, 0x56, 0xe6, 0xb8, 0x63, 0x65, 0x7e, 0x76, 0xac, 0xcc, 0xcb, 0x22, 0xf3,
	0xc2, 0xd7, 0x51, 0x0d, 0xef, 0xf0, 0x46, 0x5c, 0xb1, 0xa8, 0xa9, 0x64, 0xf5, 0x77, 0xc9, 0x2f,
	0x7a, 0xd8, 0x0a, 0xa8, 0xa8, 0x65, 0xe5, 0xc7, 0x7c, 0xf3, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xc5, 0x48, 0x75, 0xcc, 0xa4, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a SportEvent by uid.
	SportEvent(ctx context.Context, in *QuerySportEventRequest, opts ...grpc.CallOption) (*QuerySportEventResponse, error)
	// Queries a list of SportEvent items.
	SportEvents(ctx context.Context, in *QuerySportEventsRequest, opts ...grpc.CallOption) (*QuerySportEventsResponse, error)
	// Queries a list of SportEventsByUIDs items.
	SportEventsByUIDs(ctx context.Context, in *QuerySportEventsByUIDsRequest, opts ...grpc.CallOption) (*QuerySportEventsByUIDsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/furynetwork.fury.sportevent.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SportEvent(ctx context.Context, in *QuerySportEventRequest, opts ...grpc.CallOption) (*QuerySportEventResponse, error) {
	out := new(QuerySportEventResponse)
	err := c.cc.Invoke(ctx, "/furynetwork.fury.sportevent.Query/SportEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SportEvents(ctx context.Context, in *QuerySportEventsRequest, opts ...grpc.CallOption) (*QuerySportEventsResponse, error) {
	out := new(QuerySportEventsResponse)
	err := c.cc.Invoke(ctx, "/furynetwork.fury.sportevent.Query/SportEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SportEventsByUIDs(ctx context.Context, in *QuerySportEventsByUIDsRequest, opts ...grpc.CallOption) (*QuerySportEventsByUIDsResponse, error) {
	out := new(QuerySportEventsByUIDsResponse)
	err := c.cc.Invoke(ctx, "/furynetwork.fury.sportevent.Query/SportEventsByUIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a SportEvent by uid.
	SportEvent(context.Context, *QuerySportEventRequest) (*QuerySportEventResponse, error)
	// Queries a list of SportEvent items.
	SportEvents(context.Context, *QuerySportEventsRequest) (*QuerySportEventsResponse, error)
	// Queries a list of SportEventsByUIDs items.
	SportEventsByUIDs(context.Context, *QuerySportEventsByUIDsRequest) (*QuerySportEventsByUIDsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) SportEvent(ctx context.Context, req *QuerySportEventRequest) (*QuerySportEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SportEvent not implemented")
}
func (*UnimplementedQueryServer) SportEvents(ctx context.Context, req *QuerySportEventsRequest) (*QuerySportEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SportEvents not implemented")
}
func (*UnimplementedQueryServer) SportEventsByUIDs(ctx context.Context, req *QuerySportEventsByUIDsRequest) (*QuerySportEventsByUIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SportEventsByUIDs not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/furynetwork.fury.sportevent.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SportEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySportEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SportEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/furynetwork.fury.sportevent.Query/SportEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SportEvent(ctx, req.(*QuerySportEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SportEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySportEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SportEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/furynetwork.fury.sportevent.Query/SportEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SportEvents(ctx, req.(*QuerySportEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SportEventsByUIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySportEventsByUIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SportEventsByUIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/furynetwork.fury.sportevent.Query/SportEventsByUIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SportEventsByUIDs(ctx, req.(*QuerySportEventsByUIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "furynetwork.fury.sportevent.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "SportEvent",
			Handler:    _Query_SportEvent_Handler,
		},
		{
			MethodName: "SportEvents",
			Handler:    _Query_SportEvents_Handler,
		},
		{
			MethodName: "SportEventsByUIDs",
			Handler:    _Query_SportEventsByUIDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fury/sportevent/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySportEventRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySportEventRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySportEventRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySportEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySportEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySportEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SportEvent.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySportEventsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySportEventsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySportEventsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySportEventsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySportEventsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySportEventsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SportEvent) > 0 {
		for iNdEx := len(m.SportEvent) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SportEvent[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySportEventsByUIDsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySportEventsByUIDsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySportEventsByUIDsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uids) > 0 {
		for iNdEx := len(m.Uids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Uids[iNdEx])
			copy(dAtA[i:], m.Uids[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Uids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySportEventsByUIDsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySportEventsByUIDsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySportEventsByUIDsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FailedEvents) > 0 {
		for iNdEx := len(m.FailedEvents) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FailedEvents[iNdEx])
			copy(dAtA[i:], m.FailedEvents[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.FailedEvents[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SportEvents) > 0 {
		for iNdEx := len(m.SportEvents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SportEvents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuerySportEventRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySportEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SportEvent.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuerySportEventsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySportEventsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SportEvent) > 0 {
		for _, e := range m.SportEvent {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySportEventsByUIDsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Uids) > 0 {
		for _, s := range m.Uids {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QuerySportEventsByUIDsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SportEvents) > 0 {
		for _, e := range m.SportEvents {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.FailedEvents) > 0 {
		for _, s := range m.FailedEvents {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySportEventRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySportEventRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySportEventRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySportEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySportEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySportEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SportEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SportEvent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySportEventsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySportEventsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySportEventsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySportEventsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySportEventsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySportEventsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SportEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SportEvent = append(m.SportEvent, SportEvent{})
			if err := m.SportEvent[len(m.SportEvent)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySportEventsByUIDsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySportEventsByUIDsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySportEventsByUIDsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uids = append(m.Uids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySportEventsByUIDsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySportEventsByUIDsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySportEventsByUIDsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SportEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SportEvents = append(m.SportEvents, SportEvent{})
			if err := m.SportEvents[len(m.SportEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailedEvents", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailedEvents = append(m.FailedEvents, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
