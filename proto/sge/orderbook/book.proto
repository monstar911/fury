syntax = "proto3";
package sgenetwork.sge.orderbook;

import "gogoproto/gogo.proto";

option go_package = "github.com/sge-network/sge/x/orderbook/types";


// OrderBook represents the order book maintained against a sport event.
message OrderBook {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_getters)  = false;
  option (gogoproto.goproto_stringer) = false;

  // id corresponding to the book
  string id = 1 [
    (gogoproto.customname) = "ID",
    (gogoproto.jsontag) = "id",
    json_name = "id"
  ];

  // participation_count is the count of participations in the order book
  uint64 participation_count = 2 [(gogoproto.moretags) = "yaml:\"participation_count\""];

  // odds_count is the count of the odds in the order book
  uint64 odds_count = 3 [(gogoproto.moretags) = "yaml:\"odds_count\""];

  // order book status
  OrderBookStatus status = 4;
}

// OrderBookStatus is the enum type for the status of the orderbook.
enum OrderBookStatus {
  // invalid
  ORDER_BOOK_STATUS_UNSPECIFIED = 0;
  // active
  ORDER_BOOK_STATUS_STATUS_ACTIVE = 1;
  // resolved not settled
  ORDER_BOOK_STATUS_STATUS_RESOLVED = 2;
  // resolved and settled
  ORDER_BOOK_STATUS_STATUS_SETTLED = 3;
}



// BookOddsExposure represents the exposures taken on odds
message BookOddsExposure {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_getters)  = false;
  option (gogoproto.goproto_stringer) = false;

  // book_id is id corresponding to the book
  string book_id = 1 [
    (gogoproto.customname) = "BookID",
    (gogoproto.jsontag) = "book_id",
    json_name = "book_id"
  ];

  // odds_id is odd'd uid
  string odds_id = 2 [
    (gogoproto.customname) = "OddsID",
    (gogoproto.jsontag) = "odds_id",
    json_name = "odds_id"
  ];

  repeated uint64 fulfillment_queue = 3 [(gogoproto.moretags) = "yaml:\"fulfillment_queue\""];
}
