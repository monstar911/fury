syntax = "proto3";
package sgenetwork.sge.house;

import "gogoproto/gogo.proto";

option go_package = "github.com/sge-network/sge/x/house/types";

// Params defines the parameters for the house module.
message Params {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  // minimum_deposit is the minum amount of deposit acceptable.
  uint64 minimum_deposit = 1 [(gogoproto.moretags) = "yaml:\"minimum_deposit\""];

  // house_participation_fee is the % of deposit to be paid for house participation by the user
  string house_participation_fee = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// Deposit represents the deposit against a sport event held by an account.
message Deposit {
    option (gogoproto.equal)            = false;
    option (gogoproto.goproto_getters)  = false;
    option (gogoproto.goproto_stringer) = false;

  // depositor_address is the bech32-encoded address of the depositor.
  string depositor_address = 1 [(gogoproto.moretags) = "yaml:\"depositor_address\""];

  // sport_event_uid is the uid of sport event against which deposit is being made.
  string sport_event_uid = 2 [
    (gogoproto.customname) = "SportEventUID",
    (gogoproto.jsontag) = "sport_event_uid",
    json_name = "sport_event_uid"
  ];

  // amount is the amount being deposited.
  string amount = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable)   = false,
    (gogoproto.moretags)   = "yaml:\"amount\""
  ];

  // fee is deducted from amount at the point of deposit.
  string fee = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable)   = false,
    (gogoproto.moretags)   = "yaml:\"fee\""
  ];

  // liquidity is the liquidity being provided to the house after fee deduction.
  string liquidity = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable)   = false,
    (gogoproto.moretags)   = "yaml:\"liquidity\""
  ];

  // id corresponding to the book participant
  uint64 participant_id = 6 [
    (gogoproto.customname) = "ParticipantID",
    (gogoproto.jsontag) = "participant_id",
    json_name = "participant_id"
  ];

  // withdrawals
  uint64 withdrawals = 7 [(gogoproto.moretags) = "yaml:\"withdrawals\""];

  // total_withdrawal_amount
  string total_withdrawal_amount = 8 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable)   = false,
    (gogoproto.moretags)   = "yaml:\"total_withdrawal_amount\""
  ];
}

// Withdrawal represents the withdrawal against a deposit.
message Withdrawal {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_getters)  = false;
  option (gogoproto.goproto_stringer) = false;

// depositor_address is the bech32-encoded address of the depositor.
string depositor_address = 1 [(gogoproto.moretags) = "yaml:\"depositor_address\""];

// sport_event_uid is the uid of sport event against which deposit is being made.
string sport_event_uid = 2 [
  (gogoproto.customname) = "SportEventUID",
  (gogoproto.jsontag) = "sport_event_uid",
  json_name = "sport_event_uid"
];

// id corresponding to the book participant
uint64 participant_id = 3 [
  (gogoproto.customname) = "ParticipantID",
  (gogoproto.jsontag) = "participant_id",
  json_name = "participant_id"
];

// withdrawal number is the number of withdrawal against the deposit
uint64 withdrawal_number = 4 [(gogoproto.moretags) = "yaml:\"withdrawal_number\""];

WithdrawalMode mode = 5 [(gogoproto.moretags) = "yaml:\"mode\""];

// amount is the amount being withdrawan.
string amount = 6 [
  (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
  (gogoproto.nullable)   = false,
  (gogoproto.moretags)   = "yaml:\"amount\""
];
}

// WithdrawalMode is the enum type for the withdrawal mode.
enum WithdrawalMode {
  // invalid
  WITHDRAWAL_MODE_UNSPECIFIED = 0;
  // full
  WITHDRAWAL_MODE_FULL = 1;
  // partial
  WITHDRAWAL_MODE_PARTIAL = 2;
}
