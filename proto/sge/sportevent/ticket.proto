
syntax = "proto3";
package sgenetwork.sge.sportevent;

import "sge/sportevent/sport_event.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/sge-network/sge/x/sportevent/types";

// SportEventUpdateTicketPayload indicates data of update sportevent ticket
message SportEventUpdateTicketPayload {
  // UID is the uuid of the sport-event
  string uid = 1 [
    (gogoproto.customname) = "UID",
    (gogoproto.jsontag) = "uid",
    json_name = "uid"
  ];
  // StartTS is the start timestamp of the sport-event
  uint64 start_ts = 2 [
    (gogoproto.customname) = "StartTS",
    (gogoproto.jsontag) = "start_ts",
    json_name = "start_ts"
  ];
  // EndTS is the end timestamp of the sport-event
  uint64 end_ts = 3 [
    (gogoproto.customname) = "EndTS",
    (gogoproto.jsontag) = "end_ts",
    json_name = "end_ts"
  ];
  // BetConstraints holds the constraints of sport-event to accept bets
  EventBetConstraints bet_constraints = 4;
  // Active is the status of active or inactive sport-event
  bool active = 5;
}

// SportEventResolutionTicketPayload indicates data of resolution of sportevent
// ticket
message SportEventResolutionTicketPayload {
  // UID is the uuid of sport-event
  string uid = 1 [
    (gogoproto.customname) = "UID",
    (gogoproto.jsontag) = "uid",
    json_name = "uid"
  ];

  // ResolutionTS is the resolution timestamp of event
  uint64 resolution_ts = 2 [
    (gogoproto.customname) = "ResolutionTS",
    (gogoproto.jsontag) = "resolution_ts",
    json_name = "resolution_ts"
  ];

  // WinnerOddsUIDs is the uuid list of winner odds
  repeated string winner_odds_uids = 3 [
    (gogoproto.customname) = "WinnerOddsUIDs",
    (gogoproto.jsontag) = "winner_odds_uids",
    json_name = "winner_odds_uids"
  ];

  // Status is the status of resolution
  SportEventStatus status = 4;
}