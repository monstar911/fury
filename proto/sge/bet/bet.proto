syntax = "proto3";
package sgenetwork.sge.bet;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "sge/bet/odds_type.proto";

option go_package = "github.com/sge-network/sge/x/bet/types";

// Bet is the main type of bet in the blockchain state
message Bet {

  // UID is the unique uuid assigned to bet
  string uid = 1 [
    (gogoproto.customname) = "UID",
    (gogoproto.jsontag) = "uid",
    json_name = "uid"
  ];

  // SportEventUID is the unique uuid of the sport-event on which bet is placed
  string sport_event_uid = 2 [
    (gogoproto.customname) = "SportEventUID",
    (gogoproto.jsontag) = "sport_event_uid",
    json_name = "sport_event_uid"
  ];

  // OddsUID is the unique uuid of the odds on which bet is placed
  string odds_uid = 3 [
    (gogoproto.customname) = "OddsUID",
    (gogoproto.jsontag) = "odds_uid",
    json_name = "odds_uid"
  ];

  // OddsType is the type of odds user chose such as decimal, fractional
  sgenetwork.sge.bet.OddsType odds_type = 4;

  // OddsValue is the odds on which bet is placed
  string odds_value = 5;

  // Amount is the wager amount
  string amount = 6 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];

  // BetFee is the betting fee calculated by the bet amount
  cosmos.base.v1beta1.Coin bet_fee = 7 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable) = false
  ];

  // Status is the status of the bet, such as `unspecified` or `settled`
  Status status = 8;

  // Result is the result of bet, such as `won` or `lost`
  Result result = 9;

  // Verified shows bet is verified or not
  bool verified = 10;

  // Ticket is a signed string containing important info such as `oddsValue`
  string ticket = 11;

  // Creator is the bettor address
  string creator = 12;

  // CreatedAt is bet placement timestamp
  int64 created_at = 13;

  // Status of the Bet.
  enum Status {

    // unknown status
    STATUS_UNSPECIFIED = 0;

    // bet is placed
    STATUS_PLACED = 1;

    // bet is canceled by Bettor
    STATUS_CANCELLED = 2;

    // bet is aborted
    STATUS_ABORTED = 3;

    // pending for getting placed
    STATUS_PENDING = 4;

    // bet result is declared
    STATUS_RESULT_DECLARED = 5;

    // the bet is settled
    STATUS_SETTLED = 6;
  }

  // Result of the bet.
  enum Result {

    // the invalid or unknown
    RESULT_UNSPECIFIED = 0;

    // bet result is pending
    RESULT_PENDING = 1;

    // bet won by the bettor
    RESULT_WON = 2;

    // bet lost by the bettor
    RESULT_LOST = 3;

    // bet is draw
    RESULT_DRAW = 4;

    // bet is aborted
    RESULT_ABORTED = 5;
  }
}

// UID2ID is the type for mapping UIDs and Sequencial IDs of bets
message UID2ID {

  // UID is the unique uuid assigned to bet
  string uid = 1 [
    (gogoproto.customname) = "UID",
    (gogoproto.jsontag) = "uid",
    json_name = "uid"
  ];

  // ID is a autogenerated sequencial id for a bet
  uint64 id = 2 [
    (gogoproto.customname) = "ID",
    (gogoproto.jsontag) = "id",
    json_name = "id"
  ];
}
