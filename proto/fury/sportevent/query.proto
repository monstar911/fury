syntax = "proto3";
package furynetwork.fury.sportevent;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "fury/sportevent/params.proto";
import "fury/sportevent/sport_event.proto";

option go_package = "github.com/fanfury-sports/fury/x/sportevent/types";

// Query defines the gRPC querier service.
service Query {
  // Params queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/fury/sport-event/params";
  }
  // Queries a SportEvent by uid.
  rpc SportEvent(QuerySportEventRequest) returns (QuerySportEventResponse) {
    option (google.api.http).get = "/fury/sport-event/{uid}";
  }

  // Queries a list of SportEvent items.
  rpc SportEvents(QuerySportEventsRequest) returns (QuerySportEventsResponse) {
    option (google.api.http).get = "/fury/sport-event/sport_events";
  }

  // Queries a list of SportEventsByUIDs items.
  rpc SportEventsByUIDs(QuerySportEventsByUIDsRequest)
      returns (QuerySportEventsByUIDsResponse) {
    option (google.api.http).get =
        "/fury/sport-event/sport_events_by_uids/{uids}";
  }
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
// Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
// Query/Params RPC method.
message QueryParamsResponse {
  // params hold all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// QuerySportEventRequest is the request type for the Query/{uid} RPC method.
// Query/SportEvent RPC method.
message QuerySportEventRequest { string uid = 1; }

// QuerySportEventRequest is the response type for the Query/{uid} RPC method.
// Query/SportEvent RPC method.
message QuerySportEventResponse {
  SportEvent sport_event = 1 [ (gogoproto.nullable) = false ];
}

// QuerySportEventsRequest is the request type for the Query/sport_events RPC
// method.
// Query/SportEvents RPC method.
message QuerySportEventsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QuerySportEventsResponse is the response type for the Query/sport_events RPC
// method.
// Query/SportEvents RPC method.
message QuerySportEventsResponse {
  repeated SportEvent sport_event = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QuerySportEventsByUIDsRequest is the request type for the
// Query/sposport_events_by_uids  RPC method.
// Query/SportEventsByUIDs RPC method.
message QuerySportEventsByUIDsRequest {
  repeated string uids = 1 [ (gogoproto.jsontag) = "uids", json_name = "uids" ];
}

// QuerySportEventsByUIDsResponse is the response type for the
// Query/sposport_events_by_uids  RPC method.
// Query/SportEventsByUIDs RPC method.
message QuerySportEventsByUIDsResponse {
  repeated SportEvent sport_events = 1 [ (gogoproto.nullable) = false ];
  repeated string failed_events = 2;
}
