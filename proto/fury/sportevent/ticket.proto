
syntax = "proto3";
package furynetwork.fury.sportevent;

import "fury/sportevent/sport_event.proto";
import "fury/sportevent/odds.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/fanfury-sports/fury/x/sportevent/types";

// SportEventAddTicketPayload indicates data of add sport-event ticket
message SportEventAddTicketPayload {
  // uid is the universal unique identifier of the sport-event.
  string uid = 1 [
    (gogoproto.customname) = "UID",
    (gogoproto.jsontag) = "uid",
    json_name = "uid"
  ];
  // start_ts is the start timestamp of the sport-event.
  uint64 start_ts = 2 [
    (gogoproto.customname) = "StartTS",
    (gogoproto.jsontag) = "start_ts",
    json_name = "start_ts"
  ];
  // end_ts is the end timestamp of the sport-event.
  uint64 end_ts = 3 [
    (gogoproto.customname) = "EndTS",
    (gogoproto.jsontag) = "end_ts",
    json_name = "end_ts"
  ];
  // odds is the list of odds of the sport-event.
  repeated Odds odds = 4;

  // status is the current status of the sport-event.
  SportEventStatus status = 5;

  // creator is the address of the creator of sport-event.
  string creator = 6;

  // min_bet_amount is the minimum allowed bet amount for a sport-event.
  string min_bet_amount = 7 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];

  // bet_fee is the fee that thebettor needs to pay to bet on the sport-event.
  string bet_fee = 8 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];

  // meta contains human-readable metadata of the sport-event.
  string meta = 9;
  // sr_contribution_for_house is the portion of payout that should be paid by
  // sr
  string sr_contribution_for_house = 10 [
    (gogoproto.customname) = "SrContributionForHouse",
    (gogoproto.jsontag) = "sr_contribution_for_house",
    json_name = "sr_contribution_for_house",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

// SportEventUpdateTicketPayload indicates data of update sport-event ticket
message SportEventUpdateTicketPayload {
  // uid is the uuid of the sport-event
  string uid = 1 [
    (gogoproto.customname) = "UID",
    (gogoproto.jsontag) = "uid",
    json_name = "uid"
  ];
  // start_ts is the start timestamp of the sport-event
  uint64 start_ts = 2 [
    (gogoproto.customname) = "StartTS",
    (gogoproto.jsontag) = "start_ts",
    json_name = "start_ts"
  ];
  // end_ts is the end timestamp of the sport-event
  uint64 end_ts = 3 [
    (gogoproto.customname) = "EndTS",
    (gogoproto.jsontag) = "end_ts",
    json_name = "end_ts"
  ];
  // min_bet_amount is the minimum allowed bet amount for a sport-event.
  string min_bet_amount = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];

  // bet_fee is the fee that thebettor needs to pay to bet on the sport-event.
  string bet_fee = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];

  // status is the status of the resolution.
  SportEventStatus status = 6;
}

// SportEventResolutionTicketPayload indicates data of the
// resolution of the sport-event ticket.
message SportEventResolutionTicketPayload {
  // uid is the universal unique identifier of sport-event.
  string uid = 1 [
    (gogoproto.customname) = "UID",
    (gogoproto.jsontag) = "uid",
    json_name = "uid"
  ];

  // resolution_ts is the resolution timestamp of the sport-event.
  uint64 resolution_ts = 2 [
    (gogoproto.customname) = "ResolutionTS",
    (gogoproto.jsontag) = "resolution_ts",
    json_name = "resolution_ts"
  ];

  // winner_odds_uids is the universal unique identifier list of the winner
  // odds.
  repeated string winner_odds_uids = 3 [
    (gogoproto.customname) = "WinnerOddsUIDs",
    (gogoproto.jsontag) = "winner_odds_uids",
    json_name = "winner_odds_uids"
  ];

  // status is the status of the resolution.
  SportEventStatus status = 4;
}
