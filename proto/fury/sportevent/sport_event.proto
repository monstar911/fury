syntax = "proto3";
package furynetwork.fury.sportevent;

import "gogoproto/gogo.proto";
import "fury/sportevent/odds.proto";

option go_package = "github.com/fanfury-sports/fury/x/sportevent/types";

// SportEvent the representation of the sport-event to be stored in
// the sport-event state.
message SportEvent {
  // uid is the universal unique identifier of the sport-event.
  string uid = 1 [
    (gogoproto.customname) = "UID",
    (gogoproto.jsontag) = "uid",
    json_name = "uid"
  ];
  // start_ts is the start timestamp of the sport-event.
  uint64 start_ts = 2 [
    (gogoproto.customname) = "StartTS",
    (gogoproto.jsontag) = "start_ts",
    json_name = "start_ts"
  ];
  // end_ts is the end timestamp of the sport-event.
  uint64 end_ts = 3 [
    (gogoproto.customname) = "EndTS",
    (gogoproto.jsontag) = "end_ts",
    json_name = "end_ts"
  ];
  // odds is the list of odds of the sport-event.
  repeated Odds odds = 4;
  // winner_odds_uids is the list of winner odds universal unique identifiers.
  repeated string winner_odds_uids = 5 [
    (gogoproto.customname) = "WinnerOddsUIDs",
    (gogoproto.jsontag) = "winner_odds_uids",
    json_name = "winner_odds_uids"
  ];
  // status is the current status of the sport-event.
  SportEventStatus status = 6;
  // resolution_ts is the timestamp of the resolution of sport-event.
  uint64 resolution_ts = 7 [
    (gogoproto.customname) = "ResolutionTS",
    (gogoproto.jsontag) = "resolution_ts",
    json_name = "resolution_ts"
  ];
  // creator is the address of the creator of sport-event.
  string creator = 8;
  // bet_constraints holds the constraints of sport-event to accept bets.
  EventBetConstraints bet_constraints = 9;
  // meta contains human-readable metadata of the sport-event.
  string meta = 10;
  // sr_contribution_for_house is the amount of contibution of house in the sr
  string sr_contribution_for_house = 11 [
    (gogoproto.customname) = "SrContributionForHouse",
    (gogoproto.jsontag) = "sr_contribution_for_house",
    json_name = "sr_contribution_for_house",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  // book_uid is the unique identifier corresponding to the book
  string book_uid = 12 [
    (gogoproto.customname) = "BookUID",
    (gogoproto.jsontag) = "book_uid",
    json_name = "book_uid"
  ];
}

// SportEventStatus is the sport-event status enumeration
enum SportEventStatus {
  // unspecified event
  SPORT_EVENT_STATUS_UNSPECIFIED = 0;
  // event is active
  SPORT_EVENT_STATUS_ACTIVE = 1;
  // event is inactive
  SPORT_EVENT_STATUS_INACTIVE = 2;
  // event is canceled
  SPORT_EVENT_STATUS_CANCELED = 3;
  // event is aborted
  SPORT_EVENT_STATUS_ABORTED = 4;
  // result of the event is declared
  SPORT_EVENT_STATUS_RESULT_DECLARED = 5;
}

// Bet constraints parent group for a sport-event
message EventBetConstraints {
  // min_amount is the minimum allowed bet amount for a sport-event.
  string min_amount = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];

  // bet_fee is the fee that thebettor needs to pay to bet on the sport-event.
  string bet_fee = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}
