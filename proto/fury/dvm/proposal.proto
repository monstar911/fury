syntax = "proto3";
package furynetwork.fury.dvm;

import "gogoproto/gogo.proto";
import "fury/dvm/ticket.proto";
import "fury/dvm/vote.proto";

option go_package = "github.com/fanfury-sports/fury/x/dvm/types";

// PublicKeysChangeProposal is the type for the proposal for additions and
// removals of pub keys.
message PublicKeysChangeProposal {
  // id is the sequential id of the proposal generated by the blockchain.
  uint64 id = 1;
  // creator is the account address of the proposal creator.
  string creator = 2;
  // modifications contain the ticket payload of the proposal.
  PubkeysChangeProposalPayload modifications = 3
      [ (gogoproto.nullable) = false ];
  // votes contains the votes of the proposal.
  repeated Vote votes = 4;
  // start_ts is the block time that the proposal is set.
  int64 start_ts = 5 [
    (gogoproto.customname) = "StartTS",
    (gogoproto.jsontag) = "start_ts",
    json_name = "start_ts"
  ];
}

// PublicKeysChangeFinishedProposal is the type used for the finished proposal
// for additions and removals of pub keys.
message PublicKeysChangeFinishedProposal {
  // proposal is the proposal for additions and removals of pub keys.
  PublicKeysChangeProposal proposal = 1 [ (gogoproto.nullable) = false ];
  // result is the result of the finished proposal.
  ProposalResult result = 2;
  // result_meta is the metadata related to the result of the finished proposal.
  string result_meta = 3;
  // finish_ts is the block time that the proposal is set as finished.
  int64 finish_ts = 4 [
    (gogoproto.customname) = "FinishTS",
    (gogoproto.jsontag) = "finish_ts",
    json_name = "finish_ts"
  ];
}

// ProposalResult is the enum type for the proposal result.
enum ProposalResult {
  // unchosen value
  PROPOSAL_RESULT_UNSPECIFIED = 0;
  // approved
  PROPOSAL_RESULT_APPROVED = 1;
  // rejected
  PROPOSAL_RESULT_REJECTED = 2;
  // expired
  PROPOSAL_RESULT_EXPIRED = 3;
}
