syntax = "proto3";
package furynetwork.fury.orderbook;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "fury/orderbook/params.proto";
import "fury/orderbook/orderbook.proto";
import "fury/orderbook/participation.proto";
import "fury/orderbook/exposure.proto";

option go_package = "github.com/fanfury-sports/fury/x/orderbook/types";

// Query defines the gRPC querier service.
service Query {
  // Params queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/fury/orderbooks/params";
  }

  // OrderBooks queries all order books that match the given status.
  rpc OrderBooks(QueryOrderBooksRequest) returns (QueryOrderBooksResponse) {
    option (google.api.http).get = "/fury/orderbooks/{status}";
  }

  // OrderBook queries orderbook info for given order book id.
  rpc OrderBook(QueryOrderBookRequest) returns (QueryOrderBookResponse) {
    option (google.api.http).get = "/fury/orderbooks/{book_uid}";
  }

  // BookParticipations queries participation info for given orderbook.
  rpc BookParticipations(QueryBookParticipationsRequest)
      returns (QueryBookParticipationsResponse) {
    option (google.api.http).get = "/fury/orderbooks/{book_uid}/participations";
  }

  // BookParticipation queries participation info for given orderbook and
  // participation index.
  rpc BookParticipation(QueryBookParticipationRequest)
      returns (QueryBookParticipationResponse) {
    option (google.api.http).get =
        "/fury/orderbooks/{book_uid}/participations/{participation_index}";
  }

  // BookExposures queries exposures info for given orderbook.
  rpc BookExposures(QueryBookExposuresRequest)
      returns (QueryBookExposuresResponse) {
    option (google.api.http).get = "/fury/orderbooks/{book_uid}/exposures";
  }

  // BookExposure queries exposure info for given orderbook and odds id.
  rpc BookExposure(QueryBookExposureRequest)
      returns (QueryBookExposureResponse) {
    option (google.api.http).get =
        "/fury/orderbooks/{book_uid}/exposures/{odds_uid}";
  }

  // ParticipationExposures queries exposures info for given orderbook
  // participations.
  rpc ParticipationExposures(QueryParticipationExposuresRequest)
      returns (QueryParticipationExposuresResponse) {
    option (google.api.http).get =
        "/fury/orderbooks/{book_uid}/participation-exposures";
  }

  // ParticipationExposure queries exposure info for given orderbook
  // participation.
  rpc ParticipationExposure(QueryParticipationExposureRequest)
      returns (QueryParticipationExposureResponse) {
    option (google.api.http).get =
        "/fury/orderbooks/{book_uid}/participation-exposures/"
        "{participation_index}";
  }

  // HistoricalParticipationExposures queries historical exposures info for
  // given orderbook participation.
  rpc HistoricalParticipationExposures(
      QueryHistoricalParticipationExposuresRequest)
      returns (QueryHistoricalParticipationExposuresResponse) {
    option (google.api.http).get =
        "/fury/orderbooks/{book_uid}/historical-participation-exposures";
  }

  // ParticipationFulfilledBets queries fulfilled bets for given orderbook
  // participation.
  rpc ParticipationFulfilledBets(QueryParticipationFulfilledBetsRequest)
      returns (QueryParticipationFulfilledBetsResponse) {
    option (google.api.http).get = "/fury/orderbooks/{book_uid}/participations/"
                                   "{participation_index}/fulfilled_bets";
  }
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
// Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
// Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// QueryOrderBooksRequest is request type for Query/OrderBooks RPC method.
message QueryOrderBooksRequest {
  // status enables to query for order bookds matching a given status.
  string status = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryOrderBooksResponse is response type for the Query/OrderBooks RPC method
message QueryOrderBooksResponse {
  // orderbooks contains all the queried order books.
  repeated OrderBook orderbooks = 1 [ (gogoproto.nullable) = false ];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryOrderBookRequest is request type for the Query/OrderBook RPC method
message QueryOrderBookRequest {
  // book_uid defines the book id to query for.
  string book_uid = 1;
}

// QueryOrderBookResponse is response type for the Query/OrderBook RPC method
message QueryOrderBookResponse {
  // orderBook defines the the order book info.
  OrderBook orderbook = 1 [ (gogoproto.nullable) = false ];
}

// QueryBookParticipationsRequest is request type for the
// Query/BookParticipations RPC method
message QueryBookParticipationsRequest {
  // book_uid defines the book id to query for.
  string book_uid = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryBookParticipationsResponse is response type for the
// Query/BookParticipations RPC method
message QueryBookParticipationsResponse {
  repeated BookParticipation book_participations = 1
      [ (gogoproto.nullable) = false ];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryBookParticipationRequest is request type for the Query/BookParticipation
// RPC method
message QueryBookParticipationRequest {
  // book_uid defines the book id to query for.
  string book_uid = 1;

  // participation_index defines the participation index to query for
  uint64 participation_index = 2;
}

// QueryBookParticipationResponse is response type for the
// Query/BookParticipation RPC method
message QueryBookParticipationResponse {
  // book_participation defines the the book participation info.
  BookParticipation book_participation = 1 [ (gogoproto.nullable) = false ];
}

// QueryBookExposuresRequest is request type for the Query/BookExposures RPC
// method
message QueryBookExposuresRequest {
  // book_uid defines the book id to query for.
  string book_uid = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryBookExposuresResponse is response type for the Query/BookExposures RPC
// method
message QueryBookExposuresResponse {
  repeated BookOddsExposure book_exposures = 1 [ (gogoproto.nullable) = false ];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryBookExposureRequest is request type for the Query/BookExposure RPC
// method
message QueryBookExposureRequest {
  // book_uid defines the book id to query for.
  string book_uid = 1;

  // odds_uid defines the odds id to query for.
  string odds_uid = 2;
}

// QueryBookExposureResponse is response type for the Query/BookExposure RPC
// method
message QueryBookExposureResponse {
  // book_exposure defines the the book exposure info.
  BookOddsExposure book_exposure = 1 [ (gogoproto.nullable) = false ];
}

// QueryParticipationExposuresRequest is request type for the
// Query/ParticipationExposures RPC method
message QueryParticipationExposuresRequest {
  // book_uid defines the book id to query for.
  string book_uid = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryParticipationExposuresResponse is response type for the
// Query/ParticipationExposures RPC method
message QueryParticipationExposuresResponse {
  repeated ParticipationExposure participation_exposures = 1
      [ (gogoproto.nullable) = false ];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryParticipationExposureRequest is request type for the
// Query/ParticipationExposure RPC method
message QueryParticipationExposureRequest {
  // book_uid defines the book id to query for.
  string book_uid = 1;

  uint64 participation_index = 2;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

// QueryParticipationExposureResponse is response type for the
// Query/ParticipationExposure RPC method
message QueryParticipationExposureResponse {
  // book_exposure defines the the book exposure info.
  repeated ParticipationExposure participation_exposure = 1
      [ (gogoproto.nullable) = false ];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryHistoricalParticipationExposuresRequest is request type for the
// Query/HistoricalParticipationExposures RPC method
message QueryHistoricalParticipationExposuresRequest {
  // book_uid defines the book id to query for.
  string book_uid = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryHistoricalParticipationExposuresResponse is response type for the
// Query/HistoricalParticipationExposures RPC method
message QueryHistoricalParticipationExposuresResponse {
  repeated ParticipationExposure participation_exposures = 1
      [ (gogoproto.nullable) = false ];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryParticipationFulfilledBetsRequest is request type for the
// Query/ParticipationFulfilledBets RPC method
message QueryParticipationFulfilledBetsRequest {
  // book_uid defines the book id to query for.
  string book_uid = 1;

  uint64 participation_index = 2;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

// QueryParticipationFulfilledBetsResponse is response type for the
// Query/ParticipationFulfilledBets RPC method
message QueryParticipationFulfilledBetsResponse {
  // book_exposure defines the the book exposure info.
  repeated ParticipationBetPair participation_bets = 1
      [ (gogoproto.nullable) = false ];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
